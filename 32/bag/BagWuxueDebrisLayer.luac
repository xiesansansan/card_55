slot0 = class("BagWuxueDebrisLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = true
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {
			{
				name = "mGridView",
				cType = "GridView",
				params = {
					createColCb = "onCreateGridItem",
					itemNum = 1,
					colCount = 4,
					selectIndex = 1,
					pos = {
						x = -144,
						y = -20
					},
					size = {
						width = 400,
						height = 410
					}
				},
				children = {}
			},
			{
				name = "untitled3",
				cType = "Sprite",
				params = {
					image = "bb_12.png",
					pos = {
						x = 100,
						y = 0
					}
				},
				children = {}
			},
			{
				name = "gridCard",
				cType = "TemplateNode",
				params = {
					pos = {
						x = -357.15,
						y = -204.84
					}
				},
				children = {
					{
						name = "untitled5",
						cType = "Sprite",
						params = {
							image = "bb_3.png",
							pos = {
								x = 0,
								y = 0
							}
						},
						children = {}
					},
					{
						name = "untitled6",
						cType = "CardNode",
						params = {
							childName = "cardNode",
							allowClick = true,
							pos = {
								x = 0,
								y = 0
							}
						},
						children = {}
					}
				}
			},
			{
				name = "introView",
				cType = "Scale9Sprite",
				params = {
					image = "c_58.png",
					pos = {
						x = 329.21,
						y = 0
					},
					size = {
						width = 410.89,
						height = 460.31
					}
				},
				children = {
					{
						name = "headCard",
						cType = "CardNode",
						params = {
							allowClick = true,
							pos = {
								x = 75.04,
								y = 364.18
							}
						},
						children = {}
					},
					{
						name = "goodNameLabel",
						cType = "Label",
						params = {
							text = "Label",
							isRichText = false,
							anchor = {
								x = 0,
								y = 0.5
							},
							color = {
								g = 37,
								r = 37,
								b = 37
							},
							pos = {
								x = 141.61,
								y = 376.21
							}
						},
						children = {}
					},
					{
						name = "untitled10",
						cType = "Button",
						params = {
							image = "c_32.png",
							clickAction = "onGetBtn",
							pos = {
								x = 165,
								y = 88
							},
							titleText = TR("合 成")
						},
						children = {}
					}
				}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.super.ctor(slot0)
	slot0.initUI(slot0)
	slot0.getGoods(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)

	return 
end
slot0.getGoods = function (slot0)
	slot2 = {}

	for slot6, slot7 in pairs(slot1) do
		table.insert(slot2, slot7)
	end

	table.sort(slot2, function (slot0, slot1)
		slot4 = Resource.getModelInfo(slot0.ModelId).outputNeedNum <= slot0.Num
		slot5 = Resource.getModelInfo(slot1.ModelId).outputNeedNum <= slot1.Num

		if slot4 and not slot5 then
			return true
		end

		if slot5 and not slot4 then
			return false
		end

		if slot2.orderNum ~= slot3.orderNum then
			return slot2.orderNum < slot3.orderNum
		end

		if slot2.quality ~= slot3.quality then
			return slot3.quality < slot2.quality
		end

		if slot0.Num ~= slot1.Num then
			return slot1.Num < slot0.Num
		end

		return 
	end)

	slot0.mGoodsList = slot2

	if #slot0.mGoodsList < 16 then
		for slot7 = 1, #slot0.mGoodsList - 16, 1 do
			table.insert(slot0.mGoodsList, {})
		end
	elseif #slot0.mGoodsList%4 ~= 0 then
		for slot7 = 1, slot3 - 4, 1 do
			table.insert(slot0.mGoodsList, {})
		end
	end

	slot0.mGridView:setItemNum(#slot0.mGoodsList)
	slot0.introView:setVisible(0 < #slot0.mGoodsList)

	slot3 = 1

	for slot7, slot8 in ipairs(slot0.mGoodsList) do
		if next(slot8) ~= nil and slot8.EntityId == slot0.mSelectId then
			slot3 = slot7
		end
	end

	if slot3 == 1 and slot0.mSelIndex and slot0.mSelIndex <= 25 then
		slot0.mViewPos = nil
	end

	slot0.mGridView:setSelect(slot3)

	if slot0.mViewPos then
		slot0.mGridView.mScrollView:getInnerContainer():setPosition(slot0.mViewPos)
	end

	slot0.mSelIndex = slot3

	if 0 < #slot0.mGoodsList then
		slot0.showAttrLabel(slot0, slot0.mGoodsList[slot0.mSelIndex])
	end

	return 
end
slot0.onCreateGridItem = function (slot0, slot1, slot2, slot3)
	slot5 = Resource.getModelInfo(slot0.mGoodsList[slot2].ModelId)
	slot6 = slot0.createLayoutTemplateNode(slot0, "gridCard")

	if next(slot0.mGoodsList[slot2]) == nil then
		slot6.cardNode:removeFromParent()

		slot6.cardNode = nil

		slot6.setPosition(slot6, slot1.getContentSize(slot1).width*0.5, slot1.getContentSize(slot1).height*0.5)
		slot1.addChild(slot1, slot6)

		return 
	end

	slot7 = {}

	slot6.cardNode:setCardData({
		modelId = slot4.ModelId,
		num = slot4.Num
	}, (not slot3 or {
		Enums.CardShowAttr.eNum,
		Enums.CardShowAttr.eSelected
	}) and {
		Enums.CardShowAttr.eNum
	})
	slot6.cardNode:setClickAction(function ()
		slot0:showAttrLabel(slot0)
		slot0.showAttrLabel.mGridView:setSelect(slot0)

		slot0.showAttrLabel.mGridView.setSelect.mSelIndex = slot2
		slot0.showAttrLabel.mGridView.setSelect.mSelectId = slot2.EntityId

		return 
	end)
	slot6.cardNode:addChild(slot8, 100)
	slot6.setPosition(slot6, slot1.getContentSize(slot1).width*0.5, slot1.getContentSize(slot1).height*0.5)
	slot1.addChild(slot1, slot6)

	return 
end
slot0.showAttrLabel = function (slot0, slot1)
	if next(slot1) == nil then
		slot0.introView:setVisible(false)

		return 
	end

	if slot0.introLabel then
		slot0.introLabel:removeFromParent()

		slot0.introLabel = nil
	end

	slot0.headCard:setCardData({
		modelId = slot1.ModelId
	})
	slot0.goodNameLabel:setString(Resource.getModelInfo(slot1.ModelId).name)
	slot0.goodNameLabel:setColor(slot3)

	slot0.introLabel = UIWrap.newControl("Label", {
		isRichText = true,
		text = Resource.getModelInfo(slot1.ModelId).intro,
		pos = cc.p(30, 300),
		anchor = cc.p(0, 1),
		color = cc.c3b(25, 25, 25),
		size = cc.size(300, 0)
	})

	slot0.introView:addChild(slot0.introLabel)

	return 
end
slot0.onGetBtn = function (slot0)
	if Resource.getModelInfo(slot0.mGoodsList[slot0.mSelIndex].ModelId).outputNeedNum <= slot0.mGoodsList[slot0.mSelIndex].Num then
		slot0.requestGoodsUse(slot0, slot1, slot2.outputNeedNum)
	else
		ui.showFlashView(TR("碎片不足"))

		return 
	end

	return 
end
slot0.requestGoodsUse = function (slot0, slot1, slot2)
	slot0.socketRequest(slot0, {
		methodName = "GoodsUse",
		moduleName = "Goods",
		methodData = {
			slot1.EntityId,
			slot1.ModelId,
			slot2
		},
		successCallback = function (slot0)
			slot0.mSelIndex = 1

			slot0:getGoods()
			ui.showFlashView(TR("合成成功"))

			return 
		end
	})

	return 
end

return slot0
