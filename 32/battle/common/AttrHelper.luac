slot1 = {
	init = function ()
		if #slot0 == 0 then
			for slot3, slot4 in pairs(FightAttrType) do
				slot0[slot4] = slot3
			end
		end

		return 
	end,
	attrName = function (slot0)
		return slot0[slot0]
	end,
	attrId = function (slot0)
		return FightAttrType[slot0]
	end,
	getDefaultAttrs = function ()
		slot0 = {}

		for slot4, slot5 in pairs(FightAttrType) do
			if slot5 < 1000 then
				slot0[slot4] = {
					c = 0,
					a = 0,
					b = 0
				}
			end
		end

		return slot0
	end,
	parseBaseAttr = function (slot0)
		slot1 = {}

		if slot0 == nil or slot0 == "" then
			return slot1
		end

		for slot6, slot7 in ipairs(slot2) do
			slot1[tonumber(string.split(slot7, "|")[1])] = tonumber(string.split(slot7, "|")[2])
		end

		return slot1
	end,
	parseServerBaseAttr = function (slot0)
		slot1 = {}

		for slot5, slot6 in pairs(slot0) do
			if slot6 ~= 0 and slot0.attrId("e" .. slot5) then
				slot1[slot8] = slot6
			end
		end

		return slot1
	end,
	mergeBaseAttr = function (slot0, slot1, slot2)
		for slot6, slot7 in pairs(slot0) do
			slot8 = slot7*slot2

			if slot1[slot6] then
				slot1[slot6] = slot1[slot6] + slot8
			else
				slot1[slot6] = slot8
			end
		end

		return 
	end,
	mergeToPartAttr = function (slot0, slot1)
		for slot5, slot6 in pairs(slot0) do
			slot7 = 0
			slot8 = 0

			if slot0.additionAttr(slot5) then
				slot5 = slot9
				slot8 = slot6
			else
				slot7 = slot6
			end

			slot10 = slot1.attrName(slot5)
			slot1[slot10].a = slot1[slot10].a + slot7
			slot1[slot10].b = slot1[slot10].b + slot8
		end

		return 
	end,
	additionAttr = function (slot0)
		slot1 = {
			[FightAttrType.eAtkPer] = FightAttrType.eAtk,
			[FightAttrType.eHpPer] = FightAttrType.eHp,
			[FightAttrType.eArmPer] = FightAttrType.eArm
		}

		if require("battle.common.Const").BranchVersion == 3 then
			slot1 = {
				[FightAttrType.eAtkPer] = FightAttrType.eAtk,
				[FightAttrType.eHpPer] = FightAttrType.eHp,
				[FightAttrType.eArmPer] = FightAttrType.eArm,
				[FightAttrType.eConr] = FightAttrType.eCon,
				[FightAttrType.eInter] = FightAttrType.eInte,
				[FightAttrType.eStrr] = FightAttrType.eStr
			}
		end

		return slot1[slot0]
	end,
	parseSkillLvs = function (slot0)
		slot1 = {}

		for slot5, slot6 in pairs(slot0) do
			slot1[tonumber(slot5)] = slot6
		end

		return slot1
	end,
	parseDmageRatioValue = function (slot0)
		slot1 = {}
		slot2 = string.split(slot0, ",")

		for slot6 = 1, 2, 1 do
			slot1[slot6] = tonumber(slot2[slot6]) or 0
		end

		return slot1
	end,
	clampf = function (slot0, slot1, slot2)
		slot3 = 0

		if slot2 < slot1 then
			slot1 = slot2
			slot2 = slot1
		end

		if slot0 < slot1 then
			return slot1
		elseif slot0 < slot2 then
			return slot0
		else
			return slot2
		end

		return 
	end
}
slot2 = {}

({
	init = function ()
		if #slot0 == 0 then
			for slot3, slot4 in pairs(FightAttrType) do
				slot0[slot4] = slot3
			end
		end

		return 
	end,
	attrName = function (slot0)
		return slot0[slot0]
	end,
	attrId = function (slot0)
		return FightAttrType[slot0]
	end,
	getDefaultAttrs = function ()
		slot0 = {}

		for slot4, slot5 in pairs(FightAttrType) do
			if slot5 < 1000 then
				slot0[slot4] = {
					c = 0,
					a = 0,
					b = 0
				}
			end
		end

		return slot0
	end,
	parseBaseAttr = function (slot0)
		slot1 = {}

		if slot0 == nil or slot0 == "" then
			return slot1
		end

		for slot6, slot7 in ipairs(slot2) do
			slot1[tonumber(string.split(slot7, "|")[1])] = tonumber(string.split(slot7, "|")[2])
		end

		return slot1
	end,
	parseServerBaseAttr = function (slot0)
		slot1 = {}

		for slot5, slot6 in pairs(slot0) do
			if slot6 ~= 0 and slot0.attrId("e" .. slot5) then
				slot1[slot8] = slot6
			end
		end

		return slot1
	end,
	mergeBaseAttr = function (slot0, slot1, slot2)
		for slot6, slot7 in pairs(slot0) do
			slot8 = slot7*slot2

			if slot1[slot6] then
				slot1[slot6] = slot1[slot6] + slot8
			else
				slot1[slot6] = slot8
			end
		end

		return 
	end,
	mergeToPartAttr = function (slot0, slot1)
		for slot5, slot6 in pairs(slot0) do
			slot7 = 0
			slot8 = 0

			if slot0.additionAttr(slot5) then
				slot5 = slot9
				slot8 = slot6
			else
				slot7 = slot6
			end

			slot10 = slot1.attrName(slot5)
			slot1[slot10].a = slot1[slot10].a + slot7
			slot1[slot10].b = slot1[slot10].b + slot8
		end

		return 
	end,
	additionAttr = function (slot0)
		slot1 = {
			[FightAttrType.eAtkPer] = FightAttrType.eAtk,
			[FightAttrType.eHpPer] = FightAttrType.eHp,
			[FightAttrType.eArmPer] = FightAttrType.eArm
		}

		if require("battle.common.Const").BranchVersion == 3 then
			slot1 = {
				[FightAttrType.eAtkPer] = FightAttrType.eAtk,
				[FightAttrType.eHpPer] = FightAttrType.eHp,
				[FightAttrType.eArmPer] = FightAttrType.eArm,
				[FightAttrType.eConr] = FightAttrType.eCon,
				[FightAttrType.eInter] = FightAttrType.eInte,
				[FightAttrType.eStrr] = FightAttrType.eStr
			}
		end

		return slot1[slot0]
	end,
	parseSkillLvs = function (slot0)
		slot1 = {}

		for slot5, slot6 in pairs(slot0) do
			slot1[tonumber(slot5)] = slot6
		end

		return slot1
	end,
	parseDmageRatioValue = function (slot0)
		slot1 = {}
		slot2 = string.split(slot0, ",")

		for slot6 = 1, 2, 1 do
			slot1[slot6] = tonumber(slot2[slot6]) or 0
		end

		return slot1
	end,
	clampf = function (slot0, slot1, slot2)
		slot3 = 0

		if slot2 < slot1 then
			slot1 = slot2
			slot2 = slot1
		end

		if slot0 < slot1 then
			return slot1
		elseif slot0 < slot2 then
			return slot0
		else
			return slot2
		end

		return 
	end
})["init"]()

return {
	init = function ()
		if #slot0 == 0 then
			for slot3, slot4 in pairs(FightAttrType) do
				slot0[slot4] = slot3
			end
		end

		return 
	end,
	attrName = function (slot0)
		return slot0[slot0]
	end,
	attrId = function (slot0)
		return FightAttrType[slot0]
	end,
	getDefaultAttrs = function ()
		slot0 = {}

		for slot4, slot5 in pairs(FightAttrType) do
			if slot5 < 1000 then
				slot0[slot4] = {
					c = 0,
					a = 0,
					b = 0
				}
			end
		end

		return slot0
	end,
	parseBaseAttr = function (slot0)
		slot1 = {}

		if slot0 == nil or slot0 == "" then
			return slot1
		end

		for slot6, slot7 in ipairs(slot2) do
			slot1[tonumber(string.split(slot7, "|")[1])] = tonumber(string.split(slot7, "|")[2])
		end

		return slot1
	end,
	parseServerBaseAttr = function (slot0)
		slot1 = {}

		for slot5, slot6 in pairs(slot0) do
			if slot6 ~= 0 and slot0.attrId("e" .. slot5) then
				slot1[slot8] = slot6
			end
		end

		return slot1
	end,
	mergeBaseAttr = function (slot0, slot1, slot2)
		for slot6, slot7 in pairs(slot0) do
			slot8 = slot7*slot2

			if slot1[slot6] then
				slot1[slot6] = slot1[slot6] + slot8
			else
				slot1[slot6] = slot8
			end
		end

		return 
	end,
	mergeToPartAttr = function (slot0, slot1)
		for slot5, slot6 in pairs(slot0) do
			slot7 = 0
			slot8 = 0

			if slot0.additionAttr(slot5) then
				slot5 = slot9
				slot8 = slot6
			else
				slot7 = slot6
			end

			slot10 = slot1.attrName(slot5)
			slot1[slot10].a = slot1[slot10].a + slot7
			slot1[slot10].b = slot1[slot10].b + slot8
		end

		return 
	end,
	additionAttr = function (slot0)
		slot1 = {
			[FightAttrType.eAtkPer] = FightAttrType.eAtk,
			[FightAttrType.eHpPer] = FightAttrType.eHp,
			[FightAttrType.eArmPer] = FightAttrType.eArm
		}

		if require("battle.common.Const").BranchVersion == 3 then
			slot1 = {
				[FightAttrType.eAtkPer] = FightAttrType.eAtk,
				[FightAttrType.eHpPer] = FightAttrType.eHp,
				[FightAttrType.eArmPer] = FightAttrType.eArm,
				[FightAttrType.eConr] = FightAttrType.eCon,
				[FightAttrType.eInter] = FightAttrType.eInte,
				[FightAttrType.eStrr] = FightAttrType.eStr
			}
		end

		return slot1[slot0]
	end,
	parseSkillLvs = function (slot0)
		slot1 = {}

		for slot5, slot6 in pairs(slot0) do
			slot1[tonumber(slot5)] = slot6
		end

		return slot1
	end,
	parseDmageRatioValue = function (slot0)
		slot1 = {}
		slot2 = string.split(slot0, ",")

		for slot6 = 1, 2, 1 do
			slot1[slot6] = tonumber(slot2[slot6]) or 0
		end

		return slot1
	end,
	clampf = function (slot0, slot1, slot2)
		slot3 = 0

		if slot2 < slot1 then
			slot1 = slot2
			slot2 = slot1
		end

		if slot0 < slot1 then
			return slot1
		elseif slot0 < slot2 then
			return slot0
		else
			return slot2
		end

		return 
	end
}
