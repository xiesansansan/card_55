slot0 = require("battle.common.Const")
slot1 = require("battle.common.AttrHelper")
slot2 = require("battle.common.Base64")
slot3 = require("battle.common.FxHelper")
slot5 = {
	ctor = function ()
		require("battle.managers.UnitFactory").factory = require("battle.managers.UnitFactory").new()

		return 
	end,
	getDataFromConfig = function (slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7)
		slot1 = slot1 or 1
		slot2 = slot2 or 1
		slot4 = slot4 or 1
		slot5 = slot5 or 1
		slot3 = slot3 or 1
		slot6 = slot6 or false

		function slot8(slot0)
			slot1 = {}

			for slot6, slot7 in ipairs(slot2) do
				slot1[tonumber(string.split(slot7, "|")[1])] = tonumber(string.split(slot7, "|")[2])
			end

			return slot1
		end

		slot9 = {}

		for slot13, slot14 in pairs(slot0) do
			assert(HeroModel.items[slot14] ~= nil, "TeamManager.getDataFromConfig invalid id : " .. slot14)

			slot9[slot13] = {
				stepLv = 0,
				id = slot14,
				star = slot1,
				level = slot2,
				step = slot3,
				props = slot0.getDefaultAttrs(),
				curMp = slot7
			}
			slot9[slot13].props.eAtk = {
				c = 0,
				b = 0,
				a = (slot15.initialAtk + (slot2 - 1)*slot15.growAtk)*HeroStarRelation.items[slot14][slot15.initStar].starRatioAtk*slot5
			}
			slot9[slot13].props.eHp = {
				c = 0,
				b = 0,
				a = (slot15.initialHp + (slot2 - 1)*slot15.growHp)*HeroStarRelation.items[slot14][slot15.initStar].starRatioHp
			}
			slot9[slot13].props.eArm = {
				c = 0,
				b = 0,
				a = (slot15.initialArm + (slot2 - 1)*slot15.growArm)*HeroStarRelation.items[slot14][slot15.initStar].starRatioArm
			}
			slot9[slot13].props.eHit = {
				c = 0,
				a = 10000,
				b = 0
			}

			slot0.mergeToPartAttr(slot20, slot9[slot13].props)

			slot21 = {
				[tonumber(slot15.normalAttacckId)] = slot4,
				[tonumber(slot15.skillAttackId)] = slot4
			}

			if slot6 == false then
				for slot26, slot27 in pairs(slot22) do
					if slot27 <= slot3 then
						slot21[slot26] = slot4
					end
				end

				slot23 = 0

				for slot27, slot28 in pairs(slot21) do
					if slot23 < slot27 then
						slot23 = slot27
					end
				end

				if SkillModel.items[slot23 + 1] then
					slot21[slot23] = 1
				end

				for slot28, slot29 in pairs(slot24) do
					for slot33, slot34 in pairs(slot29) do
						if 0 < slot34.talentSkillId then
							slot21[slot34.talentSkillId] = 1
						end
					end
				end

				for slot29, slot30 in ipairs(slot25) do
					if 0 < slot30.skillId then
						slot21[slot30.skillId] = 1
					end
				end
			end

			slot9[slot13].skillLvs = slot21
		end

		return slot9
	end,
	getTestTeam = function (slot0, slot1, slot2, slot3, slot4)
		table.insert(({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				seed = math.random(1, 1000000),
				fightStatus = FightType.ePve,
				isPvp = slot3 or false
			}
		})["attacker"], slot0.getDataFromConfig(slot0, 5, 10, 4, 5, slot2 or 1))
		table.insert(({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				seed = math.random(1, 1000000),
				fightStatus = FightType.ePve,
				isPvp = slot3 or false
			}
		})["defender"], slot0.getDataFromConfig(slot1, 5, 10, 3, 5, slot2 or 1))

		({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				seed = math.random(1, 1000000),
				fightStatus = FightType.ePve,
				isPvp = slot3 or false
			}
		})["pet"][slot1.UnitGroup.ATTACKER] = {
			name = "attackerPet",
			titleId = 1,
			modelLv = 1,
			modelId = 19010000,
			skillLvs = {
				[100001.0] = 10,
				[100002.0] = 10
			},
			drumIdList = {}
		}
		({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				seed = math.random(1, 1000000),
				fightStatus = FightType.ePve,
				isPvp = slot3 or false
			}
		})["pet"][slot1.UnitGroup.DEFENDER] = {
			name = "defenderPet",
			titleId = 1,
			modelLv = 1,
			modelId = 19010000,
			skillLvs = {
				[100001.0] = 10,
				[100002.0] = 10
			},
			drumIdList = {}
		}

		if slot4 then
			slot5.pet[slot1.UnitGroup.ATTACKER].modelId = slot4
			slot5.pet[slot1.UnitGroup.DEFENDER].modelId = slot4
		else
			slot5.pet[slot1.UnitGroup.ATTACKER].modelId = 0
			slot5.pet[slot1.UnitGroup.DEFENDER].modelId = 0
		end

		slot5.zhenfa[slot1.UnitGroup.ATTACKER] = {
			modelId = 0,
			star = 0,
			step = 1
		}
		slot5.zhenfa[slot1.UnitGroup.DEFENDER] = {
			modelId = 0,
			star = 0,
			step = 1
		}

		return slot5
	end,
	getTestTeam4Editer = function (slot0, slot1)
		slot1 = slot1 or 1
		slot2 = {
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				isPvp = false,
				bg = "zdcj_01",
				seed = 1000,
				canSkip = true,
				fightStatus = FightType.ePve
			}
		}
		slot3 = {}
		slot4 = nil

		for slot8, slot9 in pairs(slot0.team) do
			if tonumber(slot8) == 6 then
				slot4 = clone(slot9)
			else
				slot11 = slot0.getDataFromConfig({
					slot9.modelId
				}, slot9.star, slot9.level, slot9.step, 1, slot1)

				for slot15, slot16 in pairs(slot9.skillInfo) do
					if slot11[1].skillLvs[tonumber(slot15)] then
						slot11[1].skillLvs[slot17] = slot16.lv
					elseif slot16.actived == true then
						slot11[1].skillLvs[slot17] = slot16.lv
					end
				end

				slot3[slot10] = slot11[1]
			end
		end

		table.insert(slot2.attacker, slot3)

		slot5 = nil
		slot6 = {}
		slot7 = 1

		for slot11, slot12 in pairs(slot0.enemy) do
			if tonumber(slot11) == 6 then
				slot5 = clone(slot12)
			else
				slot14 = slot0.getDataFromConfig({
					slot12.modelId
				}, slot12.star, slot12.level, slot12.step)

				for slot18, slot19 in pairs(slot12.skillInfo) do
					if slot14[1].skillLvs[tonumber(slot18)] then
						slot14[1].skillLvs[slot20] = slot19.lv
					elseif slot19.actived == true then
						slot14[1].skillLvs[slot20] = slot19.lv
					end
				end

				slot6[slot13] = slot14[1]
			end
		end

		table.insert(slot2.defender, slot6)

		if slot4 then
			slot2.pet[slot1.UnitGroup.ATTACKER] = {
				titleId = 1,
				modelId = slot4.modelId,
				modelLv = slot4.level,
				skillLvs = {},
				name = slot4.name,
				drumIdList = {
					1,
					2
				},
				fashioModelIdList = {
					19010000,
					19010001
				},
				titleModelIdList = {},
				equipSkillIdList = {
					5
				}
			}

			for slot11, slot12 in pairs(slot4.skillInfo) do
				if slot12.actived == true then
					slot2.pet[slot1.UnitGroup.ATTACKER].skillLvs[tonumber(slot11)] = slot12.lv
				end
			end

			slot0.parseTitleModelLv(slot4.level, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])

			if slot2.pet[slot1.UnitGroup.ATTACKER].fashioModelIdList and type(slot8) == "table" then
				slot0.parseFashionModelIdList(slot8, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end

			if slot2.pet[slot1.UnitGroup.ATTACKER].titleModelIdList and type(slot9) == "table" then
				slot0.parseTitleModelIdList(slot9, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end

			slot0.enableHardSkinSkill(slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER], 10)

			if slot2.pet[slot1.UnitGroup.ATTACKER].equipSkillIdList and type(slot10) == "table" then
				slot0.parseEquipSkillIdList(slot10, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end

			if slot2.pet[slot1.UnitGroup.ATTACKER].sectModelIdList and type(slot11) == "table" then
				slot0.parseSectModelIdList(slot11, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end

			if slot2.pet[slot1.UnitGroup.ATTACKER].modelLv and type(slot12) == "number" then
				slot0.parseFashionLvModelIdList(slot12, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end
		end

		if slot5 then
			slot2.pet[slot1.UnitGroup.DEFENDER] = {
				titleId = 1,
				modelId = slot5.modelId,
				modelLv = slot5.level,
				skillLvs = {},
				name = slot5.name,
				drumIdList = {
					1,
					2
				},
				fashioModelIdList = {
					19010000,
					19010001
				},
				titleModelIdList = {},
				equipSkillIdList = {}
			}

			for slot11, slot12 in pairs(slot5.skillInfo) do
				if slot12.actived == true then
					slot2.pet[slot1.UnitGroup.DEFENDER].skillLvs[tonumber(slot11)] = slot12.lv
				end
			end

			slot0.parseTitleModelLv(slot5.level, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])

			if slot2.pet[slot1.UnitGroup.DEFENDER].fashioModelIdList and type(slot8) == "table" then
				slot0.parseFashionModelIdList(slot8, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end

			if slot2.pet[slot1.UnitGroup.DEFENDER].titleModelIdList and type(slot9) == "table" then
				slot0.parseTitleModelIdList(slot9, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end

			slot0.enableHardSkinSkill(slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER], 10)

			if slot2.pet[slot1.UnitGroup.DEFENDER].equipSkillIdList and type(slot10) == "table" then
				slot0.parseEquipSkillIdList(slot10, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end

			if slot2.pet[slot1.UnitGroup.DEFENDER].sectModelIdList and type(slot11) == "table" then
				slot0.parseSectModelIdList(slot11, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end

			if slot2.pet[slot1.UnitGroup.DEFENDER].modelLv and type(slot12) == "number" then
				slot0.parseFashionLvModelIdList(slot12, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end
		end

		slot2.zhenfa[slot1.UnitGroup.ATTACKER] = {
			modelId = 0,
			star = 0,
			step = 1
		}
		slot2.zhenfa[slot1.UnitGroup.DEFENDER] = {
			modelId = 0,
			star = 0,
			step = 1
		}

		return slot2
	end,
	parseFashionModelIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		for slot8, slot9 in ipairs(slot0) do
			if FashionModel.items[slot9].actSkillId and slot10.actSkillId ~= "" then
				slot11 = tonumber(slot10.actSkillId)

				for slot16, slot17 in ipairs(slot12) do
					if tonumber(slot17) == 0 then
						slot3.skillLvs[slot11] = 1
					else
						slot19 = slot1

						if 5 < slot18 then
							slot18 = slot18 - 5
							slot19 = slot2
						end

						if slot19[1][slot18] and slot20.skillLvs then
							slot20.skillLvs[slot11] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	enableHardSkinSkill = function (slot0, slot1, slot2, slot3)
		if 0 < slot3 then
			require("config.RefiningsoulHardskinConfig")

			for slot7, slot8 in ipairs(RefiningsoulHardskinConfig.items) do
				if 0 < slot8.hardSkinSkillId then
					slot9 = slot8.hardSkinSkillId

					for slot14, slot15 in ipairs(slot10) do
						if tonumber(slot15) == 0 then
							slot2.skillLvs[slot9] = slot3
						else
							slot17 = slot0

							if 5 < slot16 then
								slot16 = slot16 - 5
								slot17 = slot1
							end

							if slot17[1][slot16] and slot18.skillLvs then
								slot18.skillLvs[slot9] = slot3
							end
						end
					end
				end
			end
		end

		return 
	end,
	parseEquipSkillIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		if EquipSkillConfig == nil then
			require("config.EquipSkillConfig")
		end

		for slot8, slot9 in ipairs(slot0) do
			if EquipSkillConfig.items[slot9] and slot10.skillId and 0 < slot10.skillId then
				slot11 = slot10.skillId

				for slot16, slot17 in ipairs(slot12) do
					if tonumber(slot17) == 0 then
						slot3.skillLvs[slot11] = 1
					else
						slot19 = slot1

						if 5 < slot18 then
							slot18 = slot18 - 5
							slot19 = slot2
						end

						if slot19[1][slot18] and slot20.skillLvs then
							slot20.skillLvs[slot11] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	parseTitleModelIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		for slot8, slot9 in ipairs(slot0) do
			if TitleConfig.items[slot9].actSkillId and slot10.actSkillId ~= "" then
				slot11 = tonumber(slot10.actSkillId)

				for slot16, slot17 in ipairs(slot12) do
					if tonumber(slot17) == 0 then
						slot3.skillLvs[slot11] = 1
					else
						slot19 = slot1

						if 5 < slot18 then
							slot18 = slot18 - 5
							slot19 = slot2
						end

						if slot19[1][slot18] and slot20.skillLvs then
							slot20.skillLvs[slot11] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	parseFashionLvModelIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		table.sort(slot5)

		for slot9, slot10 in ipairs(slot5) do
			if slot0 < slot10 then
				break
			end

			if FashionLvupConfig.items[slot10].getSkill and 0 < slot11.getSkill then
				slot12 = slot11.getSkill

				for slot17, slot18 in ipairs(slot13) do
					if tonumber(slot18) == 0 then
						slot3.skillLvs[slot12] = 1
					else
						slot20 = slot1

						if 5 < slot19 then
							slot19 = slot19 - 5
							slot20 = slot2
						end

						if slot20[1][slot19] and slot21.skillLvs then
							slot21.skillLvs[slot12] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	parseSectModelIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		for slot8, slot9 in ipairs(slot0) do
			if SectTokenModel.items[slot9][1].actSkillId and slot10.actSkillId ~= "" then
				slot11 = tonumber(slot10.actSkillId)

				for slot16, slot17 in ipairs(slot12) do
					if tonumber(slot17) == 0 then
						slot3.skillLvs[slot11] = 1
					else
						slot19 = slot1

						if 5 < slot18 then
							slot18 = slot18 - 5
							slot19 = slot2
						end

						if slot19[1][slot18] and slot20.skillLvs then
							slot20.skillLvs[slot11] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	parseTitleModelLv = function (slot0, slot1, slot2, slot3)
		if slot0.getVersionFlag() ~= "2x" then
			return 
		end

		slot4 = {}

		require("config.PlayerStepConfig")

		for slot8, slot9 in ipairs(PlayerStepConfig.items) do
			if slot8 <= slot0 and slot9.getSkill and 0 < slot9.getSkill then
				slot10 = tonumber(slot9.getSkill)

				for slot15, slot16 in ipairs(slot11) do
					if tonumber(slot16) == 0 then
						slot3.skillLvs[slot10] = 1
					else
						slot18 = slot1

						if 5 < slot17 then
							slot17 = slot17 - 5
							slot18 = slot2
						end

						if slot18[1][slot17] and slot19.skillLvs then
							slot19.skillLvs[slot10] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	getDataFromServer = function (slot0, slot1, slot2, slot3)
		slot2 = slot2 or false
		slot3 = slot3 or false
		({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {}
		})["attacker"][1] = {}

		for slot8 = 1, 5, 1 do
			if slot1.Heros[slot8] and slot9.TotalAttr then
				slot4.attacker[1][slot8] = {
					curWp = 0,
					id = slot9.HeroModelId,
					name = slot0.Decode(slot9.Name),
					level = slot9.Lv,
					star = slot9.Star,
					redStar = slot9.RedStar,
					step = slot9.Step,
					stepLv = slot9.StepLv,
					fap = slot9.Fap,
					bodyScale = slot9.BodyTypeR,
					curHp = slot9.CurrentHp,
					curMp = slot9.CurrentAng,
					atkDecayRatio = slot9.AtkDecayRatio,
					armDecayRatio = slot9.ArmDecayRatio,
					skillRatio = slot9.SkillRatio,
					props = slot1.getDefaultAttrs(),
					skillLvs = {},
					quality = slot9.Quality
				}

				slot1.mergeToPartAttr(slot10, slot4.attacker[1][slot8].props)

				slot4.attacker[1][slot8].skillLvs = slot1.parseSkillLvs(slot9.SkillInfoDic)
			end
		end

		slot4.defender[1] = {}

		for slot8 = 1, 5, 1 do
			if slot1.Heros[slot8 + 5] and slot9.TotalAttr then
				slot4.defender[1][slot8] = {
					curWp = 0,
					id = slot9.HeroModelId,
					name = slot0.Decode(slot9.Name),
					level = slot9.Lv,
					star = slot9.Star,
					redStar = slot9.RedStar,
					step = slot9.Step,
					stepLv = slot9.StepLv,
					fap = slot9.Fap,
					bodyScale = slot9.BodyTypeR,
					curHp = slot9.CurrentHp,
					curMp = slot9.CurrentAng,
					atkDecayRatio = slot9.AtkDecayRatio,
					armDecayRatio = slot9.ArmDecayRatio,
					props = slot1.getDefaultAttrs(),
					skillLvs = {},
					quality = slot9.Quality
				}

				slot1.mergeToPartAttr(slot10, slot4.defender[1][slot8].props)

				slot4.defender[1][slot8].skillLvs = slot1.parseSkillLvs(slot9.SkillInfoDic)
			end
		end

		if slot1.Players[1] then
			slot4.pet[slot2.UnitGroup.ATTACKER] = {
				modelId = slot5.ModelId,
				modelLv = slot5.Level,
				titleId = slot5.TitleId,
				skillLvs = slot5.SkillInfoDic,
				hardSkinLv = slot5.HardskinLv,
				name = slot0.Decode(slot5.Name),
				drumIdList = slot5.DrumIdList,
				fashioModelIdList = slot5.FashioModelIdList,
				titleModelIdList = slot5.TitleIdList,
				equipSkillIdList = slot5.EquipSkillIdList,
				sectModelIdList = slot5.SectIdList
			}

			slot3.parseTitleModelLv(slot5.Level, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])

			if slot4.pet[slot2.UnitGroup.ATTACKER].fashioModelIdList and type(slot6) == "table" then
				slot3.parseFashionModelIdList(slot6, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end

			if slot4.pet[slot2.UnitGroup.ATTACKER].titleModelIdList and type(slot7) == "table" then
				slot3.parseTitleModelIdList(slot7, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end

			if slot5.HardskinLv then
				slot3.enableHardSkinSkill(slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER], slot5.HardskinLv)
			end

			if slot4.pet[slot2.UnitGroup.ATTACKER].equipSkillIdList and type(slot8) == "table" then
				slot3.parseEquipSkillIdList(slot8, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end

			if slot4.pet[slot2.UnitGroup.ATTACKER].sectModelIdList and type(slot9) == "table" then
				slot3.parseSectModelIdList(slot9, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end

			if slot4.pet[slot2.UnitGroup.ATTACKER].modelLv and type(slot10) == "number" then
				slot3.parseFashionLvModelIdList(slot10, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end
		end

		if slot1.Players[2] then
			slot4.pet[slot2.UnitGroup.DEFENDER] = {
				modelId = slot6.ModelId,
				modelLv = slot6.Level,
				titleId = slot6.TitleId,
				skillLvs = slot6.SkillInfoDic,
				hardSkinLv = slot6.HardskinLv,
				name = slot0.Decode(slot6.Name),
				drumIdList = slot6.DrumIdList,
				fashioModelIdList = slot6.FashioModelIdList,
				titleModelIdList = slot6.TitleIdList,
				equipSkillIdList = slot6.EquipSkillIdList,
				sectModelIdList = slot6.SectIdList
			}

			slot3.parseTitleModelLv(slot6.Level, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])

			if slot4.pet[slot2.UnitGroup.DEFENDER].fashioModelIdList and type(slot7) == "table" then
				slot3.parseFashionModelIdList(slot7, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end

			if slot4.pet[slot2.UnitGroup.DEFENDER].titleModelIdList and type(slot8) == "table" then
				slot3.parseTitleModelIdList(slot8, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end

			if slot6.HardskinLv then
				slot3.enableHardSkinSkill(slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER], slot6.HardskinLv)
			end

			if slot4.pet[slot2.UnitGroup.DEFENDER].equipSkillIdList and type(slot9) == "table" then
				slot3.parseEquipSkillIdList(slot9, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end

			if slot4.pet[slot2.UnitGroup.DEFENDER].sectModelIdList and type(slot10) == "table" then
				slot3.parseSectModelIdList(slot10, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end

			if slot4.pet[slot2.UnitGroup.DEFENDER].modelLv and type(slot11) == "number" then
				slot3.parseFashionLvModelIdList(slot11, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end
		end

		if slot1.Strategys then
			slot4.zhenfa[slot2.UnitGroup.ATTACKER] = {
				modelId = slot1.Strategys[1]
			}
			slot4.zhenfa[slot2.UnitGroup.DEFENDER] = {
				modelId = slot1.Strategys[2]
			}
			slot4.zhenfa[slot2.UnitGroup.ATTACKER].step = (slot5 and slot5.ZhenfaStepLv) or 1
			slot4.zhenfa[slot2.UnitGroup.ATTACKER].star = (slot5 and slot5.ZhenfaStarLv) or 0
			slot4.zhenfa[slot2.UnitGroup.DEFENDER].step = (slot6 and slot6.ZhenfaStepLv) or 1
			slot4.zhenfa[slot2.UnitGroup.DEFENDER].star = (slot6 and slot6.ZhenfaStarLv) or 0
		end

		slot4.params = {
			seed = slot1.RandNum,
			fightStatus = slot0,
			isPvp = slot2,
			isWin = slot3
		}

		return slot4
	end,
	createUnit = function (slot0)
		return slot0.factory:createUnit(slot0)
	end,
	createPet = function (slot0)
		return slot0.factory:createPet(slot0)
	end,
	getRebornUnit = function (slot0, slot1, slot2, slot3, slot4)
		slot5 = clone(slot0.originData)
		slot5.curMp = slot3
		slot5.curWp = slot4
		slot5.curHp = (slot5.props.eHp.a*(slot5.props.eHp.b/10000 + 1) + slot5.props.eHp.c)*math.min(slot2, 1)
		slot7 = slot0.factory:createUnit(slot5)
		slot7.order = slot0.order
		slot7.group = slot0.group
		slot7.tmpOrder = slot0.tmpOrder
		slot7.isReborn = true
		slot7.attr.mp = slot3

		return slot7
	end,
	newUnitSkill = function (slot0, slot1, slot2)
		return slot0.factory:newUnitSkill(slot0, slot1, slot2)
	end
}
slot6 = {
	c = 0,
	a = 0,
	b = 0
}

return {
	ctor = function ()
		require("battle.managers.UnitFactory").factory = require("battle.managers.UnitFactory").new()

		return 
	end,
	getDataFromConfig = function (slot0, slot1, slot2, slot3, slot4, slot5, slot6, slot7)
		slot1 = slot1 or 1
		slot2 = slot2 or 1
		slot4 = slot4 or 1
		slot5 = slot5 or 1
		slot3 = slot3 or 1
		slot6 = slot6 or false

		function slot8(slot0)
			slot1 = {}

			for slot6, slot7 in ipairs(slot2) do
				slot1[tonumber(string.split(slot7, "|")[1])] = tonumber(string.split(slot7, "|")[2])
			end

			return slot1
		end

		slot9 = {}

		for slot13, slot14 in pairs(slot0) do
			assert(HeroModel.items[slot14] ~= nil, "TeamManager.getDataFromConfig invalid id : " .. slot14)

			slot9[slot13] = {
				stepLv = 0,
				id = slot14,
				star = slot1,
				level = slot2,
				step = slot3,
				props = slot0.getDefaultAttrs(),
				curMp = slot7
			}
			slot9[slot13].props.eAtk = {
				c = 0,
				b = 0,
				a = (slot15.initialAtk + (slot2 - 1)*slot15.growAtk)*HeroStarRelation.items[slot14][slot15.initStar].starRatioAtk*slot5
			}
			slot9[slot13].props.eHp = {
				c = 0,
				b = 0,
				a = (slot15.initialHp + (slot2 - 1)*slot15.growHp)*HeroStarRelation.items[slot14][slot15.initStar].starRatioHp
			}
			slot9[slot13].props.eArm = {
				c = 0,
				b = 0,
				a = (slot15.initialArm + (slot2 - 1)*slot15.growArm)*HeroStarRelation.items[slot14][slot15.initStar].starRatioArm
			}
			slot9[slot13].props.eHit = {
				c = 0,
				a = 10000,
				b = 0
			}

			slot0.mergeToPartAttr(slot20, slot9[slot13].props)

			slot21 = {
				[tonumber(slot15.normalAttacckId)] = slot4,
				[tonumber(slot15.skillAttackId)] = slot4
			}

			if slot6 == false then
				for slot26, slot27 in pairs(slot22) do
					if slot27 <= slot3 then
						slot21[slot26] = slot4
					end
				end

				slot23 = 0

				for slot27, slot28 in pairs(slot21) do
					if slot23 < slot27 then
						slot23 = slot27
					end
				end

				if SkillModel.items[slot23 + 1] then
					slot21[slot23] = 1
				end

				for slot28, slot29 in pairs(slot24) do
					for slot33, slot34 in pairs(slot29) do
						if 0 < slot34.talentSkillId then
							slot21[slot34.talentSkillId] = 1
						end
					end
				end

				for slot29, slot30 in ipairs(slot25) do
					if 0 < slot30.skillId then
						slot21[slot30.skillId] = 1
					end
				end
			end

			slot9[slot13].skillLvs = slot21
		end

		return slot9
	end,
	getTestTeam = function (slot0, slot1, slot2, slot3, slot4)
		table.insert(({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				seed = math.random(1, 1000000),
				fightStatus = FightType.ePve,
				isPvp = slot3 or false
			}
		})["attacker"], slot0.getDataFromConfig(slot0, 5, 10, 4, 5, slot2 or 1))
		table.insert(({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				seed = math.random(1, 1000000),
				fightStatus = FightType.ePve,
				isPvp = slot3 or false
			}
		})["defender"], slot0.getDataFromConfig(slot1, 5, 10, 3, 5, slot2 or 1))

		({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				seed = math.random(1, 1000000),
				fightStatus = FightType.ePve,
				isPvp = slot3 or false
			}
		})["pet"][slot1.UnitGroup.ATTACKER] = {
			name = "attackerPet",
			titleId = 1,
			modelLv = 1,
			modelId = 19010000,
			skillLvs = {
				[100001.0] = 10,
				[100002.0] = 10
			},
			drumIdList = {}
		}
		({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				seed = math.random(1, 1000000),
				fightStatus = FightType.ePve,
				isPvp = slot3 or false
			}
		})["pet"][slot1.UnitGroup.DEFENDER] = {
			name = "defenderPet",
			titleId = 1,
			modelLv = 1,
			modelId = 19010000,
			skillLvs = {
				[100001.0] = 10,
				[100002.0] = 10
			},
			drumIdList = {}
		}

		if slot4 then
			slot5.pet[slot1.UnitGroup.ATTACKER].modelId = slot4
			slot5.pet[slot1.UnitGroup.DEFENDER].modelId = slot4
		else
			slot5.pet[slot1.UnitGroup.ATTACKER].modelId = 0
			slot5.pet[slot1.UnitGroup.DEFENDER].modelId = 0
		end

		slot5.zhenfa[slot1.UnitGroup.ATTACKER] = {
			modelId = 0,
			star = 0,
			step = 1
		}
		slot5.zhenfa[slot1.UnitGroup.DEFENDER] = {
			modelId = 0,
			star = 0,
			step = 1
		}

		return slot5
	end,
	getTestTeam4Editer = function (slot0, slot1)
		slot1 = slot1 or 1
		slot2 = {
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {
				isPvp = false,
				bg = "zdcj_01",
				seed = 1000,
				canSkip = true,
				fightStatus = FightType.ePve
			}
		}
		slot3 = {}
		slot4 = nil

		for slot8, slot9 in pairs(slot0.team) do
			if tonumber(slot8) == 6 then
				slot4 = clone(slot9)
			else
				slot11 = slot0.getDataFromConfig({
					slot9.modelId
				}, slot9.star, slot9.level, slot9.step, 1, slot1)

				for slot15, slot16 in pairs(slot9.skillInfo) do
					if slot11[1].skillLvs[tonumber(slot15)] then
						slot11[1].skillLvs[slot17] = slot16.lv
					elseif slot16.actived == true then
						slot11[1].skillLvs[slot17] = slot16.lv
					end
				end

				slot3[slot10] = slot11[1]
			end
		end

		table.insert(slot2.attacker, slot3)

		slot5 = nil
		slot6 = {}
		slot7 = 1

		for slot11, slot12 in pairs(slot0.enemy) do
			if tonumber(slot11) == 6 then
				slot5 = clone(slot12)
			else
				slot14 = slot0.getDataFromConfig({
					slot12.modelId
				}, slot12.star, slot12.level, slot12.step)

				for slot18, slot19 in pairs(slot12.skillInfo) do
					if slot14[1].skillLvs[tonumber(slot18)] then
						slot14[1].skillLvs[slot20] = slot19.lv
					elseif slot19.actived == true then
						slot14[1].skillLvs[slot20] = slot19.lv
					end
				end

				slot6[slot13] = slot14[1]
			end
		end

		table.insert(slot2.defender, slot6)

		if slot4 then
			slot2.pet[slot1.UnitGroup.ATTACKER] = {
				titleId = 1,
				modelId = slot4.modelId,
				modelLv = slot4.level,
				skillLvs = {},
				name = slot4.name,
				drumIdList = {
					1,
					2
				},
				fashioModelIdList = {
					19010000,
					19010001
				},
				titleModelIdList = {},
				equipSkillIdList = {
					5
				}
			}

			for slot11, slot12 in pairs(slot4.skillInfo) do
				if slot12.actived == true then
					slot2.pet[slot1.UnitGroup.ATTACKER].skillLvs[tonumber(slot11)] = slot12.lv
				end
			end

			slot0.parseTitleModelLv(slot4.level, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])

			if slot2.pet[slot1.UnitGroup.ATTACKER].fashioModelIdList and type(slot8) == "table" then
				slot0.parseFashionModelIdList(slot8, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end

			if slot2.pet[slot1.UnitGroup.ATTACKER].titleModelIdList and type(slot9) == "table" then
				slot0.parseTitleModelIdList(slot9, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end

			slot0.enableHardSkinSkill(slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER], 10)

			if slot2.pet[slot1.UnitGroup.ATTACKER].equipSkillIdList and type(slot10) == "table" then
				slot0.parseEquipSkillIdList(slot10, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end

			if slot2.pet[slot1.UnitGroup.ATTACKER].sectModelIdList and type(slot11) == "table" then
				slot0.parseSectModelIdList(slot11, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end

			if slot2.pet[slot1.UnitGroup.ATTACKER].modelLv and type(slot12) == "number" then
				slot0.parseFashionLvModelIdList(slot12, slot2.attacker, slot2.defender, slot2.pet[slot1.UnitGroup.ATTACKER])
			end
		end

		if slot5 then
			slot2.pet[slot1.UnitGroup.DEFENDER] = {
				titleId = 1,
				modelId = slot5.modelId,
				modelLv = slot5.level,
				skillLvs = {},
				name = slot5.name,
				drumIdList = {
					1,
					2
				},
				fashioModelIdList = {
					19010000,
					19010001
				},
				titleModelIdList = {},
				equipSkillIdList = {}
			}

			for slot11, slot12 in pairs(slot5.skillInfo) do
				if slot12.actived == true then
					slot2.pet[slot1.UnitGroup.DEFENDER].skillLvs[tonumber(slot11)] = slot12.lv
				end
			end

			slot0.parseTitleModelLv(slot5.level, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])

			if slot2.pet[slot1.UnitGroup.DEFENDER].fashioModelIdList and type(slot8) == "table" then
				slot0.parseFashionModelIdList(slot8, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end

			if slot2.pet[slot1.UnitGroup.DEFENDER].titleModelIdList and type(slot9) == "table" then
				slot0.parseTitleModelIdList(slot9, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end

			slot0.enableHardSkinSkill(slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER], 10)

			if slot2.pet[slot1.UnitGroup.DEFENDER].equipSkillIdList and type(slot10) == "table" then
				slot0.parseEquipSkillIdList(slot10, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end

			if slot2.pet[slot1.UnitGroup.DEFENDER].sectModelIdList and type(slot11) == "table" then
				slot0.parseSectModelIdList(slot11, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end

			if slot2.pet[slot1.UnitGroup.DEFENDER].modelLv and type(slot12) == "number" then
				slot0.parseFashionLvModelIdList(slot12, slot2.defender, slot2.attacker, slot2.pet[slot1.UnitGroup.DEFENDER])
			end
		end

		slot2.zhenfa[slot1.UnitGroup.ATTACKER] = {
			modelId = 0,
			star = 0,
			step = 1
		}
		slot2.zhenfa[slot1.UnitGroup.DEFENDER] = {
			modelId = 0,
			star = 0,
			step = 1
		}

		return slot2
	end,
	parseFashionModelIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		for slot8, slot9 in ipairs(slot0) do
			if FashionModel.items[slot9].actSkillId and slot10.actSkillId ~= "" then
				slot11 = tonumber(slot10.actSkillId)

				for slot16, slot17 in ipairs(slot12) do
					if tonumber(slot17) == 0 then
						slot3.skillLvs[slot11] = 1
					else
						slot19 = slot1

						if 5 < slot18 then
							slot18 = slot18 - 5
							slot19 = slot2
						end

						if slot19[1][slot18] and slot20.skillLvs then
							slot20.skillLvs[slot11] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	enableHardSkinSkill = function (slot0, slot1, slot2, slot3)
		if 0 < slot3 then
			require("config.RefiningsoulHardskinConfig")

			for slot7, slot8 in ipairs(RefiningsoulHardskinConfig.items) do
				if 0 < slot8.hardSkinSkillId then
					slot9 = slot8.hardSkinSkillId

					for slot14, slot15 in ipairs(slot10) do
						if tonumber(slot15) == 0 then
							slot2.skillLvs[slot9] = slot3
						else
							slot17 = slot0

							if 5 < slot16 then
								slot16 = slot16 - 5
								slot17 = slot1
							end

							if slot17[1][slot16] and slot18.skillLvs then
								slot18.skillLvs[slot9] = slot3
							end
						end
					end
				end
			end
		end

		return 
	end,
	parseEquipSkillIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		if EquipSkillConfig == nil then
			require("config.EquipSkillConfig")
		end

		for slot8, slot9 in ipairs(slot0) do
			if EquipSkillConfig.items[slot9] and slot10.skillId and 0 < slot10.skillId then
				slot11 = slot10.skillId

				for slot16, slot17 in ipairs(slot12) do
					if tonumber(slot17) == 0 then
						slot3.skillLvs[slot11] = 1
					else
						slot19 = slot1

						if 5 < slot18 then
							slot18 = slot18 - 5
							slot19 = slot2
						end

						if slot19[1][slot18] and slot20.skillLvs then
							slot20.skillLvs[slot11] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	parseTitleModelIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		for slot8, slot9 in ipairs(slot0) do
			if TitleConfig.items[slot9].actSkillId and slot10.actSkillId ~= "" then
				slot11 = tonumber(slot10.actSkillId)

				for slot16, slot17 in ipairs(slot12) do
					if tonumber(slot17) == 0 then
						slot3.skillLvs[slot11] = 1
					else
						slot19 = slot1

						if 5 < slot18 then
							slot18 = slot18 - 5
							slot19 = slot2
						end

						if slot19[1][slot18] and slot20.skillLvs then
							slot20.skillLvs[slot11] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	parseFashionLvModelIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		table.sort(slot5)

		for slot9, slot10 in ipairs(slot5) do
			if slot0 < slot10 then
				break
			end

			if FashionLvupConfig.items[slot10].getSkill and 0 < slot11.getSkill then
				slot12 = slot11.getSkill

				for slot17, slot18 in ipairs(slot13) do
					if tonumber(slot18) == 0 then
						slot3.skillLvs[slot12] = 1
					else
						slot20 = slot1

						if 5 < slot19 then
							slot19 = slot19 - 5
							slot20 = slot2
						end

						if slot20[1][slot19] and slot21.skillLvs then
							slot21.skillLvs[slot12] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	parseSectModelIdList = function (slot0, slot1, slot2, slot3)
		slot4 = {}

		for slot8, slot9 in ipairs(slot0) do
			if SectTokenModel.items[slot9][1].actSkillId and slot10.actSkillId ~= "" then
				slot11 = tonumber(slot10.actSkillId)

				for slot16, slot17 in ipairs(slot12) do
					if tonumber(slot17) == 0 then
						slot3.skillLvs[slot11] = 1
					else
						slot19 = slot1

						if 5 < slot18 then
							slot18 = slot18 - 5
							slot19 = slot2
						end

						if slot19[1][slot18] and slot20.skillLvs then
							slot20.skillLvs[slot11] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	parseTitleModelLv = function (slot0, slot1, slot2, slot3)
		if slot0.getVersionFlag() ~= "2x" then
			return 
		end

		slot4 = {}

		require("config.PlayerStepConfig")

		for slot8, slot9 in ipairs(PlayerStepConfig.items) do
			if slot8 <= slot0 and slot9.getSkill and 0 < slot9.getSkill then
				slot10 = tonumber(slot9.getSkill)

				for slot15, slot16 in ipairs(slot11) do
					if tonumber(slot16) == 0 then
						slot3.skillLvs[slot10] = 1
					else
						slot18 = slot1

						if 5 < slot17 then
							slot17 = slot17 - 5
							slot18 = slot2
						end

						if slot18[1][slot17] and slot19.skillLvs then
							slot19.skillLvs[slot10] = 1
						end
					end
				end
			end
		end

		return slot4
	end,
	getDataFromServer = function (slot0, slot1, slot2, slot3)
		slot2 = slot2 or false
		slot3 = slot3 or false
		({
			attacker = {},
			defender = {},
			pet = {},
			zhenfa = {},
			params = {}
		})["attacker"][1] = {}

		for slot8 = 1, 5, 1 do
			if slot1.Heros[slot8] and slot9.TotalAttr then
				slot4.attacker[1][slot8] = {
					curWp = 0,
					id = slot9.HeroModelId,
					name = slot0.Decode(slot9.Name),
					level = slot9.Lv,
					star = slot9.Star,
					redStar = slot9.RedStar,
					step = slot9.Step,
					stepLv = slot9.StepLv,
					fap = slot9.Fap,
					bodyScale = slot9.BodyTypeR,
					curHp = slot9.CurrentHp,
					curMp = slot9.CurrentAng,
					atkDecayRatio = slot9.AtkDecayRatio,
					armDecayRatio = slot9.ArmDecayRatio,
					skillRatio = slot9.SkillRatio,
					props = slot1.getDefaultAttrs(),
					skillLvs = {},
					quality = slot9.Quality
				}

				slot1.mergeToPartAttr(slot10, slot4.attacker[1][slot8].props)

				slot4.attacker[1][slot8].skillLvs = slot1.parseSkillLvs(slot9.SkillInfoDic)
			end
		end

		slot4.defender[1] = {}

		for slot8 = 1, 5, 1 do
			if slot1.Heros[slot8 + 5] and slot9.TotalAttr then
				slot4.defender[1][slot8] = {
					curWp = 0,
					id = slot9.HeroModelId,
					name = slot0.Decode(slot9.Name),
					level = slot9.Lv,
					star = slot9.Star,
					redStar = slot9.RedStar,
					step = slot9.Step,
					stepLv = slot9.StepLv,
					fap = slot9.Fap,
					bodyScale = slot9.BodyTypeR,
					curHp = slot9.CurrentHp,
					curMp = slot9.CurrentAng,
					atkDecayRatio = slot9.AtkDecayRatio,
					armDecayRatio = slot9.ArmDecayRatio,
					props = slot1.getDefaultAttrs(),
					skillLvs = {},
					quality = slot9.Quality
				}

				slot1.mergeToPartAttr(slot10, slot4.defender[1][slot8].props)

				slot4.defender[1][slot8].skillLvs = slot1.parseSkillLvs(slot9.SkillInfoDic)
			end
		end

		if slot1.Players[1] then
			slot4.pet[slot2.UnitGroup.ATTACKER] = {
				modelId = slot5.ModelId,
				modelLv = slot5.Level,
				titleId = slot5.TitleId,
				skillLvs = slot5.SkillInfoDic,
				hardSkinLv = slot5.HardskinLv,
				name = slot0.Decode(slot5.Name),
				drumIdList = slot5.DrumIdList,
				fashioModelIdList = slot5.FashioModelIdList,
				titleModelIdList = slot5.TitleIdList,
				equipSkillIdList = slot5.EquipSkillIdList,
				sectModelIdList = slot5.SectIdList
			}

			slot3.parseTitleModelLv(slot5.Level, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])

			if slot4.pet[slot2.UnitGroup.ATTACKER].fashioModelIdList and type(slot6) == "table" then
				slot3.parseFashionModelIdList(slot6, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end

			if slot4.pet[slot2.UnitGroup.ATTACKER].titleModelIdList and type(slot7) == "table" then
				slot3.parseTitleModelIdList(slot7, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end

			if slot5.HardskinLv then
				slot3.enableHardSkinSkill(slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER], slot5.HardskinLv)
			end

			if slot4.pet[slot2.UnitGroup.ATTACKER].equipSkillIdList and type(slot8) == "table" then
				slot3.parseEquipSkillIdList(slot8, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end

			if slot4.pet[slot2.UnitGroup.ATTACKER].sectModelIdList and type(slot9) == "table" then
				slot3.parseSectModelIdList(slot9, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end

			if slot4.pet[slot2.UnitGroup.ATTACKER].modelLv and type(slot10) == "number" then
				slot3.parseFashionLvModelIdList(slot10, slot4.attacker, slot4.defender, slot4.pet[slot2.UnitGroup.ATTACKER])
			end
		end

		if slot1.Players[2] then
			slot4.pet[slot2.UnitGroup.DEFENDER] = {
				modelId = slot6.ModelId,
				modelLv = slot6.Level,
				titleId = slot6.TitleId,
				skillLvs = slot6.SkillInfoDic,
				hardSkinLv = slot6.HardskinLv,
				name = slot0.Decode(slot6.Name),
				drumIdList = slot6.DrumIdList,
				fashioModelIdList = slot6.FashioModelIdList,
				titleModelIdList = slot6.TitleIdList,
				equipSkillIdList = slot6.EquipSkillIdList,
				sectModelIdList = slot6.SectIdList
			}

			slot3.parseTitleModelLv(slot6.Level, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])

			if slot4.pet[slot2.UnitGroup.DEFENDER].fashioModelIdList and type(slot7) == "table" then
				slot3.parseFashionModelIdList(slot7, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end

			if slot4.pet[slot2.UnitGroup.DEFENDER].titleModelIdList and type(slot8) == "table" then
				slot3.parseTitleModelIdList(slot8, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end

			if slot6.HardskinLv then
				slot3.enableHardSkinSkill(slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER], slot6.HardskinLv)
			end

			if slot4.pet[slot2.UnitGroup.DEFENDER].equipSkillIdList and type(slot9) == "table" then
				slot3.parseEquipSkillIdList(slot9, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end

			if slot4.pet[slot2.UnitGroup.DEFENDER].sectModelIdList and type(slot10) == "table" then
				slot3.parseSectModelIdList(slot10, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end

			if slot4.pet[slot2.UnitGroup.DEFENDER].modelLv and type(slot11) == "number" then
				slot3.parseFashionLvModelIdList(slot11, slot4.defender, slot4.attacker, slot4.pet[slot2.UnitGroup.DEFENDER])
			end
		end

		if slot1.Strategys then
			slot4.zhenfa[slot2.UnitGroup.ATTACKER] = {
				modelId = slot1.Strategys[1]
			}
			slot4.zhenfa[slot2.UnitGroup.DEFENDER] = {
				modelId = slot1.Strategys[2]
			}
			slot4.zhenfa[slot2.UnitGroup.ATTACKER].step = (slot5 and slot5.ZhenfaStepLv) or 1
			slot4.zhenfa[slot2.UnitGroup.ATTACKER].star = (slot5 and slot5.ZhenfaStarLv) or 0
			slot4.zhenfa[slot2.UnitGroup.DEFENDER].step = (slot6 and slot6.ZhenfaStepLv) or 1
			slot4.zhenfa[slot2.UnitGroup.DEFENDER].star = (slot6 and slot6.ZhenfaStarLv) or 0
		end

		slot4.params = {
			seed = slot1.RandNum,
			fightStatus = slot0,
			isPvp = slot2,
			isWin = slot3
		}

		return slot4
	end,
	createUnit = function (slot0)
		return slot0.factory.createUnit(slot0)
	end,
	createPet = function (slot0)
		return slot0.factory.createPet(slot0)
	end,
	getRebornUnit = function (slot0, slot1, slot2, slot3, slot4)
		slot5 = clone(slot0.originData)
		slot5.curMp = slot3
		slot5.curWp = slot4
		slot5.curHp = (slot5.props.eHp.a*(slot5.props.eHp.b/10000 + 1) + slot5.props.eHp.c)*math.min(slot2, 1)
		slot7 = slot0.factory.createUnit(slot5)
		slot7.order = slot0.order
		slot7.group = slot0.group
		slot7.tmpOrder = slot0.tmpOrder
		slot7.isReborn = true
		slot7.attr.mp = slot3

		return slot7
	end,
	newUnitSkill = function (slot0, slot1, slot2)
		return slot0.factory.newUnitSkill(slot0, slot1, slot2)
	end
}
