err: slotworks.py assert warp.controls.contents[i].slot == slot.slot
slot0 = nil

function setmetatableindex(slot0, slot1)
	if type(slot0) == "userdata" then
		if not tolua.getpeer(slot0) then
			tolua.setpeer(slot0, {})
		end

		slot0(slot2, slot1)
	elseif not getmetatable(slot0) or {}.__index then
		slot2.__index = slot1

		setmetatable(slot0, slot2)
	elseif slot2.__index ~= slot1 then
		slot0(slot2, slot1)
	end

	return 
end

function clone(slot0)
	slot1 = {}

	return function (slot0)
		if type(slot0) ~= "table" then
			return slot0
		elseif slot0[slot0] then
			return slot0[slot0]
		end

		slot0[slot0] = {}

		for slot5, slot6 in pairs(slot0) do
			slot1[slot1(slot5)] = slot1(slot6)
		end

		return setmetatable(slot1, getmetatable(slot0))
	end(slot0)
end

function class(slot0, ...)
	slot1 = {
		__cname = slot0
	}

	for slot6, slot7 in ipairs(slot2) do
		assert(type(slot7) == "nil" or slot8 == "table" or slot8 == "function", string.format("class() - create class \"%s\" with invalid super class type \"%s\"", slot0, slot8))

		if slot8 == "function" then
			assert(slot1.__create == nil, string.format("class() - create class \"%s\" with more than one creating function", slot0))

			slot1.__create = slot7
		elseif slot8 == "table" then
			if slot7[".isclass"] then
				assert(slot1.__create == nil, string.format("class() - create class \"%s\" with more than one creating function or native class", slot0))

				slot1.__create = function ()
					return slot0:create()
				end
			else
				slot1.__supers = slot1.__supers or {}
				slot1.__supers[#slot1.__supers + 1] = slot7

				if not slot1.super then
					slot1.super = slot7
				end
			end
		else
			error(string.format("class() - create class \"%s\" with invalid super type", slot0), 0)
		end
	end

	slot1.__index = slot1

	if not slot1.__supers or #slot1.__supers == 1 then
		setmetatable(slot1, {
			__index = slot1.super
		})
	else
		setmetatable(slot1, {
			__index = function (slot0, slot1)
				for slot6 = 1, #slot0.__supers, 1 do
					if slot2[slot6][slot1] then
						return slot7[slot1]
					end
				end

				return 
			end
		})
	end

	if not slot1.ctor then
		slot1.ctor = function ()
			return 
		end
	end

	slot1.new = function (...)
		setmetatableindex((not slot0.__create or slot0.__create(...)) and {}, )

		(not slot0.__create or slot0.__create(...)) and {}.class = (not slot0.__create or slot0.__create(...)) and {}

		(not slot0.__create or slot0.__create(...)) and {}:ctor(...)

		return (not slot0.__create or slot0.__create(...)) and {}
	end
	slot1.create = function (slot0, ...)
		return slot0.new(...)
	end

	return slot1
end

table.values = function (slot0)
	slot1 = {}

	for slot5, slot6 in pairs(slot0) do
		slot1[#slot1 + 1] = slot6
	end

	return slot1
end
table.keys = function (slot0)
	slot1 = {}

	for slot5, slot6 in pairs(slot0) do
		slot1[#slot1 + 1] = slot5
	end

	return slot1
end

function slot1(slot0)
	if type(slot0) == "string" then
		slot0 = "\"" .. slot0 .. "\""
	end

	return tostring(slot0)
end

function dump(slot0, slot1, slot2)
	if type(slot2) ~= "number" then
		slot2 = 3
	end

	slot3 = {}

	print("dump from: " .. string.trim(string.split(debug.traceback("", 2), "\n")[3]))
	slot6(slot0, slot1, "", 1)

	for slot10, slot11 in ipairs(slot4) do
		print(slot11)
	end

	return 
end

string.split = function (slot0, slot1)
	slot0 = tostring(slot0)

	if tostring(slot1) == "" then
		return false
	end

	slot2 = 0
	slot3 = {}

	for slot7, slot8 in nil do
		table.insert(slot3, string.sub(slot0, slot2, slot7 - 1))

		slot2 = slot8 + 1
	end

	table.insert(slot3, string.sub(slot0, slot2))

	return slot3
end
string.trim = function (slot0)
	return string.gsub(string.gsub(slot0, "^[ \t\n\r]+", ""), "[ \t\n\r]+$", "")
end

function TR(...)
	return 
end

return 
