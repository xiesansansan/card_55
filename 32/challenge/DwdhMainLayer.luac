slot0 = class("DwdhMainLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = true
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "Sprite",
		params = {
			isFullScale = true,
			scaleApt = 2,
			posApt = 1,
			image = "sddh_12.png",
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {
			{
				name = "seaSurfaceEffect",
				cType = "Effect",
				params = {
					loop = true,
					dataFile = "effect_ui_shidaodahui",
					delayInit = true,
					isPlayAnimation = true,
					animation = "haimian",
					pos = {
						x = 700,
						y = 315.54
					}
				},
				children = {}
			},
			{
				name = "untitled102",
				cType = "Sprite",
				params = {
					zOrder = 1,
					image = "sddh_25.png",
					pos = {
						x = 648.33,
						y = 333.24
					}
				},
				children = {}
			},
			{
				name = "seaFlowerEffect",
				cType = "Effect",
				params = {
					loop = true,
					dataFile = "effect_ui_shidaodahui",
					delayInit = true,
					isPlayAnimation = true,
					animation = "qianjinglang",
					pos = {
						x = 1581.89,
						y = 164.91
					}
				},
				children = {}
			}
		}
	},
	{
		name = "untitled105",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 1136,
				y = 0
			}
		},
		children = {
			{
				name = "boatEffect",
				cType = "Effect",
				params = {
					loop = true,
					dataFile = "effect_ui_shidaodahui",
					delayInit = true,
					isPlayAnimation = true,
					animation = "chuan",
					pos = {
						x = -674.59,
						y = 325.57
					}
				},
				children = {}
			},
			{
				name = "figureHero",
				cType = "FigureHero",
				params = {
					zOrder = 1,
					heroModelId = 12011105,
					flipX = true,
					pos = {
						x = -171,
						y = 76
					}
				},
				children = {}
			},
			{
				name = "untitled98",
				cType = "Sprite",
				params = {
					image = "txdy_13.png",
					pos = {
						x = -156.28,
						y = 298.86
					}
				},
				children = {
					{
						name = "mNameLabel",
						cType = "Label",
						params = {
							fontSize = 18,
							color = {
								g = 249,
								r = 249,
								b = 249
							},
							pos = {
								x = 75.89,
								y = 47.07
							},
							text = TR("玩家名字")
						},
						children = {}
					},
					{
						name = "untitled100",
						cType = "Sprite",
						params = {
							image = "sddh_3.png",
							pos = {
								x = 73.9,
								y = 34.15
							}
						},
						children = {}
					},
					{
						name = "mScoreLabel",
						cType = "Label",
						params = {
							fontSize = 16,
							color = {
								g = 226,
								r = 226,
								b = 226
							},
							pos = {
								x = 76.09,
								y = 25.82
							},
							text = TR("暂无积分")
						},
						children = {}
					}
				}
			}
		}
	},
	{
		name = "untitled103",
		cType = "Sprite",
		params = {
			posApt = 1,
			scaleApt = 2,
			isFullScale = true,
			image = "sddh_26.png",
			anchor = {
				x = 0,
				y = 0
			},
			pos = {
				x = 0,
				y = 0
			}
		},
		children = {}
	},
	{
		name = "untitled2",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 1136,
				y = 640
			}
		},
		children = {
			{
				name = "untitled3",
				cType = "TopResourceNode",
				params = {
					anchor = {
						x = 1,
						y = 1
					},
					moduleIdList = {
						1111,
						1112,
						1114
					},
					pos = {
						x = 0,
						y = 0
					}
				},
				children = {}
			},
			{
				name = "targetBg",
				cType = "Sprite",
				params = {
					image = "sddh_18.png",
					anchor = {
						x = 0,
						y = 0.5
					},
					pos = {
						x = -167.09,
						y = -82.8
					}
				},
				children = {
					{
						name = "boxBtn",
						cType = "Button",
						custom = {
							{
								value = 1,
								name = "tag",
								type = "integer"
							}
						},
						params = {
							image = "sddh_19.png",
							clickAction = "onRankLayer",
							pos = {
								x = 137.43,
								y = 39.95
							}
						},
						children = {}
					},
					{
						name = "boxGetLabel",
						cType = "Label",
						params = {
							fontSize = 16,
							text = "0/5",
							color = {
								g = 255,
								r = 255,
								b = 255
							},
							outlineColor = {
								g = 42,
								r = 51,
								b = 24
							},
							pos = {
								x = 136.17,
								y = 12.71
							}
						},
						children = {}
					},
					{
						name = "untitled94",
						cType = "Label",
						params = {
							fontSize = 16,
							color = {
								g = 199,
								r = 223,
								b = 42
							},
							pos = {
								x = 79.46,
								y = 25.5
							},
							text = TR("挑战奖励")
						},
						children = {}
					}
				}
			}
		}
	},
	{
		name = "untitled4",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 0,
				y = 640
			}
		},
		children = {
			{
				name = "untitled5",
				cType = "Button",
				params = {
					clickAction = "onClickCloseBtn",
					image = "c_1.png",
					anchor = {
						x = 0,
						y = 1
					},
					pos = {
						x = 0,
						y = 0
					}
				},
				children = {
					{
						name = "untitled6",
						cType = "Sprite",
						params = {
							image = "sddh_1.png",
							pos = {
								x = 38.23,
								y = 5.89
							}
						},
						children = {}
					}
				}
			},
			{
				name = "untitled7",
				cType = "Button",
				params = {
					image = "c_3.png",
					clickAction = "onRule",
					pos = {
						x = 288.23,
						y = -27.46
					}
				},
				children = {}
			}
		}
	},
	{
		name = "centerNode",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {
			{
				name = "startLabel",
				cType = "Label",
				params = {
					isRichText = true,
					hide = true,
					zOrder = 100,
					anchor = {
						x = 0,
						y = 0.5
					},
					pos = {
						x = -296.67,
						y = -106.69
					},
					text = TR("开战倒计时")
				},
				children = {}
			},
			{
				name = "changeBtn",
				cType = "Button",
				params = {
					image = "bwld_46.png",
					isNeedOutline = true,
					outlineColor = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = -19.6,
						y = -43.77
					}
				},
				children = {}
			},
			{
				name = "changeBg",
				cType = "Sprite",
				params = {
					image = "bwld_47.png",
					hide = true,
					pos = {
						x = 48.65,
						y = -43.37
					}
				},
				children = {
					{
						name = "changeLabel",
						cType = "Label",
						params = {
							text = "8s",
							color = {
								g = 199,
								r = 223,
								b = 42
							},
							outlineColor = {
								g = 42,
								r = 51,
								b = 24
							},
							pos = {
								x = 33.42,
								y = 9.07
							}
						},
						children = {}
					}
				}
			},
			{
				name = "challengPlayerNode",
				cType = "TemplateNode",
				custom = {
					{
						value = "figure-heroModelId",
						name = "heroModelId",
						type = "string"
					},
					{
						value = "figure-stepLv",
						name = "stepLv",
						type = "string"
					}
				},
				params = {
					pos = {
						x = -229.39,
						y = -2.93
					}
				},
				children = {
					{
						name = "shadow",
						cType = "Sprite",
						params = {
							image = "zd_black.png",
							pos = {
								x = 5,
								y = 0
							}
						},
						children = {}
					},
					{
						name = "figure",
						cType = "FigureHero",
						params = {
							heroModelId = 12011103,
							pos = {
								x = 5.88,
								y = 6.46
							}
						},
						children = {}
					},
					{
						name = "untitled68",
						cType = "Button",
						params = {
							image = "c_pure.png",
							childName = "button",
							pos = {
								x = 8.52,
								y = 106.37
							},
							size = {
								width = 106.97,
								height = 196.24
							}
						},
						children = {}
					},
					{
						name = "nameBg",
						cType = "Sprite",
						params = {
							image = "txdy_13.png",
							pos = {
								x = 23.21,
								y = 232.11
							}
						},
						children = {
							{
								name = "playerNameLabel",
								cType = "Label",
								params = {
									fontSize = 18,
									color = {
										g = 249,
										r = 249,
										b = 249
									},
									pos = {
										x = 75.89,
										y = 47.07
									},
									text = TR("玩家名字")
								},
								children = {}
							},
							{
								name = "untitled82",
								cType = "Sprite",
								params = {
									image = "sddh_3.png",
									pos = {
										x = 73.9,
										y = 34.15
									}
								},
								children = {}
							},
							{
								name = "guildNameLabel",
								cType = "Label",
								params = {
									fontSize = 16,
									color = {
										g = 226,
										r = 226,
										b = 226
									},
									pos = {
										x = 76.09,
										y = 25.82
									},
									text = TR("暂无帮派")
								},
								children = {}
							}
						}
					},
					{
						name = "untitled84",
						cType = "Sprite",
						params = {
							image = "sddh_2.png",
							childName = "quickSprite",
							pos = {
								x = 7.98,
								y = 119.32
							}
						},
						children = {}
					},
					{
						name = "untitled85",
						cType = "Sprite",
						params = {
							childName = "highScoreSprite",
							image = "sddh_17.png",
							hide = true,
							pos = {
								x = -32.41,
								y = 131.34
							}
						},
						children = {}
					}
				}
			}
		}
	},
	{
		name = "untitled9",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			isLiuHai = true,
			pos = {
				x = 0,
				y = 0
			}
		},
		children = {
			{
				name = "untitled10",
				cType = "Button",
				params = {
					image = "tb_gn_35.png",
					clickAction = "onStore",
					pos = {
						x = 55.47,
						y = 56.74
					}
				},
				children = {}
			},
			{
				name = "untitled11",
				cType = "Button",
				custom = {
					{
						value = 1,
						name = "tag",
						type = "integer"
					}
				},
				params = {
					image = "tb_gn_13.png",
					clickAction = "onRankLayer",
					pos = {
						x = 54.72,
						y = 152.55
					}
				},
				children = {
					{
						name = "untitled106",
						cType = "RedDot",
						params = {
							subKey = "CanReward",
							moduleId = 7303
						},
						children = {}
					}
				}
			},
			{
				name = "untitled12",
				cType = "Button",
				params = {
					image = "tb_gn_32.png",
					clickAction = "onReport",
					pos = {
						x = 54.95,
						y = 244.9
					}
				},
				children = {}
			},
			{
				name = "untitled95",
				cType = "Button",
				params = {
					image = "tb_gn_14.png",
					clickAction = "onCamp",
					pos = {
						x = 53.37,
						y = 338.95
					}
				},
				children = {}
			}
		}
	},
	{
		name = "countInfoView",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 1136,
				y = 0
			}
		},
		children = {
			{
				name = "untitled14",
				cType = "Sprite",
				params = {
					image = "sddh_11.png",
					pos = {
						x = -115.74,
						y = 53.84
					}
				},
				children = {}
			},
			{
				name = "leftCountLabel",
				cType = "Label",
				params = {
					fontSize = 18,
					isRichText = true,
					pos = {
						x = -126.71,
						y = 59.44
					},
					text = TR("剩余挑战次数：10/10")
				},
				children = {}
			},
			{
				name = "buyNumBtn",
				cType = "Button",
				params = {
					image = "c_20.png",
					clickAction = "onBuyCount",
					scale = 0.8,
					pos = {
						x = -21.06,
						y = 58.25
					}
				},
				children = {}
			},
			{
				name = "recoveLabel",
				cType = "Label",
				params = {
					fontSize = 16,
					isRichText = true,
					anchor = {
						x = 0,
						y = 0.5
					},
					pos = {
						x = -209.25,
						y = 36.58
					},
					text = TR("挑战次数已满")
				},
				children = {}
			}
		}
	},
	{
		name = "untitled18",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			zOrder = 2,
			pos = {
				x = 568,
				y = 0
			}
		},
		children = {
			{
				name = "untitled22",
				cType = "Sprite",
				params = {
					image = "sddh_4.png",
					pos = {
						x = 6.26,
						y = 119.71
					}
				},
				children = {}
			},
			{
				name = "untitled26",
				cType = "Scale9Sprite",
				params = {
					image = "sddh_9.png",
					pos = {
						x = 5.4,
						y = 208.88
					},
					size = {
						width = 600,
						height = 30
					}
				},
				children = {}
			},
			{
				name = "untitled25",
				cType = "Sprite",
				params = {
					image = "sddh_6.png",
					pos = {
						x = -115.33,
						y = 209.15
					}
				},
				children = {}
			},
			{
				name = "tempTabView",
				cType = "TabView",
				params = {
					fontSize = 22,
					space = 1,
					onSelectChange = "onTabChanged",
					hide = true,
					lightedImage = "sddh_5.png",
					direction = false,
					normalImage = "c_58.png",
					allowChangeCallback = "onAllowChangeCallback",
					btnInfos = {
						{
							title = TR("帮派")
						},
						{
							title = TR("个人")
						}
					},
					btnSize = {
						width = 90,
						height = 30
					},
					pos = {
						x = -304.65,
						y = 194.15
					},
					selectTitleColor = {
						g = 14,
						r = 14,
						b = 14
					},
					size = {
						width = 618.41,
						height = 42.57
					},
					titleColor = {
						g = 191,
						r = 191,
						b = 191
					},
					titleOffset = {
						x = 0.5,
						y = 0.5
					}
				},
				children = {}
			},
			{
				name = "mCountDownLabel",
				cType = "Label",
				params = {
					text = "00:00:00",
					anchor = {
						x = 0,
						y = 0.5
					},
					pos = {
						x = -293.36,
						y = 215.56
					}
				},
				children = {}
			},
			{
				name = "nonRankShow",
				cType = "Label",
				params = {
					fontSize = 38,
					hide = true,
					color = {
						g = 255,
						r = 255,
						b = 255
					},
					pos = {
						x = 3.79,
						y = 106.8
					},
					text = TR("暂无帮派排行")
				},
				children = {}
			},
			{
				name = "mThemeLabel",
				cType = "Label",
				params = {
					fontSize = 20,
					text = "",
					isRichText = true,
					anchor = {
						x = 1,
						y = 0.5
					},
					color = {
						g = 248,
						r = 255,
						b = 234
					},
					outlineColor = {
						g = 42,
						r = 51,
						b = 24
					},
					pos = {
						x = 295.21,
						y = 215.02
					}
				},
				children = {}
			},
			{
				name = "rankTableView",
				cType = "TableView",
				params = {
					numOfCellsFunc = "cbNumOfCellsFunc",
					isVertical = true,
					delayInit = true,
					cellUpdateFunc = "cbCellUpdateFunc",
					cellSizeFunc = "cbCellSizeFunc",
					cellFillFunc = "cbCellFillFunc",
					pos = {
						x = -294.7,
						y = 17.29
					},
					size = {
						width = 600,
						height = 175
					}
				},
				children = {
					{
						name = "rankLayout",
						cType = "TemplateNode",
						params = {
							pos = {
								x = -0.22,
								y = -35
							},
							size = {
								width = 600,
								height = 34
							}
						},
						children = {
							{
								name = "untitled86",
								cType = "Sprite",
								params = {
									image = "sddh_7.png",
									childName = "bgSprite",
									pos = {
										x = 299.16,
										y = 33.74
									}
								},
								children = {}
							},
							{
								name = "untitled55",
								cType = "Sprite",
								params = {
									image = "c_51.png",
									childName = "rankSprite",
									scale = 0.6,
									pos = {
										x = 69.64,
										y = 16.76
									}
								},
								children = {}
							},
							{
								name = "untitled54",
								cType = "Label",
								params = {
									text = "0",
									charCount = 10,
									childName = "rankLabel",
									fontName = "sddh_13.png",
									isRichText = true,
									pos = {
										x = 65.38,
										y = 16.32
									}
								},
								children = {}
							},
							{
								name = "untitled56",
								cType = "Label",
								params = {
									fontSize = 20,
									childName = "nameLabel",
									anchor = {
										x = 0,
										y = 0.5
									},
									pos = {
										x = 109.26,
										y = 17.93
									},
									text = TR("玩家名七个字")
								},
								children = {}
							},
							{
								name = "untitled57",
								cType = "Label",
								params = {
									fontSize = 20,
									childName = "scoreLabel",
									anchor = {
										x = 0,
										y = 0.5
									},
									pos = {
										x = 282.69,
										y = 18.38
									},
									text = TR("积分：0")
								},
								children = {}
							},
							{
								name = "untitled58",
								cType = "Label",
								params = {
									fontSize = 20,
									childName = "guildLabel",
									pos = {
										x = 505.85,
										y = 17.13
									},
									text = TR("暂无帮派")
								},
								children = {}
							}
						}
					}
				}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.mOldRank = slot1.oldRank
	slot0.mTag = 1
	slot0.mInit = true
	slot0.mPlayerNodeList = {}
	slot0.mIsNeedAction = false

	slot0.super.ctor(slot0)
	slot0.initUI(slot0)
	slot0.requesetBaseInfo(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0, function (slot0, slot1)
		if slot0.name == "figureHero" then
			slot1.heroModelId = (PlayerAttrObj:getPlayerAttrByName("FashionModelId") == 0 and 19010000) or slot2
		end

		return 
	end)
	slot0.figureHero:setOpacity(0)
	slot0.figureHero:runAction(cc.FadeIn:create(1))
	slot0.figureHero:runAction(cc.RepeatForever:create(cc.EaseSineInOut:create(cc.Sequence:create({
		cc.MoveBy:create(1, cc.p(0, -5)),
		cc.MoveBy:create(1, cc.p(0, 5))
	}))))
	Utility.performWithDelay(slot0, function ()
		slot0:createUISubTree("seaFlowerEffect")
		slot0.createUISubTree:createUISubTree("seaSurfaceEffect")
		slot0.createUISubTree.createUISubTree:createUISubTree("boatEffect")

		slot0.createUISubTree.createUISubTree.createUISubTree.effectId = MqAudio.playEffect("shidaodahui.mp3", true)

		Player:saveGameData("DwdhEffectLoaded", true)

		return 
	end, (not Player:getGameData("DwdhEffectLoaded") or 0) and 1)
	slot0.changeBtn:setClickAction(function ()
		slot0:requesetRefreshWrestleRaceRankList()

		return 
	end)
	slot0.mNameLabel:setString(PlayerAttrObj:getPlayerAttrByName("PlayerName"))

	return 
end
slot0.onExit = function (slot0)
	if slot0.effectId then
		MqAudio.stopEffect(slot0.effectId)
	end

	return 
end
slot1 = {
	cc.p(-265, -83),
	cc.p(-108, 24),
	cc.p(82, 25),
	cc.p(232, -97)
}
slot0.createChallengeTarget = function (slot0, slot1, slot2)
	slot4 = slot0.createLayoutTemplateNode(slot0, "challengPlayerNode", {
		heroModelId = (slot2[slot1].HeadImageId == 0 and 19010000) or slot3.HeadImageId,
		stepLv = slot3.HeroStepLv or 0
	})

	slot4.setPosition(slot4, slot0[slot1])
	slot0.centerNode:addChild(slot4, "challengPlayerNode")
	slot4.playerNameLabel:setString(string.format("Lv.%s %s", slot3.Lv, slot3.Name))
	slot4.guildNameLabel:setString((Utility.isEntityId(slot3.GuildId) and slot3.GuildName) or TR("暂无帮派"))

	if slot1 == 4 then
		slot4.highScoreSprite:setPositionX(48)
	end

	if slot3.HighValueMin then
		slot4.highScoreSprite:setVisible(true)
	end

	if PlayerAttrObj:getPlayerAttrByName("Lv") < 50 then
		slot4.quickSprite:setVisible(false)
	else
		slot4.quickSprite:setVisible(true)
		slot4.quickSprite:runAction(cc.RepeatForever:create(cc.Sequence:create({
			cc.ScaleTo:create(0.5, 0.9),
			cc.DelayTime:create(0.18),
			cc.ScaleTo:create(0.5, 0.7)
		})))
	end

	slot0.playerFadeAction(slot0, slot4)

	return slot4
end
slot0.createInTruce = function (slot0)
	slot1 = {
		"sddh_20.png",
		"sddh_21.png",
		"sddh_22.png",
		"sddh_23.png"
	}

	if slot0.mGddhRankList.One and next(slot0.mGddhRankList.One) ~= nil then
		for slot5 = 1, math.min(#slot0.mGddhRankList.One, 4), 1 do
			slot6 = slot0.createChallengeTarget(slot0, slot5, slot0.mGddhRankList.One)
			slot7 = UIWrap.newControl("Sprite", {
				image = slot1[slot5]
			})

			slot7.setPosition(slot7, 10, 100)
			slot6.addChild(slot6, slot7)
			slot6.quickSprite:setVisible(false)

			slot8 = UIWrap.newControl("Sprite", {
				image = "sddh_24.png"
			})

			slot8.setPosition(slot8, 10, 70)
			slot6.addChild(slot6, slot8)
			slot6.button:setClickAction(function ()
				return 
			end)
			table.insert(slot0.mPlayerNodeList, slot6)
		end
	end

	slot0.changeBtn:setVisible(false)
	slot0.startLabel:setVisible(true)
	slot0.countInfoView:setVisible(false)
	slot0.mCountDownLabel:setVisible(false)

	slot0.mStartRaceScheId = Utility.schedule(slot0.startLabel, function ()
		if 0 < slot0.mSignupInfo.BeginDate - Player:getCurrentTime() then
			slot0.startLabel:setString(TR("赛季开启倒计时：#abf37f%s", MqTime.formatAsDay(slot0)))
		else
			slot0.startLabel:setVisible(false)

			if slot0.mStartRaceScheId then
				slot0.startLabel:stopAllActions()

				slot0.mStartRaceScheId = nil
			end
		end

		return 
	end, 1)

	return 
end
slot0.createFighting = function (slot0)
	slot0.mSignSchedule = Utility.schedule(slot0.mCountDownLabel, function ()
		slot1 = slot0.mSignupInfo.EndRewardDate
		slot2 = 0

		if 0 < slot0.mSignupInfo.FirstRewardDate - Player:getCurrentTime() then
			slot0.mCountDownLabel:setString(TR("赛季结束倒计时：%s", MqTime.formatAsDay(slot2)))
		elseif 0 < slot1 - Player:getCurrentTime() then
			slot0.mCountDownLabel:setString(TR("赛季结算中"))
		else
			slot0.mCountDownLabel:setString(TR(""))

			if slot0.mSignSchedule then
				slot0.mCountDownLabel:stopAllActions()

				slot0.mSignSchedule = nil
			end
		end

		return 
	end, 1)
	slot2 = GddhThemeConfig.items[slot0.mSignupInfo.ThemeId].prohibitCamp

	slot0.mThemeLabel:setString(TR("%s", Utility.formatFightLimitTheme(GddhThemeConfig.items[slot0.mSignupInfo.ThemeId].prohibitCamp, GddhThemeConfig.items[slot0.mSignupInfo.ThemeId].prohibitProfession, GddhThemeConfig.items[slot0.mSignupInfo.ThemeId].prohibitSex)))
	slot0.refreshInfo(slot0)

	return 
end
slot0.refreshInfo = function (slot0)
	slot0.leftCountLabel:setString(TR("剩余挑战次数：#abf37f%s/%s", slot0.mRankCount, GddhConfig.items[1].attckNumMax))

	if slot0.recoveSch then
		slot0.recoveLabel:stopAllActions()

		slot0.recoveSch = nil
	end

	if slot0.mRankCount < slot1 then
		if Player:getCurrentTime() < slot0.mLastRecoveTime then
			slot0.recoveSch = Utility.schedule(slot0.recoveLabel, function ()
				if 0 <= slot0.mLastRecoveTime - Player:getCurrentTime() then
					slot0.recoveLabel:setString(TR("恢复时间: #abf37f%s", MqTime.formatAsDay(slot0)))
				else
					if slot0.recoveSch then
						slot0.recoveLabel:stopAllActions()

						slot0.recoveSch = nil
					end

					slot0:requestGetWrestleRaceInfo(true)
				end

				return 
			end, 1)
		end
	else
		slot0.recoveLabel:setString(TR("挑战次数已满"))
	end

	return 
end
slot0.onAllowChangeCallback = function (slot0, slot1)
	if slot1 == 1 and not slot0.mInit and not Utility.isEntityId(PlayerAttrObj:getPlayerAttrByName("GuildInfo").GuildId) then
		ui.showFlashView(TR("请先加入帮派"))

		return false
	end

	return true
end
slot0.onTabChanged = function (slot0, slot1)
	slot0.mTag = slot1
	slot0.mInit = false

	if slot0.rankTableView and not tolua.isnull(slot0.rankTableView) then
		slot0.rankTableView:reloadData()
		slot0.rankTableView:jumpToTop()
	end

	return 
end
slot0.cbCellSizeFunc = function (slot0, slot1, slot2)
	return 600, 34
end
slot0.cbNumOfCellsFunc = function (slot0, slot1)
	if slot0.mTag == 1 then
		if 0 < #slot0.mGddhRankList.GuildInfo then
			slot0.nonRankShow:setVisible(false)
		else
			slot0.nonRankShow:setString(TR("暂无帮派排行"))
			slot0.nonRankShow:setVisible(true)
		end

		return #slot0.mGddhRankList.GuildInfo
	else
		if 0 < #slot0.mHandledRankList then
			slot0.nonRankShow:setVisible(false)
		else
			slot0.nonRankShow:setString(TR("暂无个人排行"))
			slot0.nonRankShow:setVisible(true)
		end

		return #slot0.mHandledRankList
	end

	return 
end
slot0.cbCellFillFunc = function (slot0, slot1, slot2)
	slot3 = {
		"c_51.png",
		"c_52.png",
		"c_53.png"
	}
	slot4 = slot0.createLayoutTemplateNode(slot0, "rankLayout")

	slot4.setPosition(slot4, cc.p(0, 0))
	slot1.addChild(slot1, slot4)

	slot1.refreshCell = function (slot0)
		slot1 = nil
		slot1 = (slot0.mTag ~= 1 or slot0.mGddhRankList.GuildInfo[slot0 + 1]) and slot0.mHandledRankList[slot0 + 1]
		slot2 = nil

		if slot0.mTag == 1 then
			slot2 = (slot1.Rank <= 3 and slot1.Rank) or -1
		else
			slot3 = slot0:getLabelColor((slot1.Rank > 3 or slot1.Rank) and (slot1.PlayerId ~= PlayerAttrObj:getPlayerAttrByName("PlayerId") or 0) and -1)
		end

		if slot1.Rank <= 3 then
			slot1.rankSprite:setTexture(slot2[slot1.Rank])
			slot1.rankLabel:setString("")
		else
			slot1.rankSprite:setTexture("c_pure.png")
			slot1.rankLabel:setString(slot1.Rank)
		end

		if slot0.mTag == 1 then
			slot1.nameLabel:setString(TR("等级：%s", slot1.LV))
			slot1.nameLabel:setColor(slot3)
		else
			slot1.nameLabel:setString(slot1.Name)
			slot1.nameLabel:setColor(slot3)
		end

		if slot0.mTag == 1 then
			slot1.scoreLabel:setString(slot4)
			slot1.scoreLabel:setColor(slot3)
		else
			tempName = slot1.Name

			slot1.scoreLabel:setString(TR("积分：%s", slot1.Integral))
			slot1.scoreLabel:setColor(slot3)
		end

		if slot0.mTag == 1 then
			slot1.guildLabel:setString(TR("积分：%s", slot1.Integral))
			slot1.guildLabel:setColor(slot3)
		else
			slot1.guildLabel:setString((Utility.isEntityId(slot1.GuildId) and slot1.GuildName) or TR("暂无帮派"))
			slot1.guildLabel:setColor(slot3)
		end

		return 
	end

	slot1.refreshCell(slot2)

	if slot0.mTag == 2 and slot2 == #slot0.mHandledRankList - 1 then
		slot0.isNeedAction(slot0)
	end

	return 
end
slot0.cbCellUpdateFunc = function (slot0, slot1, slot2)
	slot1.refreshCell(slot2)

	return 
end
slot0.isNeedAction = function (slot0)
	if not slot0.mOldRank then
		return 
	end

	if slot0.mOldRank == slot0.mRank then
		return 
	end

	if 8 < slot0.mRank then
		slot0.rankLabelChange(slot0, slot0.mOldRank, slot0.mRank)
	else
		slot0.rankListAction(slot0, slot0.mOldRank, slot0.mRank)
	end

	slot0.mOldRank = nil

	LayerManager.setRestoreData("challenge.DwdhMainLayer", {})

	return 
end
slot0.rankLabelChange = function (slot0, slot1, slot2)
	slot5 = nil
	slot6 = -1
	slot6 = (slot1 - slot2 < 0 and 1) or -1

	slot0.rankListView:getItems()[#slot0.rankListView.getItems()].rankLabel:setString(slot1)

	slot0.mRankScheId = Utility.schedule(slot0.rankListView.getItems()[#slot0.rankListView.getItems()], function ()
		slot0 = slot0 + slot1

		slot2.rankLabel:setString(string.format("#42881F%s", slot2.rankLabel.setString))

		if slot2.rankLabel.setString <= "#42881F%s" then
			slot2:stopAction(slot4.mRankScheId)

			slot4.mRankScheId = nil
		end

		return 
	end, (30 <= math.abs(slot1 - slot2) and 0.01) or 0.05)

	return 
end
slot0.rankListAction = function (slot0, slot1, slot2)
	slot0.mPlayerDataList = slot0.rankListView:getItems()

	if 8 < slot1 then
		slot1 = 8
	end

	slot3 = slot1 - slot2 + 1

	for slot7 = slot2, slot1, 1 do
		slot0.mPlayerDataList[slot7]:runAction(cc.MoveBy:create(0, cc.p(0, 40)))
	end

	slot0.mPlayerDataList[slot2]:runAction(cc.MoveBy:create(0, cc.p(0, -slot3*40)))
	slot0.mPlayerDataList[slot2]:runAction(cc.Sequence:create(cc.ScaleTo:create(0.3, 1.1), cc.DelayTime:create(0.1), cc.MoveBy:create(0.3, cc.p(0, slot3*40)), cc.Spawn:create(slot7, slot8)))

	return 
end
slot0.onClickCloseBtn = function (slot0)
	LayerManager.removeLayer(slot0)

	return 
end
slot0.onCamp = function (slot0)
	ui.showCampReady({
		minCount = 1,
		noNeedVit = true,
		callModelSub = ModuleSub.eGddhDefense,
		titleText = TR("进攻·防守阵容"),
		ignoreCampList = {
			GddhThemeConfig.items[slot0.mSignupInfo.ThemeId].prohibitCamp
		},
		ignoreProfessionList = {
			GddhThemeConfig.items[slot0.mSignupInfo.ThemeId].prohibitProfession
		},
		ignoreSexId = GddhThemeConfig.items[slot0.mSignupInfo.ThemeId].prohibitSex,
		currSlotString = (slot0.mDefenseSlotFormationInfo and slot0.mDefenseSlotFormationInfo.FormationInfo) or "0,0,0,0,0,0",
		callback = function (slot0)
			slot1 = ""

			if slot0 == table.concat(slot0, ",") then
				return 
			else
				slot1:requestSetFormationInfo(ModuleSub.eGddhDefense, slot1, false)
			end

			return 
		end
	})

	return 
end
slot0.onCampAttack = function (slot0, slot1, slot2, slot3)
	if slot0.isInRewardTime(slot0) then
		ui.showMessageBox({
			text = TR("奖励结算中,请稍后再进行挑战")
		})

		return 
	end

	if slot0.mRankCount <= 0 then
		slot0.onBuyCount(slot0)

		return 
	end

	slot4 = GddhThemeConfig.items[slot0.mSignupInfo.ThemeId]
	slot5 = (slot0.mDefenseSlotFormationInfo and slot0.mDefenseSlotFormationInfo.FormationInfo) or "0,0,0,0,0,0"

	if 50 <= PlayerAttrObj:getPlayerAttrByName("Lv") then
		slot7 = false

		for slot11, slot12 in ipairs(string.split(slot5, ",")) do
			if 0 < tonumber(slot12) then
				slot7 = true

				break
			end
		end

		if not slot7 then
			ui.showFlashView(TR("请先布阵再进行挑战"))

			return 
		end

		slot0.requesetRankWrestleRace(slot0, slot1, slot2, slot3)
	else
		ui.showCampReady({
			minCount = 1,
			noNeedVit = true,
			callModelSub = ModuleSub.eGddhDefense,
			titleText = TR("进攻·防守阵容"),
			ignoreCampList = {
				slot4.prohibitCamp
			},
			ignoreProfessionList = {
				slot4.prohibitProfession
			},
			ignoreSexId = slot4.prohibitSex,
			currSlotString = slot5,
			callback = function (slot0)
				slot1 = ""

				if slot0 == table.concat(slot0, ",") then
					slot1:requesetRankWrestleRace(slot1.requesetRankWrestleRace, slot1, )

					return 
				else
					slot1:requestSetFormationInfo(ModuleSub.eGddhDefense, slot1, true, slot1.requestSetFormationInfo, slot1, )
				end

				return 
			end
		})
	end

	return 
end
slot0.onRankLayer = function (slot0, slot1)
	LayerManager.addLayer({
		cleanUp = false,
		name = "challenge.GDDHRankLayer",
		data = {
			tag = slot1.tag,
			curRank = slot0.mRank,
			Integral = slot0.mIntegral,
			coin = slot0.mGddhCoin,
			challengeNum = slot0.mPerRankCount,
			receiveIdList = slot0.mReceiveIdList,
			drawCallback = function (slot0)
				slot0.mReceiveIdList = slot0.ReceiveIdList

				slot0:handleBoxInfo()

				return 
			end
		},
		zOrder = Enums.ZOrderType.ePopLayer
	})

	return 
end
slot0.onStore = function (slot0)
	LayerManager.addLayer({
		name = "shop.ShopLayer",
		data = {
			moduleId = ModuleSub.ePvpShop
		}
	})

	return 
end
slot0.onRule = function (slot0)
	ui.showRuleMsg({
		textList = {
			TR("1.每周一早上9点赛季开始，周日23:00到23:30为结算时间。"),
			TR("2.挑战对手胜利后可获得积分，对手扣除积分"),
			TR("3.根据积分高低进行排名，积分越高结算时获得奖励越高"),
			TR("4.每个人赛季奖励结算后，积分将重置为初始积分即1000"),
			TR("5.每次赛季在试刀大会中挑战获得一定次数的胜利后即可获得保底奖励"),
			TR("6.试刀大会挑战可获得积分，用于兑换各种奖励"),
			TR("7.进入挑战默认用的你的最强战力的5人作为防守阵容，可点击防守阵容界面进行阵容调整。")
		}
	})

	return 
end
slot0.onReport = function (slot0)
	LayerManager.addLayer({
		cleanUp = false,
		name = "challenge.GDDHReportLayer",
		zOrder = Enums.ZOrderType.ePopLayer,
		data = {
			callback = function (slot0, slot1)
				slot0:onCampAttack(slot0, true, slot1)

				return 
			end
		}
	})

	return 
end
slot0.onBuyCount = function (slot0)
	if GddhBuynumRelation.items_count <= slot0.mBuyRankCount then
		ui.showFlashView(TR("已达到购买次数上限"))

		return 
	end

	LayerManager.addLayer({
		cleanUp = false,
		name = "challenge.DwdhBuyCountLayer",
		data = {
			hadBought = slot0.mBuyRankCount,
			callBack = function (slot0)
				slot0.mBuyRankCount = slot0.BuyRankCount
				slot0.mRankCount = slot0.RankCount
				slot0.mLastRecoveTime = slot0.LastRecoveTime

				slot0:refreshInfo()

				return 
			end
		},
		zOrder = Enums.ZOrderType.ePopLayer
	})

	return 
end
slot0.getLabelColor = function (slot0, slot1)
	slot2 = nil

	return (slot1 ~= 0 or cc.c3b(66, 136, 31)) and (slot1 ~= 1 or cc.c3b(255, 162, 0)) and (slot1 ~= 2 or cc.c3b(74, 130, 166)) and (slot1 ~= 3 or cc.c3b(205, 105, 66)) and cc.c3b(255, 255, 255)
end
slot0.playerFadeAction = function (slot0, slot1)
	slot1.figure:setOpacity(0)
	slot1.figure:runAction(cc.FadeIn:create(1))
	slot1.shadow:setOpacity(0)
	slot1.shadow:runAction(cc.FadeIn:create(1))

	return 
end
slot0.refreshChallengeList = function (slot0)
	if Player:getCurrentTime() < slot0.mLastRefreshTime then
		slot0.changeBtn:setEnabled(false)
		slot0.changeBg:setVisible(true)
	end

	slot0.changeSch = Utility.schedule(slot0.changeBtn, function ()
		if 0 < slot0.mLastRefreshTime - Player:getCurrentTime() then
			slot0.changeBtn:setEnabled(false)
			slot0.changeLabel:setString(TR("%ss", slot0))
		else
			if slot0.changeSch then
				slot0.changeBtn:stopAllActions()

				slot0.changeSch = nil
			end

			slot0.changeBg:setVisible(false)
			slot0.changeBtn:setEnabled(true)
		end

		return 
	end, 1)

	for slot4, slot5 in ipairs(slot0.mPlayerNodeList) do
		slot5.removeFromParent(slot5)

		slot5 = nil
	end

	slot0.mPlayerNodeList = {}

	for slot4 = 1, math.min(#slot0.mGddhRankTargetList, 4), 1 do
		slot5 = slot0.mGddhRankTargetList[slot4]

		slot0.createChallengeTarget(slot0, slot4, slot0.mGddhRankTargetList).button:setClickAction(function ()
			slot0:onCampAttack(slot1.PlayerId, false)

			return 
		end)
		table.insert(slot0.mPlayerNodeList, slot0.createChallengeTarget(slot0, slot4, slot0.mGddhRankTargetList))
	end

	return 
end
slot0.handleBoxInfo = function (slot0)
	slot0.chestRewardConfig = {}

	for slot4, slot5 in pairs(GddhRankDailywinConfig.items) do
		table.insert(slot0.chestRewardConfig, slot5)
	end

	table.sort(slot0.chestRewardConfig, function (slot0, slot1)
		return slot0.winNum < slot1.winNum
	end)

	function slot1()
		for slot4, slot5 in ipairs(slot0.chestRewardConfig) do
			if slot0.mPerRankCount < slot5.winNum then
				slot0 = slot5.winNum

				break
			end
		end

		if slot0 == nil then
			slot0 = slot0.chestRewardConfig[#slot0.chestRewardConfig].winNum
		end

		return slot0
	end

	if next(slot0.mReceiveIdList) ~= nil then
		ui.setWaveAnimation(slot0.boxBtn)

		slot0.mGetIndex = slot0.mReceiveIdList[1]

		slot0.boxGetLabel:setString(string.format("%s/%s", slot0.mPerRankCount, GddhRankDailywinConfig.items[slot0.mGetIndex].winNum))
	else
		slot0.mGetIndex = nil

		slot0.boxBtn:stopAllActions()
		slot0.boxBtn:setRotation(0)
		slot0.boxGetLabel:setString(string.format("%s/%s", slot0.mPerRankCount, slot1()))
	end

	if next(slot0.mReceiveIdList) == nil and slot0.chestRewardConfig[#slot0.chestRewardConfig].winNum <= slot0.mPerRankCount then
		slot0.boxBtn:setBright(false)
	end

	return 
end
slot0.handleRankList = function (slot0)
	slot1 = {}

	if slot0.mIsInTruce then
		if slot0.mGddhRankList.One and next(slot0.mGddhRankList.One) ~= nil then
			for slot5 = 1, 8, 1 do
				table.insert(slot1, slot0.mGddhRankList.One[slot5])
			end
		end
	else
		for slot5 = 1, 5, 1 do
			table.insert(slot1, slot0.mGddhRankList.One[slot5])
		end

		if 10 < slot0.mRank then
			for slot5 = 0, 2, 1 do
				table.insert(slot1, slot0.mGddhFrontFiveList[slot5 - 4])
			end
		else
			for slot5 = 6, 8, 1 do
				table.insert(slot1, slot0.mGddhRankList.One[slot5])
			end
		end

		slot2 = false

		for slot6, slot7 in ipairs(slot1) do
			if slot7.PlayerId == PlayerAttrObj:getPlayerAttrByName("PlayerId") then
				slot2 = true

				break
			end
		end

		if not slot2 then
			table.remove(slot1)
			table.insert(slot1, {
				PlayerId = PlayerAttrObj:getPlayerAttrByName("PlayerId"),
				Name = PlayerAttrObj:getPlayerAttrByName("PlayerName"),
				Integral = slot0.mIntegral,
				Rank = slot0.mRank,
				GuildId = PlayerAttrObj:getPlayerAttrByName("GuildInfo").GuildId,
				GuildName = PlayerAttrObj.getPlayerAttrByName("GuildInfo").GuildName
			})
		end
	end

	table.sort(slot1, function (slot0, slot1)
		if slot0.Rank ~= slot1.Rank then
			return slot0.Rank < slot1.Rank
		end

		return 
	end)

	slot0.mHandledRankList = slot1

	if slot0.rankTableView and not tolua.isnull(slot0.rankTableView) then
		slot0.rankTableView:reloadData()
		slot0.rankTableView:jumpToTop()
	end

	slot0.tempTabView:activeTabBtnByTag(2)

	return 
end
slot0.isInRewardTime = function (slot0)
	return slot0.mSignupInfo.FirstRewardDate <= Player:getCurrentTime() and Player:getCurrentTime() <= slot0.mSignupInfo.EndRewardDate
end
slot0.requesetBaseInfo = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "SignupInfo",
		moduleName = "Gddh",
		methodData = {},
		successCallback = function (slot0)
			slot0.mSignupInfo = clone(slot0)

			if Player:getCurrentTime() < slot0.mSignupInfo.EndRewardDate and slot0.mSignupInfo.BeginDate < Player:getCurrentTime() then
				if slot0.mSignupInfo.IsJoin then
					slot0:requestGetWrestleRaceInfo(nil, function ()
						if tolua.isnull(slot0.rankTableView) then
							slot0(slot0.mScoreLabel, string.format("积分：%s", slot0.mIntegral or 0))
							slot0:createUISubTree("rankTableView")
							slot0.createUISubTree.rankTableView:reloadData()
						end

						return 
					end)
				else
					slot0:requestApplyGroup()
				end
			else
				slot0:requestGetWrestleRaceInfo(nil, function ()
					if tolua.isnull(slot0.rankTableView) then
						slot0(slot0.mScoreLabel, string.format("积分：%s", slot0.mIntegral or 0))
						slot0:createUISubTree("rankTableView")
						slot0.createUISubTree.rankTableView:reloadData()
					end

					return 
				end)
			end

			return 
		end
	})

	return 
end
slot0.requestApplyGroup = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "ApplyGroup",
		moduleName = "Gddh",
		methodData = {},
		successCallback = function (slot0)
			slot0.mApplyGroupInfo = slot0

			slot0:requestGetWrestleRaceInfo(nil, function ()
				if tolua.isnull(slot0.rankTableView) then
					slot0(slot0.mScoreLabel, string.format("积分：%s", slot0.mIntegral or 0))
					slot0:createUISubTree("rankTableView")
					slot0.createUISubTree.rankTableView:reloadData()
				end

				return 
			end)
			ui.showFlashView(TR("试刀大会报名成功"))

			return 
		end
	})

	return 
end
slot0.requestGetWrestleRaceInfo = function (slot0, slot1, slot2)
	slot0.socketRequest(slot0, {
		methodName = "GetWrestleRaceInfo",
		moduleName = "Gddh",
		methodData = {},
		successCallback = function (slot0)
			slot0.mIsApply = slot0.IsApply
			slot0.mGddhRankList = slot0.GddhRankList
			slot0.mIsInTruce = slot0.IsInTruce
			slot0.mGddhRankTargetList = slot0.GddhRankTargetList
			slot0.mGddhCoin = slot0.GddhCoin
			slot0.mPerRankCount = slot0.PerRankCount
			slot0.mRankCount = slot0.RankCount
			slot0.mGddhFrontFiveList = slot0.GddhFrontFiveList
			slot0.mLastRefreshTime = slot0.LastRefreshTime
			slot0.mIntegral = slot0.Integral
			slot0.mLastRecoveTime = slot0.LastRecoveTime
			slot0.mHistortRank = slot0.HistortRank
			slot0.mBuyRankCount = slot0.BuyRankCount
			slot0.mReceiveIdList = slot0.ReceiveIdList
			slot0.mRank = slot0.Rank
			slot0.mWinCount = slot0.WinCount
			slot0.mAttackSlotFormationInfo = slot0.AttackSlotFormationInfo
			slot0.mDefenseSlotFormationInfo = slot0.DefenseSlotFormationInfo

			if slot0 then
				slot0:refreshInfo()
			end

			if slot0.mIsInTruce then
				slot0:createInTruce()
				slot0:handleRankList()
			else
				slot0:handleRankList()
				slot0:handleBoxInfo()
				slot0:createFighting()
				slot0:refreshChallengeList()
			end

			if slot2 then
				slot2()
			end

			return 
		end
	})

	return 
end
slot0.requesetRefreshWrestleRaceRankList = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "RefreshWrestleRaceRankList",
		moduleName = "Gddh",
		methodData = {},
		successCallback = function (slot0)
			slot0.changeBtn:setEnabled(false)

			slot0.mLastRefreshTime = slot0.LastRefreshTime
			slot0.mGddhRankTargetList = slot0.GddhRankTargetList

			slot0:refreshChallengeList()

			return 
		end
	})

	return 
end
slot0.requestSetFormationInfo = function (slot0, slot1, slot2, slot3, slot4, slot5, slot6)
	slot0.socketRequest(slot0, {
		methodName = "SetFormationInfo",
		moduleName = "SlotFormation",
		methodData = {
			slot1,
			slot2
		},
		successCallback = function (slot0)
			slot0.mDefenseSlotFormationInfo = slot0

			if slot0 then
				slot0:requesetRankWrestleRace(slot0, , )
			end

			return 
		end
	})

	return 
end
slot0.requesetRankWrestleRace = function (slot0, slot1, slot2, slot3)
	slot4 = slot3

	if not slot3 then
		slot4 = Utility.EMPTY_ENTITY_ID
	end

	slot0.socketRequest(slot0, {
		methodName = "RankWrestleRace",
		moduleName = "Gddh",
		methodData = {
			slot1,
			slot2,
			slot4
		},
		successCallback = function (slot0)
			slot0.mGddhCoin = slot0.GddhCoin
			slot0.mPerRankCount = slot0.PerRankCount
			slot0.mGddhFrontFiveList = slot0.GddhFrontFiveList
			slot0.mLastRefreshTime = slot0.LastRefreshTime
			slot0.mIntegral = slot0.Integral
			slot0.mLastRecoveTime = slot0.LastRecoveTime
			slot0.mHistortRank = slot0.HistortRank
			slot0.mBuyRankCount = slot0.BuyRankCount
			slot0.mReceiveIdList = slot0.ReceiveIdList
			slot0.mGddhRankList = slot0.GddhRankList
			slot0.mWinCount = slot0.WinCount
			slot0.mRankCount = slot0.RankCount
			slot0.mRank = slot0.Rank
			slot0.mGddhRankTargetList = slot0.GddhRankTargetList

			if 50 <= PlayerAttrObj:getPlayerAttrByName("Lv") and not slot1 then
				if not slot0.IsWin then
					ui.showFlashView(TR("挑战失败"))
					slot0:onReport()
				else
					ui.showFlashReward(slot0)
					ui.showFlashView(TR("挑战成功，获得积分%s", slot0.AddIntegral or 0))
				end

				slot0.mScoreLabel:setString(string.format("积分：%s", slot0.mIntegral or 0))
				slot0:refreshInfo()
				slot0:handleRankList()
				slot0:handleBoxInfo()
				slot0:refreshChallengeList()
			else
				LayerManager.setRestoreData("challenge.DwdhMainLayer", {
					oldRank = slot0.mRank
				})
				require("common.BattleEntry"):StartBattle({
					battleMap = "effect_zhandou_shidaodahui",
					fightInfo = slot0.FightInfo,
					extraData = {
						BaseGetGameResourceList = slot0.BaseGetGameResourceList,
						AddIntegral = slot0.AddIntegral
					}
				})
			end

			return 
		end
	})

	return 
end

return slot0
