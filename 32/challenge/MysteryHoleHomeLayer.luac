slot0 = class("MysteryHoleHomeLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = true
	})
end)
slot0.uiTree = {
	{
		name = "untitled124",
		cType = "Sprite",
		params = {
			isFullScale = true,
			scaleApt = 2,
			posApt = 1,
			image = "xyzz_1.png",
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {}
	},
	{
		name = "bgSprite",
		cType = "Node",
		params = {
			scaleApt = 2,
			posApt = 1,
			image = "xyzz_1.png",
			anchor = {
				x = 0.5,
				y = 0.5
			},
			pos = {
				x = 568,
				y = 320
			},
			size = {
				width = 1386,
				height = 640
			}
		},
		children = {
			{
				name = "untitled5",
				cType = "Sprite",
				params = {
					opacity = 180,
					image = "jcgn_8.png",
					scaleX = 0.85,
					scaleY = 0.65,
					pos = {
						x = 294.99,
						y = 549.6
					}
				},
				children = {
					{
						name = "untitled6",
						cType = "Sprite",
						params = {
							image = "xyzz_7.png",
							pos = {
								x = 217.5,
								y = 49.5
							}
						},
						children = {
							{
								name = "title",
								cType = "Label",
								params = {
									text = "1",
									fontName = "xyzz_8.png",
									isRichText = true,
									pos = {
										x = 89.5,
										y = 33
									}
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "mBgCampInfo",
				cType = "Scale9Sprite",
				params = {
					image = "c_pure.png",
					anchor = {
						x = 0,
						y = 0
					},
					pos = {
						x = 210,
						y = 145
					},
					size = {
						width = 450,
						height = 360
					}
				},
				children = {
					{
						name = "untitled45",
						cType = "Sprite",
						custom = {
							{
								value = 1,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "xyzz_4.png",
							pos = {
								x = 280,
								y = 25
							}
						},
						children = {}
					},
					{
						name = "untitled56",
						cType = "Sprite",
						custom = {
							{
								value = 2,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "xyzz_4.png",
							pos = {
								x = 320,
								y = 115
							}
						},
						children = {}
					},
					{
						name = "untitled57",
						cType = "Sprite",
						custom = {
							{
								value = 3,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "xyzz_4.png",
							pos = {
								x = 0,
								y = 0
							}
						},
						children = {}
					},
					{
						name = "untitled58",
						cType = "Sprite",
						custom = {
							{
								value = 4,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "xyzz_4.png",
							pos = {
								x = 75,
								y = 75
							}
						},
						children = {}
					},
					{
						name = "untitled59",
						cType = "Sprite",
						custom = {
							{
								value = 5,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "xyzz_4.png",
							pos = {
								x = 140,
								y = 140
							}
						},
						children = {}
					},
					{
						name = "untitled61",
						cType = "Button",
						custom = {
							{
								value = 1,
								name = "tag",
								type = "integer"
							}
						},
						params = {
							image = "c_87.png",
							clickAction = "onAddHeroAction",
							titleisRichText = "false",
							pos = {
								x = 280,
								y = 55
							}
						},
						children = {}
					},
					{
						name = "untitled62",
						cType = "Button",
						custom = {
							{
								value = 2,
								name = "tag",
								type = "integer"
							}
						},
						params = {
							image = "c_87.png",
							clickAction = "onAddHeroAction",
							titleisRichText = "false",
							pos = {
								x = 320,
								y = 145
							}
						},
						children = {}
					},
					{
						name = "untitled63",
						cType = "Button",
						custom = {
							{
								value = 3,
								name = "tag",
								type = "integer"
							}
						},
						params = {
							image = "c_87.png",
							clickAction = "onAddHeroAction",
							titleisRichText = "false",
							pos = {
								x = 0,
								y = 30
							}
						},
						children = {}
					},
					{
						name = "untitled64",
						cType = "Button",
						custom = {
							{
								value = 4,
								name = "tag",
								type = "integer"
							}
						},
						params = {
							image = "c_87.png",
							clickAction = "onAddHeroAction",
							titleisRichText = "false",
							pos = {
								x = 75,
								y = 105
							}
						},
						children = {}
					},
					{
						name = "untitled65",
						cType = "Button",
						custom = {
							{
								value = 5,
								name = "tag",
								type = "integer"
							}
						},
						params = {
							image = "c_87.png",
							clickAction = "onAddHeroAction",
							titleisRichText = "false",
							pos = {
								x = 140,
								y = 170
							}
						},
						children = {}
					}
				}
			},
			{
				name = "heroNode",
				cType = "TemplateNode",
				custom = {
					{
						value = "untitled118-heroModelId",
						name = "heroModelId",
						type = "string"
					},
					{
						value = "untitled116-text",
						name = "name",
						type = "string"
					},
					{
						value = "untitled68-currValue",
						name = "hpCV",
						type = "string"
					},
					{
						value = "untitled68-maxValue",
						name = "hpMV",
						type = "string"
					},
					{
						value = "untitled69-currValue",
						name = "rpCV",
						type = "string"
					}
				},
				params = {
					pos = {
						x = 220,
						y = 100
					}
				},
				children = {
					{
						name = "untitled118",
						cType = "FigureHero",
						params = {
							childName = "figure",
							completedCallBack = "onAddHeroAction",
							scale = 0.8,
							clickAction = "onAddHeroAction",
							heroModelId = 12011103,
							pos = {
								x = 3.11,
								y = 1.46
							}
						},
						children = {}
					},
					{
						name = "untitled116",
						cType = "Label",
						params = {
							fontSize = 18,
							isRichText = true,
							text = "Label",
							childName = "nameLabel",
							outlineColor = {
								g = 37,
								r = 37,
								b = 37
							},
							pos = {
								x = 5,
								y = 188.86
							}
						},
						children = {}
					},
					{
						name = "untitled67",
						cType = "Sprite",
						params = {
							image = "zd_62.png",
							pos = {
								x = 5,
								y = 168
							}
						},
						children = {}
					},
					{
						name = "untitled68",
						cType = "ProgressBar",
						params = {
							maxValue = 1,
							currValue = 1,
							normalImage = "zd_63.png",
							childName = "hp",
							pos = {
								x = 5,
								y = 170
							}
						},
						children = {}
					},
					{
						name = "untitled69",
						cType = "ProgressBar",
						params = {
							normalImage = "zd_64.png",
							childName = "rp",
							currValue = 50,
							pos = {
								x = 5,
								y = 165
							}
						},
						children = {}
					},
					{
						name = "untitled70",
						cType = "ProgressBar",
						params = {
							normalImage = "zd_64.png",
							childName = "rp2",
							pos = {
								x = 5,
								y = 165
							}
						},
						children = {}
					}
				}
			},
			{
				name = "typeNode",
				cType = "Node",
				params = {
					anchor = {
						x = 0,
						y = 0
					},
					pos = {
						x = 630,
						y = 145
					},
					size = {
						width = 450,
						height = 360
					}
				},
				children = {
					{
						name = "typePTNode",
						cType = "TemplateNode",
						custom = {
							{
								value = "untitled119-heroModelId",
								name = "heroModelId",
								type = "string"
							}
						},
						params = {
							pos = {
								x = 204.72,
								y = 54.11
							}
						},
						children = {
							{
								name = "untitled86",
								cType = "Sprite",
								params = {
									image = "xyzz_4.png",
									pos = {
										x = 0,
										y = 0
									}
								},
								children = {}
							},
							{
								name = "untitled119",
								cType = "FigureHero",
								params = {
									heroModelId = 12011103,
									scale = 0.8,
									async = true,
									childName = "figure",
									flipX = true,
									pos = {
										x = 8.11,
										y = 1.46
									}
								},
								children = {}
							},
							{
								name = "untitled88",
								cType = "Label",
								params = {
									fontSize = 18,
									childName = "nameLabel",
									isRichText = true,
									color = {
										g = 102,
										r = 255,
										b = 243
									},
									outlineColor = {
										g = 42,
										r = 51,
										b = 24
									},
									pos = {
										x = 5,
										y = 173
									},
									text = TR("夺宝坏蛋")
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "passSp",
				cType = "Sprite",
				params = {
					image = "xyzz_3.png",
					pos = {
						x = 961.12,
						y = 241.06
					}
				},
				children = {}
			},
			{
				name = "banLabel",
				cType = "Label",
				params = {
					fontSize = 24,
					isRichText = true,
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 255,
						r = 255,
						b = 255
					},
					outlineColor = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 136.69,
						y = 503.92
					},
					text = TR("职业禁用")
				},
				children = {}
			},
			{
				name = "tigLabel",
				cType = "Label",
				params = {
					fontSize = 20,
					emptyInit = true,
					isRichText = true,
					text = "",
					anchor = {
						x = 0.5,
						y = 0.5
					},
					color = {
						g = 248,
						r = 255,
						b = 234
					},
					outlineColor = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 793,
						y = 13.25
					}
				},
				children = {}
			},
			{
				name = "resetBtn",
				cType = "Button",
				params = {
					image = "c_39.png",
					clickAction = "onResetAction",
					titleisRichText = false,
					pos = {
						x = 593,
						y = 50
					},
					titleText = TR("重新挑战")
				},
				children = {}
			},
			{
				name = "nextFloorBtn",
				cType = "Button",
				params = {
					image = "c_19.png",
					clickAction = "onFightAction",
					titleisRichText = false,
					pos = {
						x = 793,
						y = 50
					},
					titleText = TR("战 斗")
				},
				children = {}
			},
			{
				name = "passInfoNode",
				cType = "Node",
				params = {
					pos = {
						x = 693,
						y = 546
					}
				},
				children = {
					{
						name = "untitled133",
						cType = "Sprite",
						params = {
							image = "xyzz_13.png",
							pos = {
								x = 0,
								y = 0
							}
						},
						children = {}
					},
					{
						name = "passNode",
						cType = "Node",
						params = {
							pos = {
								x = 0,
								y = 0
							}
						},
						children = {
							{
								name = "passTemplate",
								cType = "TemplateNode",
								params = {
									pos = {
										x = 0,
										y = 0
									}
								},
								children = {
									{
										name = "untitled127",
										cType = "Sprite",
										params = {
											image = "xyzz_11.png",
											pos = {
												x = 0,
												y = 0
											}
										},
										children = {}
									},
									{
										name = "untitled136",
										cType = "ClippingNode",
										params = {
											childName = "clipNode",
											scale = 0.65,
											alpha = 0.05,
											image = "c_122.png",
											pos = {
												x = 1,
												y = -2
											},
											size = {
												width = 50,
												height = 50
											}
										},
										children = {
											{
												name = "untitled135",
												cType = "Sprite",
												params = {
													image = "c_Pure.png",
													childName = "head",
													pos = {
														x = 0,
														y = 0
													}
												},
												children = {}
											}
										}
									},
									{
										name = "untitled134",
										cType = "Sprite",
										params = {
											image = "xyzz_12.png",
											childName = "passSprite",
											pos = {
												x = 2,
												y = -4
											}
										},
										children = {}
									},
									{
										name = "untitled129",
										cType = "Button",
										params = {
											image = "xyzz_14.png",
											childName = "rewardBtn",
											pos = {
												x = 0,
												y = -50
											}
										},
										children = {}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	{
		name = "untitled113",
		cType = "Button",
		params = {
			childName = "shopBtn",
			image = "tb_gn_283.png",
			scaleApt = 2,
			posApt = 1,
			clickAction = "onFirstPassAction",
			pos = {
				x = 930,
				y = 550
			}
		},
		children = {
			{
				name = "untitled137",
				cType = "RedDot",
				params = {
					subKey = "FirstReward",
					moduleId = 22800
				},
				children = {}
			}
		}
	},
	{
		name = "untitled112",
		cType = "Button",
		params = {
			childName = "outRuleBtn",
			image = "tb_gn_284.png",
			scaleApt = 2,
			posApt = 1,
			clickAction = "onDailyRewardAction",
			pos = {
				x = 1030,
				y = 550
			}
		},
		children = {
			{
				name = "untitled138",
				cType = "RedDot",
				params = {
					subKey = "IsCanDrawDailyReward",
					moduleId = 22800
				},
				children = {}
			}
		}
	},
	{
		name = "untitled1",
		cType = "Button",
		params = {
			clickAction = "onCloseBtnAction",
			posApt = 1,
			scaleApt = 2,
			image = "c_1.png",
			anchor = {
				x = 0,
				y = 1
			},
			pos = {
				x = 0,
				y = 640
			}
		},
		children = {}
	},
	{
		name = "untitled111",
		cType = "Button",
		params = {
			clickAction = "onRuleAction",
			scaleApt = 2,
			posApt = 1,
			image = "c_3.png",
			pos = {
				x = 261.12,
				y = 618
			}
		},
		children = {}
	},
	{
		name = "untitled2",
		cType = "Sprite",
		params = {
			scaleApt = 2,
			posApt = 1,
			image = "xyzz_2.png",
			anchor = {
				x = 0,
				y = 1
			},
			pos = {
				x = 83,
				y = 640
			}
		},
		children = {}
	},
	{
		name = "untitled114",
		cType = "TopResourceNode",
		params = {
			posApt = 1,
			scaleApt = 2,
			moduleIdList = {
				1111,
				1112,
				1114
			},
			pos = {
				x = 547.76,
				y = 590.23
			}
		},
		children = {}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.mMysteryData = {}
	slot0.maxRp = require("battle.common.Const").EnergyFull

	slot0.super.ctor(slot0)
	slot0.initUI(slot0)
	slot0.requestGetInfo(slot0)
	ui.addTouchEvent({
		node = slot0.mBgCampInfo,
		beganEvent = function (slot0, slot1)
			if not ui.touchInNode(slot0, slot0.mBgCampInfo) then
				return false
			end

			slot0:onBeganEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return true
		end,
		movedEvent = function (slot0, slot1)
			slot0:onMovedEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return 
		end,
		endedEvent = function (slot0, slot1)
			slot0:onEndedEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return 
		end
	})

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)

	slot0.selectHeroList = {
		0,
		0,
		0,
		0,
		0
	}
	slot0.headerNodeList = {}

	for slot4, slot5 in ipairs(slot0.getCustomChildren(slot0, slot0.mBgCampInfo, "campTag")) do
		slot0.headerNodeList[slot4] = {
			index = slot4,
			pos = cc.p(slot5.getPosition(slot5)),
			localZOrder = slot4 - 6
		}
	end

	for slot4, slot5 in ipairs(slot0.getCustomChildren(slot0, slot0.mBgCampInfo, "tag")) do
		slot0.headerNodeList[slot4].addBtn = slot5
	end

	return 
end
slot0.refreshTeamInfo = function (slot0, slot1)
	if slot1 then
		for slot5, slot6 in ipairs(slot0.headerNodeList) do
			if slot6.node then
				slot6.node:removeFromParent()

				slot6.node = nil
			end

			slot6.addBtn:setVisible(true)
		end
	end

	slot0.selectHeroList = {}

	for slot5, slot6 in pairs(slot0.mMysteryData.HeroInfo) do
		if slot6.HeroId ~= 0 then
			slot0.selectHeroList[slot6.Formation] = slot6.HeroId
		end
	end

	for slot5, slot6 in pairs(slot0.selectHeroList) do
		if slot6 ~= 0 then
			slot0.heroToWork(slot0, slot6, slot5)
		end
	end

	return 
end
slot0.updateNodeInfo = function (slot0)
	slot1 = false

	if not XiangyangfightNodeModel.items[slot0.mMysteryData.NodeId] then
		slot1 = true
	end

	slot0.isPassed = slot0.mMysteryData.IsPass
	slot0.allPassed = slot1
	slot0.nodeId = (slot1 and XiangyangfightNodeModel.items_count) or slot0.mMysteryData.NodeId
	slot0.layerId = math.min(slot0.mMysteryData.LayerId, 3)
	slot0.nodeInfo = XiangyangfightNodeModel.items[(slot1 and XiangyangfightNodeModel.items_count) or slot0.mMysteryData.NodeId]
	slot0.npcList = XiangyangfightNpcRelation.items[(slot1 and XiangyangfightNodeModel.items_count) or slot0.mMysteryData.NodeId][math.min(slot0.mMysteryData.LayerId, 3)]

	return 
end
slot0.refreshUI = function (slot0)
	slot1 = slot0.allPassed
	slot2 = slot0.nodeId
	slot3 = slot0.layerId

	slot0.title:setString(TR("%d", slot0.nodeInfo.modelId))

	slot6 = string.split(slot0.nodeInfo.prohibitProfession, ",")
	slot7 = {}

	for slot11, slot12 in pairs(slot5) do
		slot7[tonumber(slot12)] = true
	end

	slot8 = {}

	for slot12, slot13 in ipairs({
		1,
		2,
		3
	}) do
		if not slot7[slot13] then
			slot18, slot15 = Utility.getHeroCampProfessionName(tonumber(slot13), nil)

			table.insert(slot8, slot14)
		end
	end

	slot0.banLabel:setString(TR("可上阵阵营: %s", table.concat(slot8, ", ")))
	slot0.typeNode:removeAllChildren()
	slot0.tigLabel:setString("")
	slot0.enermysReset(slot0)
	slot0.passSp:setVisible(slot0.isPassed)
	slot0.refreshPTNode(slot0)
	slot0.refreshPassInfo(slot0)

	if slot0.getWorkHeroCnt(slot0) == 0 then
		slot0.onAddHeroAction(slot0)
	end

	if slot1 then
		slot0.nextFloorBtn:setEnabled(false)
		slot0.nextFloorBtn:setTitleText(TR("全通关"))
	else
		slot0.nextFloorBtn:setTitleText((slot0.isPassed and TR("下一节")) or TR("战 斗"))

		if slot0.isPassed and slot3 == 3 then
			slot0.nextFloorBtn:setTitleText(TR("下一战"))
		end

		slot0.nextFloorBtn:setEnabled(true)

		slot11 = PlayerAttrObj:getPlayerAttrByName("Lv")
		slot12 = XiangyangfightNodeModel.items[slot0.nodeId + 1]

		if slot3 == 3 and slot12 and slot11 < slot12.needLv and slot0.isPassed then
			slot0.nextFloorBtn:setEnabled(false)
			slot0.nextFloorBtn:setTitleText(TR("%d级开启", slot12.needLv))
		end
	end

	if slot0.isPassed then
		slot0.enermysFadeOut(slot0)
	else
		slot0.resetAllHerosOutSidePosition(slot0)
		slot0.AllHerosMoveToCampPosition(slot0, 2)
	end

	return 
end
slot0.refreshPTNode = function (slot0)
	slot1 = {}
	slot2 = slot0.mBgCampInfo:getContentSize()

	for slot6, slot7 in ipairs(slot0.npcList) do
		if slot7.heroModelId ~= 0 then
			slot8 = slot0.createLayoutTemplateNode(slot0, "typePTNode", {
				heroModelId = slot7.heroModelId
			})

			slot8.setPosition(slot8, slot2.width - slot0.headerNodeList[slot6].pos.x, slot0.headerNodeList[slot6].pos.y)
			slot8.setLocalZOrder(slot8, slot6 - 6)
			slot0.typeNode:addChild(slot8)

			slot11, slot17 = Utility.getColorValue(HeroTrainColorlvRelation.items[slot7.trainLv].colorLv, true)

			slot8.nameLabel:setString(string.format("%s%s%s", slot17, slot7.npcName, (HeroTrainColorlvRelation.items[slot7.trainLv].intro == 0 and "") or string.format(" +%s", slot10.intro)))
		end
	end

	return 
end
slot0.refreshPassInfo = function (slot0)
	slot0.passNode:removeAllChildren()

	for slot4 = 1, 3, 1 do
		slot6 = slot4 == 3

		slot0.createLayoutTemplateNode(slot0, "passTemplate").passSprite:setVisible(slot4 < slot0.layerId or (slot0.layerId == slot4 and slot0.isPassed))

		if XiangyangfightNpcRelation.items[slot0.nodeId][slot4] and XiangyangfightNpcRelation.items[slot0.nodeId][slot4][4] and XiangyangfightNpcRelation.items[slot0.nodeId][slot4][4].heroModelId ~= 0 then
			slot7.clipNode.head:setTexture(HeroModel.items[slot8].smallPic .. ".png")
		end

		slot7.rewardBtn:setVisible(slot6)
		slot7.rewardBtn:setClickAction(function ()
			slot0:onFirstPassAction()

			return 
		end)
		slot7.setPosition(slot7, (slot4 - 1)*120 + -120, 0)
		slot0.passNode:addChild(slot7)
	end

	return 
end
slot0.getClickItem = function (slot0, slot1, slot2)
	slot3 = nil

	for slot7, slot8 in ipairs(slot0.headerNodeList) do
		if slot8.pos.x - 60 <= slot1 and slot1 <= slot8.pos.x + 60 and slot8.pos.y - 10 <= slot2 and slot2 <= slot8.pos.y + 180 then
			slot3 = slot8

			break
		end
	end

	return slot3
end
slot0.onBeganEvent = function (slot0, slot1, slot2)
	slot0.lastClickPos = nil
	slot0.lastNodePos = nil
	slot0.clickItem = slot0.getClickItem(slot0, slot1, slot2)

	if slot0.clickItem ~= nil and slot0.clickItem.node ~= nil then
		for slot6, slot7 in pairs(slot0.headerNodeList) do
			if slot7.node then
				slot7.node:setLocalZOrder(slot7.localZOrder)
			end
		end

		slot0.clickItem.node:setLocalZOrder(6)

		slot0.lastNodePos = slot0.clickItem.pos
	else
		slot0.clickItem = nil
	end

	return 
end
slot0.onMovedEvent = function (slot0, slot1, slot2)
	if slot0.clickItem == nil or slot0.clickItem.node == nil or slot0.lastNodePos == nil then
		return 
	end

	if slot0.lastClickPos == nil then
		slot0.lastClickPos = cc.p(slot1, slot2)
	else
		slot4 = slot2 - slot0.lastClickPos.y

		if 3 <= math.abs(slot3) or 3 <= math.abs(slot4) then
			slot0.lastNodePos = cc.p(slot0.lastNodePos.x + slot3, slot0.lastNodePos.y + slot4)

			slot0.clickItem.node:setPosition(slot0.lastNodePos)

			slot0.lastClickPos = cc.p(slot1, slot2)
		end
	end

	return 
end
slot0.onEndedEvent = function (slot0, slot1, slot2)
	if slot0.clickItem == nil or slot0.clickItem.node == nil or slot0.lastClickPos == nil then
		return 
	end

	if slot0.getClickItem(slot0, slot1, slot2) ~= nil and slot3.index ~= slot0.clickItem.index then
		if slot3.node ~= nil then
			slot3.node:runAction(cc.MoveTo:create(0.1, slot0.clickItem.pos))
			slot3.node:setLocalZOrder(slot3.localZOrder)
		end

		slot0.clickItem.node:runAction(cc.MoveTo:create(0.1, slot3.pos))
		slot0.clickItem.node:setLocalZOrder(slot0.clickItem.localZOrder)

		slot0.headerNodeList[slot0.clickItem.index].node = slot3.node
		slot0.headerNodeList[slot3.index].node = slot0.clickItem.node

		slot0.headerNodeList[slot0.clickItem.index].addBtn:setVisible(slot0.headerNodeList[slot0.clickItem.index].node == nil)
		slot0.headerNodeList[slot3.index].addBtn:setVisible(slot0.headerNodeList[slot3.index].node == nil)

		slot0.selectHeroList[slot0.clickItem.index] = slot0.selectHeroList[slot3.index]
		slot0.selectHeroList[slot3.index] = slot0.selectHeroList[slot0.clickItem.index]

		slot0.requestSetFormationInfo(slot0)
	else
		slot0.clickItem.node:runAction(cc.MoveTo:create(0.1, slot0.clickItem.pos))
	end

	slot0.clickItem = nil
	slot0.lastClickPos = nil
	slot0.lastNodePos = nil

	return 
end
slot0.createHeroNode = function (slot0, slot1)
	slot2 = {}

	for slot6, slot7 in pairs(slot0.mMysteryData.HeroInfo) do
		if slot7.HeroId == slot1 then
			slot2 = slot7
		end
	end

	slot0.createLayoutTemplateNode(slot0, "heroNode", {
		heroModelId = slot1,
		name = TR("%s", HeroModel.items[slot1].name),
		hpCV = slot2.Hp,
		hpMV = slot2.TotalHp,
		rpCV = slot2.Ang
	}).heroModelId = slot1
	slot6, slot12 = Utility.getColorValue(HeroTrainColorlvRelation.items[HeroObj:getItem(slot1).TrainLv].colorLv, true)

	slot0.createLayoutTemplateNode(slot0, "heroNode", {
		heroModelId = slot1,
		name = TR("%s", HeroModel.items[slot1].name),
		hpCV = slot2.Hp,
		hpMV = slot2.TotalHp,
		rpCV = slot2.Ang
	}).nameLabel:setString(string.format("%s%s%s", slot12, Resource.getName(slot1), (HeroTrainColorlvRelation.items[HeroObj.getItem(slot1).TrainLv].intro == 0 and "") or string.format(" +%s", slot5.intro)))

	if slot0.maxRp < slot2.Ang then
		slot3.rp:setCurrValue(slot0.maxRp)
		slot3.rp2:setCurrValue(slot2.Ang - slot0.maxRp)
		slot3.rp2:setVisible(true)
	else
		slot3.rp:setCurrValue(slot2.Ang)
		slot3.rp2:setVisible(false)
	end

	return slot3
end
slot0.refreshHeroNode = function (slot0)
	for slot4, slot5 in pairs(slot0.headerNodeList) do
		if slot5.node then
			slot6 = {}

			for slot10, slot11 in pairs(slot0.mMysteryData.Hero) do
				if slot11.HeroId == slot5.node.heroModelId then
					slot6 = slot11
				end
			end

			slot5.node.hp:setCurrValue(slot6.Hp)
			slot5.node.hp:setMaxValue(slot6.TotalHp)

			if slot0.maxRp < slot6.Ang then
				slot5.node.rp:setCurrValue(slot0.maxRp)
				slot5.node.rp2:setCurrValue(slot6.Ang - slot0.maxRp)
				slot5.node.rp2:setVisible(true)
			else
				slot5.node.rp:setCurrValue(slot6.Ang)
				slot5.node.rp2:setVisible(false)
			end
		end
	end

	return 
end
slot0.heroToWork = function (slot0, slot1, slot2, slot3)
	slot5 = slot0.createHeroNode(slot0, slot1)

	slot5.setIgnoreAnchorPointForPosition(slot5, false)
	slot5.setAnchorPoint(slot5, cc.p(0.5, 0.5))
	slot5.setPosition(slot5, slot4)
	slot0.mBgCampInfo:addChild(slot5, slot0.headerNodeList[slot2].localZOrder)

	slot0.headerNodeList[slot2].node = slot5
	slot0.selectHeroList[slot2] = slot1

	slot0.headerNodeList[slot2].addBtn:setVisible(false)

	slot6 = slot3 or false

	if slot6 then
		slot0.requestSetFormationInfo(slot0)
	end

	if slot6 then
		slot0.resetHeroPosition(slot0, slot2, true)
		slot0.heroMoveToCampPosition(slot0, slot2, 3)
	end

	return 
end
slot0.heroUnWork = function (slot0, slot1, slot2)
	slot0.headerNodeList[slot1].node:removeFromParent()

	slot0.headerNodeList[slot1].node = nil
	slot0.selectHeroList[slot1] = 0

	slot0.headerNodeList[slot1].addBtn:setVisible(true)

	if slot2 or false then
		slot0.requestSetFormationInfo(slot0)
	end

	return 
end
slot0.findEmptyGrid = function (slot0)
	slot1 = 0

	for slot6 = 1, 5, 1 do
		if slot0.selectHeroList[slot6] == nil or slot7 == 0 then
			slot1 = slot6

			break
		end
	end

	return slot1
end
slot0.getHeroIndex = function (slot0, slot1)
	for slot5, slot6 in pairs(slot0.selectHeroList) do
		if slot6 == slot1 then
			return slot5
		end
	end

	return 0
end
slot0.getSelectHeroList = function (slot0)
	return slot0.selectHeroList
end
slot0.getWakeHeroNum = function (slot0)
	slot1 = 0

	for slot5, slot6 in pairs(slot0.selectHeroList) do
		if slot6 ~= 0 then
			slot1 = slot1 + 1
		end
	end

	return slot1
end
slot0.getWorkHeroCnt = function (slot0)
	slot1 = 0

	for slot5, slot6 in pairs(slot0.mMysteryData.HeroInfo) do
		if slot6.HeroId ~= 0 then
			slot1 = slot1 + 1
		end
	end

	return slot1
end
slot0.resetHeroPosition = function (slot0, slot1, slot2)
	if tolua.isnull(slot0.headerNodeList[slot1].node) then
		return 
	end

	slot3.node:stopAllActions()

	slot4 = slot3.pos

	if slot2 then
		slot6, slot7 = slot0.mBgCampInfo:getPosition()

		slot3.node:setPosition(-300 - slot6, slot4.y)
	else
		slot3.node:setPosition(slot4)
	end

	return 
end
slot0.resetAllHerosOutSidePosition = function (slot0)
	for slot4 = 1, 5, 1 do
		slot0.resetHeroPosition(slot0, slot4, true)
	end

	return 
end
slot0.resetAllHerosCampPosition = function (slot0)
	for slot4 = 1, 5, 1 do
		slot0.resetHeroPosition(slot0, slot4)
	end

	return 
end
slot0.heroMoveToCampPosition = function (slot0, slot1, slot2, slot3)
	if tolua.isnull(slot0.headerNodeList[slot1].node) then
		return 
	end

	slot4.node.figure.playAnimation(slot7, "pao")
	slot4.node:runAction(cc.Sequence:create(cc.MoveTo:create(slot2, slot6), cc.CallFunc:create(function ()
		slot0:playAnimation("daiji")

		if slot0 then
			slot1()
		end

		return 
	end)))

	return 
end
slot0.AllHerosMoveToCampPosition = function (slot0, slot1, slot2)
	slot3 = {}

	for slot7, slot8 in ipairs(slot0.headerNodeList) do
		if not tolua.isnull(slot8.node) then
			table.insert(slot3, {
				campIdx = slot7,
				node = slot8.node
			})
		end
	end

	slot4 = nil
	slot5 = 1
	slot4 = Utility.schedule(slot0, function ()
		if slot0[slot1] then
			slot2.startRunning = true

			slot0(slot1, slot0[slot1].campIdx, slot1 or 3, function ()
				if slot0 == #slot1 and slot2 then
					slot3.startRunning = false

					slot2()
				end

				return 
			end)

			slot1 = slot1 + 1
		else
			slot2:stopAction(slot5)
		end

		return 
	end, 0.3)

	return 
end
slot0.heroMoveByRightDirecton = function (slot0, slot1, slot2, slot3)
	if tolua.isnull(slot0.headerNodeList[slot1].node) then
		return 
	end

	slot4.node.stopAllActions(slot5)
	slot4.node.figure.playAnimation(slot8, "pao")
	slot4.node:runAction(cc.Sequence:create(cc.MoveTo:create(slot2, slot7), cc.CallFunc:create(function ()
		slot0:playAnimation("daiji")

		if slot0 then
			slot1()
		end

		return 
	end)))

	return 
end
slot0.AllHerosMoveByRightDirecton = function (slot0, slot1, slot2)
	slot3 = {}

	for slot7, slot8 in ipairs(slot0.headerNodeList) do
		if not tolua.isnull(slot8.node) then
			table.insert(slot3, {
				campIdx = slot7,
				node = slot8.node
			})
		end
	end

	for slot7, slot8 in ipairs(slot3) do
		slot0.heroMoveByRightDirecton(slot0, slot8.campIdx, 3, function ()
			if idx == #slot0 and slot1 then
				slot1()
			end

			return 
		end)
	end

	return 
end
slot0.enermysFadeOut = function (slot0, slot1)
	for slot5, slot6 in ipairs(slot0.typeNode:getChildren()) do
		slot6.figure:runAction(cc.Sequence:create({
			cc.Blink:create(1, 3),
			cc.CallFunc:create(function ()
				slot0.figure:setVisible(false)

				if slot0.figure then
					slot1()
				end

				return 
			end)
		}))
	end

	return 
end
slot0.enermysReset = function (slot0)
	for slot4, slot5 in ipairs(slot0.typeNode:getChildren()) do
		slot5.figure:setVisible(true)
	end

	return 
end
slot0.onAddHeroAction = function (slot0, slot1)
	if slot0.layerId ~= 1 then
		ui.showFlashView(TR("每个节点第一个关卡才能选择侠客"))

		return 
	end

	LayerManager.addLayer({
		cleanUp = false,
		name = "challenge.MysteryHoleChooseHeroLayer",
		data = {
			isUpWakeList = slot0.mMysteryData.HeroInfo,
			limitProfession = string.split(slot0.nodeInfo.prohibitProfession, ","),
			limitCamp = string.split(slot0.nodeInfo.prohibitCamp, ","),
			callback = function (slot0)
				slot0.mMysteryData = {}
				slot0.mMysteryData = slot0

				slot0:refreshTeamInfo(true)
				slot0:refreshUI()

				return 
			end
		},
		zOrder = Enums.ZOrderType.ePopLayer
	})

	return 
end
slot0.onFightAction = function (slot0, slot1)
	if slot0.isPassed then
		slot0.requestEnterNext(slot0)
	elseif 0 < slot0.getWakeHeroNum(slot0) then
		slot0.requestGetFightInfo(slot0)
	else
		ui.showFlashView(TR("至少选择一名侠客上阵!"))
	end

	return 
end
slot0.onOutRuleAction = function (slot0, slot1)
	LayerManager.addLayer({
		cleanUp = false,
		name = "challenge.MysteryHoleDropRuleLayer",
		zOrder = Enums.ZOrderType.ePopLayer
	})

	return 
end
slot0.onFirstPassAction = function (slot0, slot1)
	LayerManager.addLayer({
		cleanUp = false,
		name = "challenge.MysteryHoleRewardLayer",
		data = {
			chapterPassed = slot0.layerId == 3 and slot0.isPassed,
			chapterId = slot0.nodeId,
			firstDrawNodelIdList = slot0.mMysteryData.FirstDrawNodelIdList,
			callBack = function (slot0)
				slot0.mMysteryData.FirstDrawNodelIdList = slot0

				return 
			end
		},
		zOrder = Enums.ZOrderType.ePopLayer
	})

	return 
end
slot0.onDailyRewardAction = function (slot0, slot1)
	if slot0.nodeId <= 1 then
		ui.showFlashView(TR("通关第一战后可领取每日补给"))

		return 
	end

	LayerManager.addLayer({
		cleanUp = false,
		name = "challenge.MysteryHoleDailyRewardLayer",
		data = {
			isCanDrawDailyReward = slot0.mMysteryData.IsCanDrawDailyReward,
			dailyDropTypeId = slot0.mMysteryData.DailyDropTypeId,
			dailyNum = slot0.mMysteryData.DailyNum,
			callBack = function (slot0)
				slot0.mMysteryData.IsCanDrawDailyReward = slot0

				return 
			end
		},
		zOrder = Enums.ZOrderType.ePopLayer
	})

	return 
end
slot0.onCloseBtnAction = function (slot0, slot1)
	LayerManager.removeLayer(slot0)

	return 
end
slot0.onResetAction = function (slot0)
	if slot0.getWorkHeroCnt(slot0) == 0 then
		ui.showFlashView(TR("当前无需重置"))

		return 
	end

	ui.showMessageBox({
		titleText = TR("提示"),
		text = TR("将重置当前挑战关卡，恢复血量重新挑战，确定是否需要重新挑战?"),
		okCallback = function ()
			slot0:requestResetData()

			return 
		end,
		cancelCallback = function ()
			return 
		end
	})

	return 
end
slot0.onRuleAction = function (slot0)
	ui.showRuleMsg({
		textList = {
			TR("1、襄阳之战一共分为多个关卡，每个关卡内共设了3个小节点；"),
			TR("2、大侠需要选择5名侠客进行出战，保留血量通关3个小节点则判断关卡通关；"),
			TR("3、每通关1关都可以领取1次首通奖励；"),
			TR("4、根据大侠最大通关关卡数，可以每日领取一次补给奖励；"),
			TR("5、关卡不同，会限制出战侠客的阵营和职业。")
		}
	})

	return 
end
slot0.requestGetInfo = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "GetInfo",
		moduleName = "Xiangyangfight",
		methodData = {},
		successCallback = function (slot0)
			dump(slot0, "获取基本信息")

			slot0.mMysteryData = {}
			slot0.mMysteryData = slot0

			slot0:updateNodeInfo()
			slot0:refreshTeamInfo()
			slot0:refreshUI()

			return 
		end
	})

	return 
end
slot0.requestGetFightInfo = function (slot0)
	for slot4 = 1, 5, 1 do
		if not slot0.selectHeroList[slot4] then
			slot0.selectHeroList[slot4] = 0
		end
	end

	teamStr = table.concat(slot0.selectHeroList, ",")

	slot0.socketRequest(slot0, {
		methodName = "GetFightInfo",
		moduleName = "Xiangyangfight",
		methodData = {
			teamStr
		},
		successCallback = function (slot0)
			require("common.BattleEntry"):StartBattle({
				fightInfo = slot0.FightInfo,
				extraData = {}
			})

			return 
		end
	})

	return 
end
slot0.requestResetData = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "ResetNode",
		moduleName = "Xiangyangfight",
		methodData = {},
		successCallback = function (slot0)
			slot0.mMysteryData = {}
			slot0.mMysteryData = slot0

			slot0:updateNodeInfo()
			slot0:refreshTeamInfo(true)
			slot0:refreshUI()

			return 
		end
	})

	return 
end
slot0.requestEnterNext = function (slot0)
	if not slot0.cover then
		slot0.cover = ui.turnAction(slot0)
	end

	slot0.AllHerosMoveByRightDirecton(slot0)
	slot0.cover:startTurn(2, function ()
		slot0:socketRequest({
			methodName = "NextLayer",
			moduleName = "Xiangyangfight",
			methodData = {},
			successCallback = function (slot0)
				slot0.mMysteryData = {}
				slot0.mMysteryData = slot0

				slot0:updateNodeInfo()
				slot0:refreshUI()
				slot0:refreshTeamInfo(true)
				slot0:resetAllHerosOutSidePosition()
				slot0.cover:endTurn(0.5)

				return 
			end
		})

		return 
	end)

	return 
end
slot0.requestSetFormationInfo = function (slot0)
	for slot4 = 1, 5, 1 do
		if not slot0.selectHeroList[slot4] then
			slot0.selectHeroList[slot4] = 0
		end
	end

	teamStr = table.concat(slot0.selectHeroList, ",")

	dump(teamStr)
	slot0.socketRequest(slot0, {
		methodName = "SetFormation",
		moduleName = "Xiangyangfight",
		methodData = {
			teamStr,
			true
		},
		successCallback = function (slot0)
			slot0.mMysteryData = {}
			slot0.mMysteryData = slot0

			return 
		end
	})

	return 
end

return slot0
