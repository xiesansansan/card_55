slot0 = class("CitywarCampReadyLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = true,
		color = cc.c4b(0, 0, 0, 150)
	})
end)
slot0.uiTree = {
	{
		name = "untitled95",
		cType = "Sprite",
		params = {
			isFullScale = true,
			scaleApt = 2,
			posApt = 1,
			image = "zj_127.png",
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {}
	},
	{
		name = "untitled132",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			isLiuHai = true,
			pos = {
				x = 0,
				y = 320
			}
		},
		children = {
			{
				name = "untitled133",
				cType = "Sprite",
				params = {
					image = "zj_176.png",
					pos = {
						x = 269.63,
						y = -88.26
					}
				},
				children = {}
			},
			{
				name = "untitled114",
				cType = "Sprite",
				params = {
					image = "xyyz_40.png",
					pos = {
						x = 301.01,
						y = 246.89
					}
				},
				children = {}
			},
			{
				name = "mCountLabel",
				cType = "Label",
				params = {
					fontSize = 22,
					color = {
						g = 255,
						r = 255,
						b = 255
					},
					pos = {
						x = 299.09,
						y = 250.94
					},
					text = TR("出战阵容 (0/5)")
				},
				children = {}
			},
			{
				name = "mBgCampInfo",
				cType = "Scale9Sprite",
				params = {
					image = "c_pure.png",
					anchor = {
						x = 0.5,
						y = 1
					},
					pos = {
						x = 304.02,
						y = 321
					},
					size = {
						width = 578,
						height = 640
					}
				},
				children = {
					{
						name = "untitled120",
						cType = "Sprite",
						custom = {
							{
								value = 1,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 347.86,
								y = 176.59
							}
						},
						children = {}
					},
					{
						name = "untitled69",
						cType = "Sprite",
						custom = {
							{
								value = 2,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 435.01,
								y = 276.89
							}
						},
						children = {}
					},
					{
						name = "untitled55",
						cType = "Sprite",
						custom = {
							{
								value = 3,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 85.86,
								y = 129.19
							}
						},
						children = {}
					},
					{
						name = "untitled54",
						cType = "Sprite",
						custom = {
							{
								value = 4,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 175,
								y = 239.63
							}
						},
						children = {}
					},
					{
						name = "untitled53",
						cType = "Sprite",
						custom = {
							{
								value = 5,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 278.08,
								y = 320.74
							}
						},
						children = {}
					},
					{
						name = "fapSp",
						cType = "Sprite",
						params = {
							scale = 0.8,
							image = "c_82.png",
							pos = {
								x = 289.08,
								y = 107.33
							}
						},
						children = {
							{
								name = "untitled113",
								cType = "Sprite",
								params = {
									image = "c_80.png",
									pos = {
										x = 43.36,
										y = 39.91
									}
								},
								children = {}
							},
							{
								name = "mFapLabel",
								cType = "Label",
								params = {
									fontSize = 28,
									charCount = 12,
									text = "",
									fontName = "c_81.png",
									anchor = {
										x = 0,
										y = 0.5
									},
									pos = {
										x = 90.86,
										y = 35.13
									}
								},
								children = {}
							}
						}
					},
					{
						name = "resOwnBgSprite",
						cType = "Sprite",
						params = {
							image = "c_pure.png",
							pos = {
								x = 266.78,
								y = 59.74
							}
						},
						children = {
							{
								name = "untitled11",
								cType = "Label",
								params = {
									fontSize = 20,
									anchor = {
										x = 1,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = -5,
										y = 12
									},
									text = TR("总干粮:")
								},
								children = {}
							},
							{
								name = "untitled60",
								cType = "Sprite",
								params = {
									image = "db_1114.png",
									pos = {
										x = 10,
										y = 12
									}
								},
								children = {}
							},
							{
								name = "mResOwnLabel",
								cType = "Label",
								params = {
									fontSize = 20,
									text = "0",
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = 30,
										y = 11
									}
								},
								children = {}
							}
						}
					},
					{
						name = "resNeedBgSprite",
						cType = "Sprite",
						params = {
							image = "c_pure.png",
							pos = {
								x = 267.3,
								y = 27.67
							}
						},
						children = {
							{
								name = "untitled12",
								cType = "Label",
								params = {
									fontSize = 20,
									anchor = {
										x = 1,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = -5,
										y = 12
									},
									text = TR("消  耗:")
								},
								children = {}
							},
							{
								name = "untitled66",
								cType = "Sprite",
								params = {
									image = "db_1114.png",
									pos = {
										x = 10,
										y = 12
									}
								},
								children = {}
							},
							{
								name = "mResNeedLabel",
								cType = "Label",
								params = {
									fontSize = 20,
									text = "0",
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = 30,
										y = 11
									}
								},
								children = {}
							}
						}
					},
					{
						name = "strategyBg",
						cType = "Sprite",
						params = {
							zOrder = -1,
							image = "xyyz_51.png",
							pos = {
								x = 52,
								y = 513
							}
						},
						children = {}
					},
					{
						name = "strategyBtn",
						cType = "Button",
						params = {
							image = "tb_gn_31.png",
							clickAction = "onStrategyBtnClickAction",
							scale = 1,
							pos = {
								x = 55,
								y = 513
							}
						},
						children = {
							{
								name = "strategyText",
								cType = "Label",
								params = {
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									outlineColor = {
										g = 37,
										r = 37,
										b = 37
									},
									pos = {
										x = -0.9,
										y = -67.22
									},
									text = TR("点击添加阵法")
								},
								children = {}
							}
						}
					}
				}
			}
		}
	},
	{
		name = "untitled100",
		cType = "TopResourceNode",
		params = {
			scaleApt = 2,
			posApt = 1,
			anchor = {
				x = 1,
				y = 1
			},
			moduleIdList = {
				1111,
				1112,
				1114
			},
			pos = {
				x = 1136,
				y = 640
			}
		},
		children = {}
	},
	{
		name = "untitled101",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 1136,
				y = 320
			}
		},
		children = {
			{
				name = "oneKeySetBtn",
				cType = "Button",
				params = {
					image = "c_39.png",
					clickAction = "onCampAction",
					pos = {
						x = -422,
						y = -284.58
					},
					titleText = TR("一键布阵")
				},
				children = {}
			},
			{
				name = "mOkBtn",
				cType = "Button",
				params = {
					image = "c_19.png",
					clickAction = "onReadyAction",
					pos = {
						x = -216,
						y = -284.58
					},
					titleText = TR("确 定")
				},
				children = {}
			},
			{
				name = "teamsInfoSprite",
				cType = "Node",
				params = {
					pos = {
						x = -527.54,
						y = 242.94
					}
				},
				children = {
					{
						name = "teamsListView",
						cType = "ListView",
						params = {
							direction = false,
							anchor = {
								x = 0.5,
								y = 0.5
							},
							pos = {
								x = 198.77,
								y = 14.27
							},
							size = {
								width = 450,
								height = 40
							}
						},
						children = {
							{
								name = "teamsLayout",
								cType = "Layout",
								custom = {
									{
										value = "untitled125-text",
										name = "labelStr",
										type = "string"
									},
									{
										value = "untitled124-teamIndex",
										name = "teamIndex",
										type = "string"
									}
								},
								params = {
									pos = {
										z = 0,
										x = 19,
										y = 0
									},
									size = {
										width = 85,
										height = 40
									}
								},
								children = {
									{
										name = "untitled124",
										cType = "Button",
										custom = {
											{
												value = 1,
												name = "teamIndex",
												type = "integer"
											}
										},
										params = {
											image = "xyyz_41.png",
											clickAction = "onTeamBtnClickAction",
											childName = "setButton",
											pos = {
												x = 43,
												y = 20
											}
										},
										children = {
											{
												name = "untitled125",
												cType = "Label",
												params = {
													childName = "teamIndexLabel",
													text = "1",
													color = {
														g = 37,
														r = 37,
														b = 37
													},
													pos = {
														x = -3.06,
														y = -3.9
													}
												},
												children = {}
											},
											{
												name = "untitled129",
												cType = "Sprite",
												params = {
													image = "gcz_15.png",
													childName = "enoughSprite",
													pos = {
														x = -26.24,
														y = 8.47
													}
												},
												children = {}
											},
											{
												name = "untitled130",
												cType = "Sprite",
												params = {
													childName = "keySprite",
													scale = 0.6,
													hide = true,
													image = "c_21.png",
													pos = {
														x = 27.11,
														y = 7.27
													}
												},
												children = {}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			{
				name = "mBgHeroList",
				cType = "Scale9Sprite",
				params = {
					image = "c_9.png",
					anchor = {
						x = 0.5,
						y = 1
					},
					pos = {
						x = -327,
						y = 256.57
					},
					size = {
						width = 476,
						height = 520
					}
				},
				children = {
					{
						name = "untitled131",
						cType = "ScrollView",
						params = {
							pos = {
								x = 17.82,
								y = 15.4
							},
							size = {
								width = 440,
								height = 480
							}
						},
						children = {
							{
								name = "mHeroGridView",
								cType = "GridView",
								params = {
									createColCb = "onCreateGridAction",
									asyncLoad = true,
									itemNum = 0,
									colCount = 4,
									selectIndex = 1,
									celHeight = 140,
									pos = {
										x = 220,
										y = 240
									},
									size = {
										width = 440,
										height = 480
									}
								},
								children = {
									{
										name = "heroTemplateNode",
										cType = "TemplateNode",
										custom = {
											{
												value = "untitled48-image",
												name = "professionImg",
												type = "string"
											},
											{
												value = "untitled49-text",
												name = "nameText",
												type = "string"
											}
										},
										params = {
											pos = {
												x = 127.82,
												y = 205.57
											},
											size = {
												width = 110,
												height = 139
											}
										},
										children = {
											{
												name = "untitled106",
												cType = "Scale9Sprite",
												params = {
													image = "gcz_27.png",
													pos = {
														x = 55,
														y = 75
													}
												},
												children = {}
											},
											{
												name = "untitled46",
												cType = "CardNode",
												params = {
													scale = 0.9,
													childName = "cardNode",
													allowClick = true,
													pos = {
														x = 55.35,
														y = 85.66
													}
												},
												children = {}
											},
											{
												name = "untitled70",
												cType = "Sprite",
												params = {
													childName = "deadSprite",
													image = "fb_23.png",
													hide = true,
													pos = {
														x = 56,
														y = 85
													}
												},
												children = {}
											},
											{
												name = "untitled71",
												cType = "Sprite",
												params = {
													childName = "otherWarSprite",
													image = "c_pure.png",
													hide = true,
													pos = {
														x = 64,
														y = 95
													}
												},
												children = {
													{
														name = "untitled112",
														cType = "Label",
														params = {
															color = {
																g = 65,
																r = 192,
																b = 65
															},
															pos = {
																x = 0,
																y = 0
															},
															text = TR("其他出战")
														},
														children = {}
													}
												}
											},
											{
												name = "untitled76",
												cType = "Sprite",
												params = {
													childName = "disableSprite",
													image = "fb_21.png",
													hide = true,
													pos = {
														x = 66.13,
														y = 88.09
													}
												},
												children = {}
											},
											{
												name = "untitled83",
												cType = "Sprite",
												params = {
													childName = "gotoWorkSprite",
													image = "gcz_16.png",
													hide = true,
													pos = {
														x = 64.06,
														y = 91.72
													}
												},
												children = {}
											},
											{
												name = "untitled50",
												cType = "Sprite",
												params = {
													childName = "selectSprite",
													zOrder = 1,
													hide = true,
													image = "fb_24.png",
													pos = {
														x = 56.9,
														y = 85.45
													}
												},
												children = {}
											},
											{
												name = "untitled86",
												cType = "Sprite",
												params = {
													childName = "inTeamSprite",
													image = "gcz_16.png",
													hide = true,
													pos = {
														x = 64.12,
														y = 90.05
													}
												},
												children = {}
											},
											{
												name = "untitled116",
												cType = "Scale9Sprite",
												params = {
													image = "gcz_26.png",
													pos = {
														x = 65.44,
														y = 24.03
													}
												},
												children = {}
											},
											{
												name = "untitled87",
												cType = "Sprite",
												params = {
													childName = "indexSprite",
													image = "xyyz_44.png",
													hide = true,
													pos = {
														x = 86.38,
														y = 53.3
													}
												},
												children = {
													{
														name = "untitled88",
														cType = "Label",
														params = {
															fontSize = 16,
															text = "1",
															childName = "label",
															color = {
																g = 255,
																r = 255,
																b = 255
															},
															outlineColor = {
																g = 49,
																r = 49,
																b = 49
															},
															pos = {
																x = 12.5,
																y = 13.5
															}
														},
														children = {}
													}
												}
											},
											{
												name = "untitled49",
												cType = "Label",
												params = {
													fontSize = 18,
													isRichText = true,
													childName = "nameLabel",
													text = "Name",
													anchor = {
														x = 0,
														y = 0.5
													},
													color = {
														g = 255,
														r = 255,
														b = 255
													},
													outlineColor = {
														g = 37,
														r = 37,
														b = 37
													},
													pos = {
														x = 32,
														y = 24
													}
												},
												children = {}
											},
											{
												name = "untitled48",
												cType = "Sprite",
												params = {
													childName = "professionSprite",
													scale = 0.75,
													image = "zj_72.png",
													anchor = {
														x = 1,
														y = 0.5
													},
													pos = {
														x = 27.59,
														y = 22.31
													}
												},
												children = {}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	{
		name = "untitled96",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 0,
				y = 640
			}
		},
		children = {
			{
				name = "untitled98",
				cType = "Button",
				params = {
					clickAction = "onCloseLayer",
					image = "c_1.png",
					anchor = {
						x = 0,
						y = 1
					},
					pos = {
						x = 0,
						y = 0
					}
				},
				children = {}
			},
			{
				name = "untitled97",
				cType = "Sprite",
				params = {
					image = "xyyz_45.png",
					pos = {
						x = 174.51,
						y = -26
					}
				},
				children = {}
			}
		}
	}
}
slot1 = {
	manually = 1,
	campground = 3,
	onhook = 2
}
slot2 = {
	defense = 2,
	attack = 1,
	wait = 3,
	idle = 4
}
slot3 = 5
slot4 = 6
slot5 = require("common.ShaderManager")
slot0.ctor = function (slot0, slot1)
	slot0.super.ctor(slot0, {
		swallow = true
	})

	slot0.callback = slot1.callback
	slot0.minCount = slot1.minCount or 1
	slot0.currSlotString = slot1.currSlotString or ""
	slot0.alreadyGotoWar = slot1.alreadyGotoWar or {}
	slot0.alreadyGotoWork = slot1.alreadyGotoWork or {}
	slot0.ignoreHeroList = slot1.ignoreHeroList or {}
	slot0.ignoreCampList = slot1.ignoreCampList or {}
	slot0.ignoreProfessionList = slot1.ignoreProfessionList or {}
	slot0.ignoreSexId = slot1.ignoreSexId or 0
	slot0.titleText = slot1.titleText
	slot0.showStatusBar = slot1.showStatusBar or false
	slot0.statusList = slot1.statusList or {}
	slot0.noNeedVit = slot1.noNeedVit or false
	slot0.isPvp = slot1.isPvp or false
	slot0.isPve = slot1.isPve or false
	slot0.pveData = slot1.pveData or {}
	slot0.isMainCityWar = slot1.isMainCityWar or false
	slot0.revivalInfo = slot1.revivalInfo or {}
	slot0.minTrainLv = slot1.minTrainLv or 0
	slot0.mTotalResNeed = 0
	slot0.limitCount = slot1.limitCount or 0
	slot0.mVitCostR = slot1.vitCostR
	slot0.mStratageID = 0
	slot0.mCallModelSub = slot1.callModelSub or 0
	slot0.mCityTeamsList = (slot1.cityWarTeamData and clone(slot1.cityWarTeamData)) or {}
	slot0.mSetTeamIndex = slot1.teamIndex
	slot0.mIsControlState = false
	slot0.isMoNiZhan = slot1.isMoNiZhan

	if slot0.isMoNiZhan and 0 < #slot0.mCityTeamsList then
		slot0.mSetTeamIndex = 1
	end

	slot0.initUI(slot0)
	ui.addTouchEvent({
		node = slot0.mBgCampInfo,
		beganEvent = function (slot0, slot1)
			if not ui.touchInNode(slot0, slot0.mBgCampInfo) then
				return false
			end

			slot0:onBeganEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return true
		end,
		movedEvent = function (slot0, slot1)
			slot0:onMovedEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return 
		end,
		endedEvent = function (slot0, slot1)
			slot0:onEndedEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return 
		end
	})

	return 
end
slot0.getZorderByIndex = function (slot0, slot1)
	return ({
		4,
		2,
		5,
		3,
		1
	})[slot1]
end
slot0.onCloseLayer = function (slot0)
	LayerManager.removeLayer(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot1 = slot0.checkStrategyEnable(slot0)

	slot0.createUITree(slot0, function (slot0, slot1)
		if slot0.name == "mMsgBox" and slot0.titleText ~= nil then
			slot1.titleText = slot0.titleText
		end

		return 
	end)

	slot0.mDataList = {}
	slot0.selectHeroList = {
		0,
		0,
		0,
		0,
		0
	}
	slot0.headerNodeList = {}

	for slot5, slot6 in ipairs(slot0.getCustomChildren(slot0, slot0.mBgCampInfo, "campTag")) do
		slot0.headerNodeList[slot5] = {
			index = slot5,
			pos = cc.p(slot6.getPosition(slot6))
		}
	end

	if slot0.noNeedVit == true then
		slot0.mResOwnLabel:setVisible(false)
		slot0.resNeedBgSprite:setVisible(false)
		slot0.resOwnBgSprite:setVisible(false)
	else
		slot0.mResOwnLabel:setString(PlayerAttrObj:getPlayerAttrByName("Vit"))
	end

	slot0.strategyBtn:setVisible(slot1)
	slot0.strategyBg:setVisible(slot1)
	slot0.onPopActionOver(slot0)

	return 
end
slot0.refreshTeamsList = function (slot0)
	slot0.teamsListView:removeAllItems()

	for slot4, slot5 in ipairs(slot0.mCityTeamsList) do
		slot0.createOneTeamListCell(slot0, slot4)
	end

	slot0.refreshTeamBtnState(slot0)
	slot0.refreshTeamInfo(slot0)
	ui.setListviewItemShow(slot0.teamsListView, slot0.mSetTeamIndex)

	return 
end
slot0.createOneTeamListCell = function (slot0, slot1)
	if 5 < slot1 then
		return 
	end

	slot2 = ""

	slot0.teamsListView:pushBackCustomItem(slot0.createLayoutTemplateNode(slot0, "teamsLayout", {
		teamIndex = slot1,
		labelStr = (PlayerAttrObj:getPlayerAttrByName("Lv") >= CitywarQueueConfig.items[slot1].needPlayerLv or TR("%d级", slot3)) and ((slot1 == #slot0.mCityTeamsList and "+") or Utility.getChineseNum(slot1))
	}))

	return 
end
slot0.refreshTeamBtnState = function (slot0)
	for slot4, slot5 in ipairs(slot0.teamsListView:getItems()) do
		slot5.setButton:loadTextures((slot5.setButton.teamIndex == slot0.mSetTeamIndex and "xyyz_42.png") or "xyyz_41.png", )
		slot5.setButton.teamIndexLabel:setColor((slot5.setButton.teamIndex == slot0.mSetTeamIndex and cc.c3b(255, 255, 255)) or cc.c3b(0, 0, 0))
		slot5.setButton.enoughSprite:setVisible(not slot0.isEnoughPersonByTeamIndex(slot0, slot5.setButton.teamIndex) and next(CitywarQueueConfig.items[slot5.setButton.teamIndex] or {}) ~= nil and CitywarQueueConfig.items[slot5.setButton.teamIndex] or {}.needPlayerLv <= PlayerAttrObj:getPlayerAttrByName("Lv"))

		if not slot0.isControlByTeamIndex(slot0, slot5.setButton.teamIndex) or not slot10 then
			slot5.setButton.keySprite:setVisible(slot0.mIsControlState or not slot10)
			slot5.setButton:setEnabled(not slot0.mIsControlState)
		end
	end

	return 
end
slot0.onTeamBtnClickAction = function (slot0, slot1)
	if PlayerAttrObj:getPlayerAttrByName("Lv") < CitywarQueueConfig.items[slot1.teamIndex].needPlayerLv then
		ui.showFlashView(TR("等级不足，不能继续新建队伍"))

		return 
	end

	dump(slot1.teamIndex)

	if slot1.teamIndex == #slot0.mCityTeamsList then
		if slot0.isCreatNewTeam(slot0) then
			slot0.addOneModelTeamList(slot0)
			slot0.createOneTeamListCell(slot0, #slot0.mCityTeamsList)
			ui.setListviewItemShow(slot0.teamsListView, #slot0.mCityTeamsList)
		else
			ui.showFlashView(TR("人数不足，不能继续新建队伍"))

			return 
		end
	end

	for slot7, slot8 in ipairs(slot0.teamsListView:getItems()) do
		slot10 = nil

		slot8.setButton.teamIndexLabel:setString((PlayerAttrObj:getPlayerAttrByName("Lv") >= CitywarQueueConfig.items[slot7].needPlayerLv or TR("%d级", slot9)) and ((slot7 == #slot0.mCityTeamsList and "+") or Utility.getChineseNum(slot7)))
	end

	slot0.mSetTeamIndex = slot1.teamIndex

	slot0.refreshTeamBtnState(slot0)
	slot0.refreshTeamInfo(slot0)

	return 
end
slot0.refreshTeamInfo = function (slot0)
	slot1 = ""
	slot2 = slot0.mCityTeamsList[slot0.mSetTeamIndex].HeroInfoList

	for slot6 = 1, 5, 1 do
		slot1 = slot1 .. (slot2[slot6] or {}.HeroModelId or 0)

		if slot6 < 5 then
			slot1 = slot1 .. ","
		end
	end

	slot0.currSlotString = slot1 .. "," .. (slot0.mCityTeamsList[slot0.mSetTeamIndex].StrategyId or 0)

	for slot6 = 1, slot0, 1 do
		if slot0.selectHeroList[slot6] ~= nil and 0 < slot7 then
			slot0.heroUnWork(slot0, slot6)
			slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot7))
		end
	end

	for slot6, slot7 in ipairs(string.split(slot0.currSlotString, ",")) do
		slot8 = tonumber(slot7) or 0

		if slot6 == slot1 then
			slot0.selectStrategy(slot0, slot8)

			break
		end

		if 0 < slot8 then
			slot0.heroToWork(slot0, slot8, slot6)
			slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot8))
		end
	end

	slot0.refreshUIState(slot0)

	return 
end
slot0.onCampAction = function (slot0)
	if not slot0.isControlByTeamIndex(slot0, slot0.mSetTeamIndex) then
		ui.showFlashView(TR("当前队伍信息不能更改"))

		return 
	end

	for slot4 = 1, slot0, 1 do
		if slot0.selectHeroList[slot4] ~= nil and 0 < slot5 then
			slot0.heroUnWork(slot0, slot4)
			slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot5))
		end
	end

	slot1 = {}

	for slot5, slot6 in ipairs(slot0.mDataList) do
		if 5 <= #slot1 then
			break
		end

		slot7, slot8 = slot0.getItemHpAndRp(slot0, slot6)
		slot9, slot10 = slot0.isHeroAlreadyInTeam(slot0, slot6.ModelId)

		if (slot7 == nil or 0 < slot7) and slot9 == 0 and slot0.isHeroIgnore(slot0, slot6.ModelId) == false and slot0.isHeroGotoWar(slot0, slot6.ModelId) == false and slot0.isHeroGotoWork(slot0, slot6.ModelId) == false and slot0.isHeroSelected(slot0, slot6.ModelId) == false and slot0.isLimitNumOver(slot0) == false then
			if slot0.isMainCityWar then
				if not slot6.RevivalTime then
					table.insert(slot1, slot6.ModelId)
				elseif slot6.RevivalTime and slot6.RevivalTime <= Player:getCurrentTime() then
					table.insert(slot1, slot6.ModelId)
				end
			else
				table.insert(slot1, slot6.ModelId)
			end
		end
	end

	table.sort(slot1, function (slot0, slot1)
		slot3 = HeroModel.items[slot1].profession
		slot4 = 0
		slot5 = 0

		if HeroModel.items[slot0].profession == 1 or slot2 == 3 or slot2 == 5 then
			slot4 = 1
		end

		if slot3 == 1 or slot3 == 3 or slot3 == 5 then
			slot5 = 1
		end

		return slot5 < slot4
	end)

	for slot5, slot6 in pairs(slot1) do
		slot0.selectOneHero(slot0, slot6)
	end

	slot0.refreshUIState(slot0)

	return 
end
slot0.onReadyAction = function (slot0)
	dump(slot0.mCityTeamsList, "self.mCityTeamsList")

	for slot4 = 1, #slot0.mCityTeamsList - 1, 1 do
		if not slot0.isEnoughPersonByTeamIndex(slot0, slot4) then
			ui.showFlashView(TR("第%s编队人数不足~~", slot4))

			return 
		end
	end

	if #slot0.mCityTeamsList == 1 then
		ui.showFlashView(TR("人数不足, 无法编队"))

		slot1, slot2 = Guide.manager:getGuideInfo()

		if slot2 == 800603 then
			Guide.manager:resetCurrentGuide(800603)
			ui.showMessageBox({
				titleText = TR("提示"),
				text = TR("人物不足，可通过主线任务获取"),
				okCallback = function (...)
					LayerManager.addLayer({
						name = "home.HomeLayer"
					})

					return 
				end,
				msgBoxParams = {
					needTouchClose = false,
					hideCloseButton = true
				}
			})
		else
			LayerManager.addLayer({
				cleanUp = false,
				name = "commonlayer.HeroGetwayPopLayer",
				zOrder = Enums.ZOrderType.ePopLayer
			})
		end

		return 
	end

	slot1 = {}
	slot2 = {}

	for slot6 = 1, #slot0.mCityTeamsList - 1, 1 do
		if slot0.isControlByTeamIndex(slot0, slot6) then
			table.insert(slot1, slot0.mCityTeamsList[slot6].TeamId)
			table.insert(slot2, slot0.getSlotListByTeamIndex(slot0, slot6))
		end
	end

	dump(slot1, "teamsIdList")
	dump(slot2, "newSlotList")

	if slot0.callback then
		slot0.callback(slot1, slot2)
	end

	LayerManager.removeLayer(slot0)

	return 
end
slot0.onCreateGridAction = function (slot0, slot1, slot2, slot3)
	slot4 = slot1.getContentSize(slot1)
	slot6 = slot0.createHeroHeader(slot0, slot5)
	slot7, slot8 = slot0.isHeroSelected(slot0, slot0.mDataList[slot2].ModelId)

	if slot7 == true then
		slot6.cardNode.mHeaderSprite:setGLProgram(slot9)

		if slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eStar).node ~= nil then
			slot11 = pairs
			slot12 = slot10.starImgList or {}

			for slot14, slot15 in slot11(slot12) do
				slot15.setGLProgram(slot15, slot9)
			end

			slot11 = pairs
			slot12 = slot10.exStarImgList or {}

			for slot14, slot15 in slot11(slot12) do
				slot15.setGLProgram(slot15, slot9)
			end
		end

		slot12 = slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eProgress).rpProgress1
		slot13 = slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eProgress).rpProgress2

		if slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eProgress).hpProgress ~= nil then
			slot11.mBarSprite:setColor(cc.c3b(180, 180, 180))
		end

		if slot12 ~= nil then
			slot12.mBarSprite:setColor(cc.c3b(180, 180, 180))
		end

		if slot13 ~= nil then
			slot13.mBarSprite:setColor(cc.c3b(180, 180, 180))
		end

		slot6.nameLabel:setOpacity(180)
	end

	slot6.selectSprite:setVisible(slot7)
	slot6.setAnchorPoint(slot6, cc.p(0.5, 0.5))
	slot6.setPosition(slot6, slot4.width/2, slot4.height/2)
	slot1.addChild(slot1, slot6)

	slot1.itemLayout = slot6

	return 
end
slot0.onStrategyBtnClickAction = function (slot0)
	if not Utility.moduleIsOpen(ModuleSub.eNewZhenfa, true) then
		return 
	end

	if not slot0.checkStrategyEnable(slot0) then
		ui.showFlashView(TR("【当前功能不允许使用阵法】"))

		return 
	end

	if not slot0.isControlByTeamIndex(slot0, slot0.mSetTeamIndex) or false then
		if slot0.mCityTeamsList[slot0.mSetTeamIndex].Type == slot0.campground then
			ui.showFlashView("不能修改大营里的队伍！")
		elseif slot1.State ~= slot1.idle then
			ui.showFlashView("只能修改处于空闲状态的队伍！")
		end

		return 
	end

	if slot0.getSelectHeroCount(slot0) ~= ZhenfaConfig.items[1].needHeroNum then
		ui.showFlashView(TR("【需五人队伍才能结阵】"))

		return 
	end

	slot0.getStratageList(slot0)

	return 
end
slot0.onControlTeamsBtnAction = function (slot0, slot1)
	slot0.mIsControlState = not slot0.mIsControlState

	slot1.loadTextures(slot1, (slot0.mIsControlState and "dwzt_14.png") or "dwzt_15.png", )
	slot0.refreshTeamBtnState(slot0)
	slot0.selectOneProfession(slot0)

	return 
end
slot0.selectOneProfession = function (slot0)
	slot1 = {}

	function slot2(slot0)
		for slot4, slot5 in pairs(HeroObj:getListByProfession(slot0)) do
			if slot0.mIsControlState then
				if slot0:isControlByHeroModelId(slot5.ModelId) then
					table.insert(slot1, slot5)
				end
			else
				table.insert(slot1, slot5)
			end
		end

		return 
	end

	for slot6 = 1, 5, 1 do
		slot2(slot6)
	end

	slot0.mDataList = clone(slot1)

	if slot0.isMainCityWar then
		for slot6, slot7 in ipairs(slot0.mDataList) do
			for slot11, slot12 in ipairs(slot0.revivalInfo) do
				if slot7.ModelId == slot12.HeroModelId then
					slot7.RevivalNum = slot12.RevivalNum
					slot7.RevivalTime = slot12.RevivalTime
				end
			end
		end
	end

	table.sort(slot0.mDataList, function (slot0, slot1)
		if ((15 <= HeroModel.items[slot0.ModelId].quality and 1) or 0) == ((15 <= HeroModel.items[slot1.ModelId].quality and 1) or 0) then
			return slot1.Fap < slot0.Fap
		else
			return slot3 < slot2
		end

		return 
	end)
	slot0.mHeroGridView:setItemNum(#slot0.mDataList)

	return 
end
slot0.selectOneHero = function (slot0, slot1)
	slot2, slot3 = slot0.isHeroSelected(slot0, slot1)

	if slot2 == true then
		if slot0.isControlByTeamIndex(slot0, slot0.mSetTeamIndex) then
			slot0.heroUnWork(slot0, slot3)
		elseif slot0.mCityTeamsList[slot0.mSetTeamIndex].Type == slot0.campground then
			ui.showFlashView("不能修改大营里的队伍！")

			return 
		elseif slot4.State ~= slot1.idle then
			ui.showFlashView("只能修改处于空闲状态的队伍！")

			return 
		end
	else
		slot5, slot6 = slot0.getItemHpAndRp(slot0, slot0.mDataList[slot0.getHeroDataIndex(slot0, slot1)])

		if slot5 ~= nil and slot5 == 0 then
			ui.showFlashView(TR("该侠客已经阵亡，不能出战！"))

			return 
		end

		if slot0.isMainCityWar and slot4.RevivalTime and Player:getCurrentTime() < slot4.RevivalTime then
			ui.showFlashView(TR("该侠客已经阵亡，不能出战！"))

			return 
		end

		if slot0.isHeroGotoWar(slot0, slot1) == true then
			ui.showFlashView(TR("该侠客已在其他地方出战，不能再次选择！"))

			return 
		end

		if slot0.isHeroGotoWork(slot0, slot1) == true then
			ui.showFlashView(TR("该侠客已经上阵，不能再次选择！"))

			return 
		end

		if slot0.findEmptyGrid(slot0) == 0 then
			ui.showFlashView(TR("出战阵容已满员"))

			return 
		end

		if slot0.isLimitNumOver(slot0) then
			ui.showFlashView(TR("限制上阵%s人", slot0.limitCount))

			return 
		end

		slot8, slot9 = slot0.isHeroAlreadyInTeam(slot0, slot1)

		if 0 < slot8 and slot8 ~= 2 then
			ui.showFlashView(TR("该侠客已经出战，不能再次选择！"))

			return 
		end

		if not slot0.isControlByHeroModelId(slot0, slot1) then
			ui.showFlashView(TR("该侠客处于不能操作的队伍中，不能再次选择！"))

			return 
		end

		slot0.heroToWork(slot0, slot1, slot7)
	end

	slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot1))

	return 
end
slot0.heroToWork = function (slot0, slot1, slot2)
	for slot6, slot7 in ipairs(slot0.mCityTeamsList) do
		for slot11, slot12 in ipairs(slot7.HeroInfoList) do
			if slot12.HeroModelId == slot1 then
				slot12.HeroModelId = 0

				break
			end
		end
	end

	slot0.mCityTeamsList[slot0.mSetTeamIndex].HeroInfoList[slot2].HeroModelId = slot1

	slot0.refreshTeamBtnState(slot0)

	slot4 = slot0.createFigureHero(slot0, slot0.mDataList[slot0.getHeroDataIndex(slot0, slot1)], true)

	slot4.setIgnoreAnchorPointForPosition(slot4, false)
	slot4.setAnchorPoint(slot4, cc.p(0.5, 0.5))
	slot4.setPosition(slot4, slot3)
	slot4.setLocalZOrder(slot4, slot0.getZorderByIndex(slot0, slot2))
	slot4.setScale(slot4, (slot0.headerNodeList[slot2].pos.y*0.3)/190 - 1.3)
	slot0.mBgCampInfo:addChild(slot4)

	slot0.headerNodeList[slot2].node = slot4
	slot0.headerNodeList[slot2].zorder = slot0.getZorderByIndex(slot0, slot2)
	slot0.headerNodeList[slot2].scale = (slot0.headerNodeList[slot2].pos.y*0.3)/190 - 1.3
	slot0.selectHeroList[slot2] = slot1

	return 
end
slot0.createFigureHero = function (slot0, slot1)
	return UIWrap.newControl("FigureHero", {
		async = true,
		heroModelId = slot1.ModelId,
		pos = cc.p(0, 0),
		clickAction = function ()
			slot0:selectOneHero(slot1.ModelId)

			if not tolua.isnull(tolua.isnull) then
				slot0:refreshUIState()
			end

			return 
		end
	})
end
slot0.heroUnWork = function (slot0, slot1)
	slot0.headerNodeList[slot1].node:removeFromParent()

	slot0.headerNodeList[slot1].node = nil
	slot0.selectHeroList[slot1] = 0
	slot0.mCityTeamsList[slot0.mSetTeamIndex].HeroInfoList[slot1].HeroModelId = 0

	slot0.refreshTeamBtnState(slot0)

	if slot0.checkStrategyEnable(slot0) and slot0.findEmptyGrid(slot0) then
		slot0.selectStrategy(slot0)
	end

	return 
end
slot0.refreshUIState = function (slot0)
	slot1 = 0
	slot2 = 0
	slot3 = PlayerAttrObj:getPlayerAttrByName("Lv")

	for slot7 = 1, slot0, 1 do
		slot1 = slot1 + (HeroObj:getItem(slot0.selectHeroList[slot7] or 0) or {}.Fap or 0)
		slot2 = slot2 + Utility.getNeedVitByFap(HeroObj.getItem(slot0.selectHeroList[slot7] or 0) or {}.Fap or 0)
	end

	if 0 < slot1 then
		slot1 = slot1 + Player:getGameData("Push_SkillTotalFap")
	end

	if slot0.isPvp then
		slot2 = PvpLvUseConfig.items[slot3].vitUse
	elseif slot0.isPve and next(slot0.pveData) then
		slot2 = PveNodeModel.items[slot0.pveData.chapterId][slot0.pveData.nodeId].nodeBattleNeed
	end

	slot0.mTotalResNeed = slot2

	if slot0.mVitCostR then
		slot0.mTotalResNeed = math.floor(slot0.mTotalResNeed*(slot0.mVitCostR - 1))
	end

	slot0.mFapLabel:setString(Utility.numberWithUnit(slot1))
	slot0.mResNeedLabel:setString(Utility.numberWithUnit(slot0.mTotalResNeed))
	slot0.mCountLabel:setString(TR("出战阵容 (%d/%d)", slot0.getSelectHeroCount(slot0), slot0))

	if slot0.limitCount ~= 0 then
		slot0.mCountLabel:setString(TR("出战阵容 (%d/%d)", slot0.getSelectHeroCount(slot0), slot0.limitCount))
	end

	return 
end
slot0.createHeroHeader = function (slot0, slot1, slot2)
	slot3 = {
		Enums.CardShowAttr.eLevel,
		Enums.CardShowAttr.eStar,
		Enums.CardShowAttr.eTrainLv
	}

	if slot0.showStatusBar == true then
		table.insert(slot3, Enums.CardShowAttr.eProgress)
	end

	slot4, slot5, slot6 = slot0.getItemHpAndRp(slot0, slot1)

	if slot5 == nil then
		slot5 = cjson.decode(HeroObj:getItem(slot1.ModelId).AttrContent or "").Ang
	end

	slot7, slot8, slot9, slot10 = Utility.getHeroCampProfessionImg(slot1.ModelId)
	slot11, slot12 = Utility.getColorValue(HeroTrainColorlvRelation.items[slot1.TrainLv].colorLv, true)

	if (slot4 ~= nil and slot4 == 0) or slot0.isHeroIgnore(slot0, slot1.ModelId) == true then
		slot12 = ""
	end

	slot0.createLayoutTemplateNode(slot0, "heroTemplateNode", {
		professionImg = slot8,
		nameText = slot12 .. Resource.getName(slot1.ModelId)
	}).cardNode:setCardData(nil, slot3, slot1)
	slot0.createLayoutTemplateNode(slot0, "heroTemplateNode", {
		professionImg = slot8,
		nameText = slot12 .. Resource.getName(slot1.ModelId)
	}).cardNode:setClickAction(function ()
		slot0:selectOneHero(slot1.ModelId)

		if not tolua.isnull(tolua.isnull) then
			slot0:refreshUIState()
		end

		return 
	end)

	if not slot2 then
		if slot0.showStatusBar == true then
			if slot4 then
				slot14.cardNode:setHpProgressValue(slot4, slot6)
			end

			if slot5 then
				slot14.cardNode:setRpProgressValue(slot5)
			end
		end

		if slot4 ~= nil and slot4 == 0 then
			slot14.professionSprite:setGray(true)
			slot14.cardNode:setGray()
			slot14.deadSprite:setVisible(true)
		elseif slot0.isHeroIgnore(slot0, slot1.ModelId) == true then
			slot14.professionSprite:setGray(true)
			slot14.cardNode:setGray()
			slot14.disableSprite:setVisible(true)
			slot14.cardNode:setClickAction(function ()
				if 0 < slot0.minTrainLv then
					ui.showFlashView(TR("%s侠客才能参与", Utility.getColorName(HeroTrainColorlvRelation.items[slot0.minTrainLv].colorLv)))
				end

				return 
			end)
		else
			slot15, slot16 = slot0.isHeroAlreadyInTeam(slot0, slot1.ModelId)

			if 0 < slot15 then
				slot14.inTeamSprite:setVisible(true)
				slot14.indexSprite:setVisible(true)
				slot14.indexSprite.label:setString(slot16)
				slot14.cardNode:setGray()
			else
				slot14.otherWarSprite:setVisible(slot0.isHeroGotoWar(slot0, slot1.ModelId))
				slot14.gotoWorkSprite:setVisible(slot0.isHeroGotoWork(slot0, slot1.ModelId))
			end
		end
	end

	if slot0.isMainCityWar then
		if slot1.RevivalTime and Player:getCurrentTime() < slot1.RevivalTime and not slot2 then
			slot14.deadSprite:setVisible(true)
			slot14.professionSprite:setGray(true)
			slot14.cardNode:setGray()
		end

		if slot1.RevivalTime and Player:getCurrentTime() < slot1.RevivalTime then
			slot14.revivalNode:setVisible(true)

			slot15 = Utility.schedule(slot14, function ()
				if 0 < slot0.RevivalTime - Player:getCurrentTime() then
					slot1.revivalNode.timeLabel:setString(MqTime.formatAsDay(slot0))
				else
					slot1.revivalNode:setVisible(false)
					slot1.revivalNode.setVisible:stopAllActions()

					revivalTimeSch = nil

					slot2.mHeroGridView:refreshCell(slot2:getHeroDataIndex(slot0.ModelId))

					for slot4, slot5 in ipairs(slot2.mHeroGridView.mCityTeamsList) do
						for slot9, slot10 in ipairs(slot5.HeroInfoList) do
							if slot10.HeroModelId == slot0.ModelId then
								slot5.State = slot3.idle

								break
							end
						end
					end
				end

				return 
			end, 1)
		end
	end

	return slot14
end
slot0.selectStrategy = function (slot0, slot1)
	if not slot0.checkStrategyEnable(slot0) then
		return 
	end

	slot2 = ZhenfaModel.items[slot1]

	if not slot1 or not slot2 then
		slot0.mStratageID = 0

		slot0.strategyBtn:loadTextures("tb_gn_31.png", "tb_gn_31.png")
		slot0.strategyText:setColor(cc.c3b(255, 255, 255))
		slot0.strategyText:setString(TR("点击添加阵法"))

		slot0.mCityTeamsList[slot0.mSetTeamIndex].StrategyId = 0

		return 
	end

	slot0.mStratageID = slot1

	if slot2.pic ~= "" then
		slot0.strategyBtn:loadTextures(slot2.uiPic .. ".png", slot2.uiPic .. ".png")
		slot0.strategyText:setString(slot2.name)
		slot0.strategyText:setColor(Utility.getColorValue(slot2.colorLv))
	end

	for slot6, slot7 in ipairs(slot0.mCityTeamsList) do
		if slot7.StrategyId == slot1 then
			slot7.StrategyId = 0

			break
		end
	end

	slot0.mCityTeamsList[slot0.mSetTeamIndex].StrategyId = slot1

	return 
end
slot0.getClickItem = function (slot0, slot1, slot2)
	slot3 = nil

	for slot7, slot8 in ipairs(slot0.headerNodeList) do
		if slot8.pos.x - 60 <= slot1 and slot1 <= slot8.pos.x + 60 and slot8.pos.y - 20 <= slot2 and slot2 <= slot8.pos.y + 180 then
			slot3 = slot8

			break
		end
	end

	return slot3
end
slot0.onBeganEvent = function (slot0, slot1, slot2)
	slot0.lastClickPos = nil
	slot0.lastNodePos = nil
	slot0.clickItem = slot0.getClickItem(slot0, slot1, slot2)

	if slot0.clickItem ~= nil and slot0.clickItem.node ~= nil then
		slot0.clickItem.node:setLocalZOrder(5)

		slot0.lastNodePos = slot0.clickItem.pos
	else
		slot0.clickItem = nil
	end

	return 
end
slot0.onMovedEvent = function (slot0, slot1, slot2)
	if slot0.clickItem == nil or slot0.clickItem.node == nil or slot0.lastNodePos == nil then
		return 
	end

	if slot0.lastClickPos == nil then
		slot0.lastClickPos = cc.p(slot1, slot2)
	else
		slot4 = slot2 - slot0.lastClickPos.y

		if 3 <= math.abs(slot3) or 3 <= math.abs(slot4) then
			slot0.lastNodePos = cc.p(slot0.lastNodePos.x + slot3, slot0.lastNodePos.y + slot4)

			slot0.clickItem.node:setPosition(slot0.lastNodePos)
			slot0.clickItem.node:setScale((slot0.lastNodePos.y*0.3)/190 - 1.3)

			slot0.lastClickPos = cc.p(slot1, slot2)
		end
	end

	return 
end
slot0.onEndedEvent = function (slot0, slot1, slot2)
	if slot0.clickItem == nil or slot0.clickItem.node == nil or slot0.lastClickPos == nil then
		return 
	end

	if slot0.getClickItem(slot0, slot1, slot2) ~= nil and slot3.index ~= slot0.clickItem.index then
		if slot3.node ~= nil then
			slot3.node:runAction(cc.MoveTo:create(0.1, slot0.clickItem.pos))
			slot3.node:setLocalZOrder(slot0.getZorderByIndex(slot0, slot0.clickItem.index))
			slot3.node:setScale((slot0.clickItem.pos.y*0.3)/190 - 1.3)
		end

		slot0.clickItem.node:runAction(cc.MoveTo:create(0.1, slot3.pos))
		slot0.clickItem.node:setLocalZOrder(slot0.getZorderByIndex(slot0, slot3.index))
		slot0.clickItem.node:setScale((slot3.pos.y*0.3)/190 - 1.3)

		slot0.headerNodeList[slot0.clickItem.index].node = slot3.node
		slot0.headerNodeList[slot3.index].node = slot0.clickItem.node
		slot0.selectHeroList[slot0.clickItem.index] = slot0.selectHeroList[slot3.index]
		slot0.selectHeroList[slot3.index] = slot0.selectHeroList[slot0.clickItem.index]
		slot0.mCityTeamsList[slot0.mSetTeamIndex].HeroInfoList[slot0.clickItem.index].HeroModelId = slot0.selectHeroList[slot0.clickItem.index]
		slot0.mCityTeamsList[slot0.mSetTeamIndex].HeroInfoList[slot3.index].HeroModelId = slot0.selectHeroList[slot3.index]
	else
		slot0.clickItem.node:runAction(cc.MoveTo:create(0.1, slot0.clickItem.pos))
		slot0.clickItem.node:setLocalZOrder(slot0.getZorderByIndex(slot0, slot0.clickItem.index))
		slot0.clickItem.node:setScale((slot0.clickItem.pos.y*0.3)/190 - 1.3)
	end

	slot0.clickItem = nil
	slot0.lastClickPos = nil
	slot0.lastNodePos = nil

	return 
end
slot0.getHeroDataIndex = function (slot0, slot1)
	for slot5, slot6 in ipairs(slot0.mDataList) do
		if slot6.ModelId == slot1 then
			return slot5
		end
	end

	return 0
end
slot0.findEmptyGrid = function (slot0)
	slot1 = 0

	for slot5 = 1, slot0, 1 do
		if slot0.selectHeroList[slot5] == nil or slot6 == 0 then
			slot1 = slot5

			break
		end
	end

	return slot1
end
slot0.isHeroGotoWar = function (slot0, slot1)
	slot2 = pairs
	slot3 = slot0.alreadyGotoWar or {}

	for slot5, slot6 in slot2(slot3) do
		if slot6 == slot1 then
			return true
		end
	end

	return false
end
slot0.isHeroGotoWork = function (slot0, slot1)
	slot2 = pairs
	slot3 = slot0.alreadyGotoWork or {}

	for slot5, slot6 in slot2(slot3) do
		if slot6 == slot1 then
			return true
		end
	end

	return false
end
slot0.isHeroAlreadyInTeam = function (slot0, slot1)
	if #slot0.mCityTeamsList == nil then
		return 0
	end

	for slot5, slot6 in ipairs(slot0.mCityTeamsList) do
		for slot10, slot11 in ipairs(slot6.HeroInfoList) do
			if slot11.HeroModelId == slot1 then
				if slot6.State == 4 then
					return 2, slot5

					break
				end

				if slot6.State then
					return 1, slot5
				end

				break
			end
		end
	end

	return 0
end
slot0.isHeroIgnore = function (slot0, slot1)
	slot2 = pairs
	slot3 = slot0.ignoreHeroList or {}

	for slot5, slot6 in slot2(slot3) do
		if slot6 == slot1 then
			return true
		end
	end

	if HeroModel.items[slot1] == nil then
		return true
	end

	slot3 = pairs
	slot4 = slot0.ignoreCampList or {}

	for slot6, slot7 in slot3(slot4) do
		if slot7 == slot2.camp then
			return true
		end
	end

	slot3 = pairs
	slot4 = slot0.ignoreProfessionList or {}

	for slot6, slot7 in slot3(slot4) do
		if slot7 == slot2.profession then
			return true
		end
	end

	if slot0.ignoreSexId ~= nil and slot0.ignoreSexId == slot2.sex then
		return true
	end

	if 0 < slot0.minTrainLv then
		slot3 = nil

		for slot7, slot8 in ipairs(slot0.mDataList) do
			if slot8.ModelId == slot1 then
				slot3 = slot8

				break
			end
		end

		if slot3 then
			return slot3.TrainLv < slot0.minTrainLv
		else
			return true
		end
	end

	return false
end
slot0.isHeroSelected = function (slot0, slot1)
	for slot5, slot6 in pairs(slot0.selectHeroList) do
		if slot6 == slot1 then
			return true, slot5
		end
	end

	return false
end
slot0.getSelectHeroCount = function (slot0)
	slot1 = 0

	for slot5 = 1, slot0, 1 do
		if slot0.selectHeroList[slot5] ~= nil and 0 < slot6 then
			slot1 = slot1 + 1
		end
	end

	return slot1
end
slot0.getItemHpAndRp = function (slot0, slot1)
	slot2, slot3, slot4 = nil
	slot5 = pairs
	slot6 = slot0.statusList or {}

	for slot8, slot9 in slot5(slot6) do
		if slot9.ModelId == slot1.ModelId then
			slot4 = slot9.TotalHP
			slot3 = slot9.Ang
			slot2 = slot9.Hp

			break
		end
	end

	return slot2, slot3, slot4
end
slot0.onPopActionOver = function (slot0)
	slot0.selectOneProfession(slot0)

	for slot4, slot5 in ipairs(string.split(slot0.currSlotString, ",")) do
		slot6 = tonumber(slot5) or 0

		if slot4 == slot0 then
			slot0.selectStrategy(slot0, slot6)

			break
		end

		if 0 < slot6 then
			slot0.heroToWork(slot0, slot6, slot4)
		end
	end

	slot0.refreshUIState(slot0)
	slot0.addOneModelTeamList(slot0)

	if not slot0.mSetTeamIndex then
		if slot0.isCreatNewTeam(slot0) then
			slot0.addOneModelTeamList(slot0)

			slot0.mSetTeamIndex = #slot0.mCityTeamsList - 1
		else
			slot0.mSetTeamIndex = 1
		end
	end

	slot0.refreshTeamsList(slot0)
	slot0.executeGuide(slot0)

	return 
end
slot0.isLimitNumOver = function (slot0)
	if slot0.limitCount == 0 then
		return false
	elseif slot0.getSelectHeroCount(slot0) < slot0.limitCount then
		return false
	else
		return true
	end

	return 
end
slot0.checkStrategyEnable = function (slot0)
	return ((ZhenfaFightenumConfig.items[slot0.mCallModelSub] and true) or false) and Utility.moduleIsOpen(ModuleSub.eNewZhenfa, false)
end
slot0.isEnoughPersonByTeamIndex = function (slot0, slot1)
	if not slot0.mCityTeamsList[slot1] then
		return false
	end

	slot2 = 0

	for slot6, slot7 in ipairs(slot0.mCityTeamsList[slot1].HeroInfoList) do
		if slot7.HeroModelId and 0 < slot7.HeroModelId then
			slot2 = slot2 + 1
		end
	end

	return slot0.minCount <= slot2
end
slot0.isControlByTeamIndex = function (slot0, slot1)
	slot2 = slot0.mCityTeamsList[slot1]

	if PlayerAttrObj:getPlayerAttrByName("Lv") < CitywarQueueConfig.items[slot1].needPlayerLv then
		return false
	end

	if slot2 then
		return slot2.Type ~= slot0.campground and slot2.State == slot1.idle
	end

	return 
end
slot0.getControlTeamNum = function (slot0)
	if next(slot0.mCityTeamsList) == nil then
		return 0
	end

	slot1 = 0

	for slot5, slot6 in ipairs(slot0.mCityTeamsList) do
		if slot0.isControlByTeamIndex(slot0, slot5) then
			slot1 = slot1 + 1
		end
	end

	return slot1
end
slot0.isControlByHeroModelId = function (slot0, slot1)
	if next(slot0.mCityTeamsList) == nil then
		return true
	end

	for slot5, slot6 in ipairs(slot0.mCityTeamsList) do
		for slot10, slot11 in ipairs(slot6.HeroInfoList) do
			if slot11.HeroModelId == slot1 then
				return slot0.isControlByTeamIndex(slot0, slot5)
			end
		end
	end

	return not slot0.isHeroIgnore(slot0, slot1)
end
slot0.isCreatNewTeam = function (slot0)
	slot1 = {}

	function slot2(slot0)
		for slot4, slot5 in pairs(HeroObj:getListByProfession(slot0)) do
			if slot0:isControlByHeroModelId(slot5.ModelId) then
				table.insert(slot1, slot5)
			end
		end

		return 
	end

	for slot6 = 1, 5, 1 do
		slot2(slot6)
	end

	return slot0.minCount <= #slot1 - (slot0.getControlTeamNum(slot0) - 1)*slot0.minCount
end
slot0.getStratageList = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "GetInfo",
		moduleName = "Zhenfa",
		methodData = {
			0
		},
		successCallback = function (slot0)
			slot1 = {}
			slot2 = {}
			slot3 = pairs
			slot4 = slot0.StrategyList or {}

			for slot6, slot7 in slot3(slot4) do
				slot8 = false

				for slot12, slot13 in ipairs(slot0.mCityTeamsList) do
					if slot13.StrategyId == slot7 then
						slot8 = true

						if slot0:isControlByTeamIndex(slot12) then
							table.insert(slot1, slot7)
							table.insert(slot2, slot7)
						end

						break
					end
				end

				if not slot8 then
					table.insert(slot1, slot7)
				end
			end

			LayerManager.addLayer({
				cleanUp = false,
				name = "strategy.StrategySelectLayer",
				zOrder = Enums.ZOrderType.ePopLayer,
				data = {
					modleId = slot0.mCallModelSub,
					selectCallBack = function (slot0)
						slot0:selectStrategy(slot0)

						return 
					end,
					stratageList = slot1,
					inTeamsList = slot2
				}
			})

			return 
		end
	})

	return 
end
slot0.getSlotListByTeamIndex = function (slot0, slot1)
	slot2 = {}

	for slot7, slot8 in ipairs(slot0.mCityTeamsList[slot1].HeroInfoList) do
		table.insert(slot2, slot8.HeroModelId)
	end

	if slot0.checkStrategyEnable(slot0) then
		table.insert(slot2, slot3.StrategyId)
	end

	return table.concat(slot2, ",")
end
slot0.addOneModelTeamList = function (slot0)
	table.insert(slot0.mCityTeamsList, {
		StrategyId = 0,
		ChapterModelId = 0,
		State = 4,
		Type = 1,
		HeroInfoList = {
			{
				HeroModelId = 0,
				IfDead = false
			},
			{
				HeroModelId = 0,
				IfDead = false
			},
			{
				HeroModelId = 0,
				IfDead = false
			},
			{
				HeroModelId = 0,
				IfDead = false
			},
			{
				HeroModelId = 0,
				IfDead = false
			}
		},
		TeamId = (slot0.mCallModelSub == ModuleSub.eLeaguetopFinal and #slot0.mCityTeamsList + 1) or Utility.EMPTY_ENTITY_ID
	})

	return 
end
slot0.executeGuide = function (slot0)
	Guide.manager:exeGuideList({
		[800601] = {
			clickNode = slot0.oneKeySetBtn
		},
		[800602] = {
			clickNode = slot0.mOkBtn
		}
	})

	return 
end

return slot0
