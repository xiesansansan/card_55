slot0 = class("JzwlReviveLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false,
		color = cc.c4b(0, 0, 0, 150)
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "MsgBoxBg",
		params = {
			image = "tc_2.png"
		},
		children = {
			{
				name = "untitled2",
				cType = "Label",
				params = {
					fontSize = 30,
					color = {
						g = 238,
						r = 255,
						b = 208
					},
					outlineColor = {
						g = 28,
						r = 58,
						b = 18
					},
					pos = {
						x = 295.92,
						y = 538.69
					},
					text = TR("侠客复活")
				},
				children = {}
			},
			{
				name = "untitled3",
				cType = "Button",
				params = {
					image = "c_13.png",
					clickAction = "onRevival",
					pos = {
						x = 497.13,
						y = 64.72
					},
					titleText = TR("治 愈")
				},
				children = {}
			},
			{
				name = "untitled4",
				cType = "Button",
				params = {
					image = "c_70.png",
					clickAction = "onClickHeroRevive",
					pos = {
						x = 94.51,
						y = 64.17
					},
					titleText = TR("全部治愈")
				},
				children = {}
			},
			{
				name = "mCostLabel",
				cType = "Label",
				params = {
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 34,
						r = 69,
						b = 13
					},
					pos = {
						x = 171.1,
						y = 63.76
					},
					text = TR("消耗道具：")
				},
				children = {}
			},
			{
				name = "untitled6",
				cType = "Scale9Sprite",
				params = {
					image = "c_72.png",
					pos = {
						x = 294.64,
						y = 302.2
					},
					size = {
						width = 525.18,
						height = 402.9
					}
				},
				children = {}
			},
			{
				name = "mGridView",
				cType = "GridView",
				params = {
					createColCb = "onCreateGridAction",
					itemNum = 0,
					selectIndex = 1,
					colCount = 5,
					celHeight = 160,
					pos = {
						x = 294.27,
						y = 300.56
					},
					size = {
						width = 514.67,
						height = 392.86
					}
				},
				children = {
					{
						name = "heroTemplateNode",
						cType = "TemplateNode",
						custom = {
							{
								value = "untitled11-image",
								name = "professionImg",
								type = "string"
							},
							{
								value = "untitled12-text",
								name = "nameText",
								type = "string"
							},
							{
								value = "untitled16-text",
								name = "numStr",
								type = "string"
							}
						},
						params = {
							pos = {
								x = 0,
								y = 0
							},
							size = {
								width = 108,
								height = 170
							}
						},
						children = {
							{
								name = "untitled9",
								cType = "CardNode",
								params = {
									childName = "cardNode",
									allowClick = true,
									pos = {
										x = 53,
										y = 97
									}
								},
								children = {}
							},
							{
								name = "untitled10",
								cType = "Sprite",
								params = {
									image = "jfgj_22.png",
									pos = {
										x = 54,
										y = 40
									}
								},
								children = {}
							},
							{
								name = "untitled11",
								cType = "Sprite",
								params = {
									image = "c_60.png",
									childName = "professionSprite",
									anchor = {
										x = 1,
										y = 0.5
									},
									pos = {
										x = 32,
										y = 41
									}
								},
								children = {}
							},
							{
								name = "untitled12",
								cType = "Label",
								params = {
									fontSize = 18,
									text = "Label",
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 248,
										r = 255,
										b = 234
									},
									pos = {
										x = 32,
										y = 41
									}
								},
								children = {}
							},
							{
								name = "untitled13",
								cType = "Sprite",
								params = {
									childName = "selectSprite",
									image = "jfgj_24.png",
									hide = true,
									pos = {
										x = 60,
										y = 99
									}
								},
								children = {}
							},
							{
								name = "untitled16",
								cType = "Label",
								params = {
									fontSize = 20,
									childName = "revivalNumLabel",
									text = "Label",
									color = {
										g = 34,
										r = 69,
										b = 13
									},
									pos = {
										x = 54,
										y = 14
									}
								},
								children = {}
							},
							{
								name = "untitled15",
								cType = "Scale9Sprite",
								params = {
									image = "c_169.png",
									childName = "revivalNode",
									pos = {
										x = 54,
										y = 152
									},
									size = {
										width = 100,
										height = 30
									}
								},
								children = {
									{
										name = "untitled14",
										cType = "Label",
										params = {
											fontSize = 18,
											childName = "timeLabel",
											text = "Label",
											color = {
												g = 255,
												r = 55,
												b = 64
											},
											pos = {
												x = 50,
												y = 15
											}
										},
										children = {}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.revivalInfo = slot1.revivalInfo or {}
	slot0.selectHeroList = {}
	slot0.mCallback = slot1.callback
	slot0.mGuildInfo = PlayerAttrObj:getPlayerAttrByName("GuildInfo")
	slot0.mMaxReviveNum = ((slot0.mGuildInfo.PositionId ~= 0 or 0) and GuildPositionRelation.items[slot0.mGuildInfo.PositionSeriesId][slot0.mGuildInfo.PositionId].leaguetopRebornTimes) + GuildConfig.items[1].baseLeaguetopRebornTimes

	slot0.super.ctor(slot0)
	slot0.initUI(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)
	slot0.dealWithData(slot0)
	slot0.refreshUIState(slot0)

	return 
end
slot0.onExit = function (slot0)
	if slot0.mPopLayer and not tolua.isnull(slot0.mPopLayer) then
		LayerManager.removeLayer(slot0.mPopLayer)

		slot0.mPopLayer = nil
	end

	return 
end
slot0.dealWithData = function (slot0)
	slot0.mDataList = {}
	slot1 = {}

	for slot5, slot6 in pairs(slot0.revivalInfo) do
		slot8 = clone(slot7)
		slot8.RevivalTime = slot6.RevivalTime
		slot8.RevivalNum = slot6.RevivalNum

		table.insert(slot0.mDataList, slot8)
	end

	table.sort(slot0.mDataList, function (slot0, slot1)
		return slot1.Fap < slot0.Fap
	end)
	slot0.mGridView:setItemNum(slot2)
	Utility.schedule(slot0, function ()
		for slot3, slot4 in ipairs(slot0.mDataList) do
			if 0 < slot4.RevivalTime - Player:getCurrentTime() then
				if slot0.mGridView.mCellNodeList[slot3] then
					slot0.mGridView.mCellNodeList[slot3].timeLabel:setString(MqTime.formatAsDay(slot5))
				end
			else
				slot0:schRefresh()
			end
		end

		return 
	end, 1)

	return 
end
slot0.onCreateGridAction = function (slot0, slot1, slot2, slot3)
	slot6 = slot0.createHeroHeader(slot0, slot5)
	slot11, slot8 = slot0.isHeroSelected(slot0, slot0.mDataList[slot2].ModelId)

	slot6.selectSprite:setVisible(slot7)
	slot6.setScale(slot6, 0.9)
	slot6.setAnchorPoint(slot6, cc.p(0.5, 0.5))
	slot6.setPosition(slot6, slot1.getContentSize(slot1).width/2, slot1.getContentSize(slot1).height/2)
	slot1.addChild(slot1, slot6)

	slot1.timeLabel = slot6.revivalNode.timeLabel

	return 
end
slot0.isHeroSelected = function (slot0, slot1)
	for slot5, slot6 in pairs(slot0.selectHeroList) do
		if slot6 == slot1 then
			return true, slot5
		end
	end

	return false
end
slot0.selectOneHero = function (slot0, slot1)
	slot2 = 0

	for slot6, slot7 in ipairs(slot0.mDataList) do
		if slot7.ModelId == slot1 then
			slot2 = slot6

			break
		end
	end

	slot3, slot4 = slot0.isHeroSelected(slot0, slot1)

	if slot3 == true then
		table.remove(slot0.selectHeroList, slot4)
	else
		slot6 = slot0.createHeroHeader(slot0, slot5)

		slot6.setIgnoreAnchorPointForPosition(slot6, false)
		slot6.setAnchorPoint(slot6, cc.p(0.5, 0))
		slot6.setPosition(slot6, 58, 12)
		slot6.setScale(slot6, 0.9)
		table.insert(slot0.selectHeroList, slot1)
	end

	slot0.mGridView:refreshCell(slot2)
	slot0.refreshUIState(slot0)

	return 
end
slot0.createHeroHeader = function (slot0, slot1)
	slot3, slot10.professionImg, slot5, slot6 = Utility.getHeroCampProfessionImg(slot1.ModelId)
	slot7 = slot0.createLayoutTemplateNode(slot0, "heroTemplateNode", {
		professionImg = slot4,
		nameText = Resource.getName(slot1.ModelId),
		numStr = TR("复活：#258711%s/%s", slot0.mMaxReviveNum - slot1.RevivalNum, slot0.mMaxReviveNum)
	})

	slot7.cardNode:setCardData(nil, slot2, slot1)
	slot7.cardNode:setClickAction(function ()
		if slot0.mMaxReviveNum - slot1.RevivalNum <= 0 then
			ui.showFlashView(TR("该侠客复活次数已达到上限，无法主动复活"))

			return 
		end

		slot0:selectOneHero(slot1.ModelId)

		return 
	end)
	slot7.revivalNode.timeLabel:setString(MqTime.formatAsDay(slot1.RevivalTime - Player:getCurrentTime()))

	return slot7
end
slot0.refreshUIState = function (slot0)
	slot5, slot4 = slot0.getPerPrice(slot0)

	slot0.mCostLabel:setString(string.format("消耗道具：{%s}%s%d/%d", Resource.getDaibiImg(slot2), (Resource.isEnough(slot2, slot1, false) and "#258711") or "#EA2C00", slot1, Resource.getCount(slot2)))

	return 
end
slot0.getPerPrice = function (slot0)
	slot1 = Utility.analysisStrResList(LeaguetopRebornRelation.items[1].rebornUse)[1].resourceId
	slot2 = 0

	for slot6, slot7 in ipairs(slot0.selectHeroList) do
		slot8 = nil

		for slot12, slot13 in ipairs(slot0.mDataList) do
			if slot7 == slot13.ModelId then
				slot8 = slot13.RevivalNum + 1
			end
		end

		if LeaguetopRebornRelation.items_count < slot8 then
			slot8 = LeaguetopRebornRelation.items_count
		end

		slot2 = slot2 + Utility.analysisStrResList(LeaguetopRebornRelation.items[slot8].rebornUse)[1].num
	end

	return slot2, slot1
end
slot0.getPerPriceGold = function (slot0)
	slot1 = Utility.analysisStrResList(LeaguetopRebornRelation.items[1].rebornDiamondUse)[1].resourceId
	slot2 = 0

	for slot6, slot7 in ipairs(slot0.selectHeroList) do
		slot8 = nil

		for slot12, slot13 in ipairs(slot0.mDataList) do
			if slot7 == slot13.ModelId then
				slot8 = slot13.RevivalNum + 1
			end
		end

		if LeaguetopRebornRelation.items_count < slot8 then
			slot8 = LeaguetopRebornRelation.items_count
		end

		slot2 = slot2 + Utility.analysisStrResList(LeaguetopRebornRelation.items[slot8].rebornDiamondUse)[1].num
	end

	return slot2, slot1
end
slot0.onClickHeroRevive = function (slot0)
	slot1 = {}

	for slot5, slot6 in pairs(slot0.mDataList) do
		if not slot0.isHeroSelected(slot0, slot6.ModelId) and 0 < slot0.mMaxReviveNum - slot6.RevivalNum then
			slot0.selectOneHero(slot0, slot6.ModelId)
		end
	end

	return 
end
slot0.onRevival = function (slot0)
	if #slot0.selectHeroList <= 0 then
		ui.showFlashView(TR("选择不能为空"))

		return 
	end

	slot1 = table.concat(slot0.selectHeroList, ",")
	slot6, slot5 = slot0.getPerPrice(slot0)

	if not Resource.isEnough(slot3, slot2, false) then
		slot11, slot11 = slot0.getPerPriceGold(slot0)
		slot0.mPopLayer = ui.showMessageBox({
			titleText = TR("提示"),
			text = TR("道具不足，是否使用{%s}%d复活？", Resource.getDaibiImg(slot5), slot4),
			okCallback = function ()
				if Resource.isEnough(Resource.isEnough, ) then
					slot2:requestHeroRevive(slot3, 0)
					LayerManager.removeLayer(slot2.mPopLayer)
				end

				return 
			end
		})

		return 
	end

	slot0.requestHeroRevive(slot0, slot1, 1)
end
slot0.schRefresh = function (slot0)
	slot1 = {}

	for slot5, slot6 in ipairs(slot0.mDataList) do
		if Player:getCurrentTime() < slot6.RevivalTime then
			table.insert(slot1, slot6)
		end
	end

	slot0.mDataList = slot1

	if #slot0.mDataList <= 0 then
		LayerManager.removeLayer(slot0)
	end

	slot0.selectHeroList = {}

	slot0.mGridView:setItemNum(#slot0.mDataList)

	return 
end
slot0.requestHeroRevive = function (slot0, slot1, slot2)
	slot0.safeRequest(slot0, {
		methodName = "HeroesReborn",
		moduleName = "Leaguetop",
		methodData = {
			slot1,
			slot2
		},
		successCallback = function (slot0)
			if slot0.mCallback then
				slot0.mCallback()
			end

			LayerManager.removeLayer(slot0)

			return 
		end
	})

	return 
end

return slot0
