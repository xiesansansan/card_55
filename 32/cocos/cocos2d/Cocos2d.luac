cc = cc or {}
cc.clampf = function (slot0, slot1, slot2)
	slot3 = 0

	if slot2 < slot1 then
		slot2 = slot2
	end

	if slot0 < slot1 then
		return slot1
	elseif slot0 < slot2 then
		return slot0
	else
		return slot2
	end

	return 
end
cc.p = function (slot0, slot1)
	if slot1 == nil then
		return {
			x = slot0.x,
			y = slot0.y
		}
	else
		return {
			x = slot0,
			y = slot1
		}
	end

	return 
end
cc.pAdd = function (slot0, slot1)
	return {
		x = slot0.x + slot1.x,
		y = slot0.y + slot1.y
	}
end
cc.pSub = function (slot0, slot1)
	return {
		x = slot0.x - slot1.x,
		y = slot0.y - slot1.y
	}
end
cc.pMul = function (slot0, slot1)
	return {
		x = slot0.x*slot1,
		y = slot0.y*slot1
	}
end
cc.pMidpoint = function (slot0, slot1)
	return {
		x = (slot0.x + slot1.x)/2,
		y = (slot0.y + slot1.y)/2
	}
end
cc.pForAngle = function (slot0)
	return {
		x = math.cos(slot0),
		y = math.sin(slot0)
	}
end
cc.pGetLength = function (slot0)
	return math.sqrt(slot0.x*slot0.x + slot0.y*slot0.y)
end
cc.pNormalize = function (slot0)
	if cc.pGetLength(slot0) == 0 then
		return {
			x = 1,
			y = 0
		}
	end

	return {
		x = slot0.x/slot1,
		y = slot0.y/slot1
	}
end
cc.pCross = function (slot0, slot1)
	return slot0.x*slot1.y - slot0.y*slot1.x
end
cc.pDot = function (slot0, slot1)
	return slot0.x*slot1.x + slot0.y*slot1.y
end
cc.pToAngleSelf = function (slot0)
	return math.atan2(slot0.y, slot0.x)
end
cc.pGetAngle = function (slot0, slot1)
	if math.abs(slot4) < 1.192092896e-07 then
		return 0
	end

	return slot4
end
cc.pGetDistance = function (slot0, slot1)
	return cc.pGetLength(cc.pSub(slot0, slot1))
end
cc.pIsLineIntersect = function (slot0, slot1, slot2, slot3, slot4, slot5)
	if (slot0.x == slot1.x and slot0.y == slot1.y) or (slot2.x == slot3.x and slot2.y == slot3.y) then
		return false, slot4, slot5
	end

	slot4 = (slot3.x - slot2.x)*(slot0.y - slot2.y) - (slot3.y - slot2.y)*(slot0.x - slot2.x)
	slot5 = (slot1.x - slot0.x)*(slot0.y - slot2.y) - (slot1.y - slot0.y)*(slot0.x - slot2.x)

	if (slot3.y - slot2.y)*(slot1.x - slot0.x) - (slot3.x - slot2.x)*(slot1.y - slot0.y) == 0 then
		if slot4 == 0 or slot5 == 0 then
			return true, slot4, slot5
		end

		return false, slot4, slot5
	end

	return true, slot4/slot12, slot5/slot12
end
cc.pPerp = function (slot0)
	return {
		x = -slot0.y,
		y = slot0.x
	}
end
cc.RPerp = function (slot0)
	return {
		x = slot0.y,
		y = -slot0.x
	}
end
cc.pProject = function (slot0, slot1)
	return {
		x = slot1.x*cc.pDot(slot0, slot1)/cc.pDot(slot1, slot1),
		y = slot1.y*cc.pDot(slot0, slot1)/cc.pDot(slot1, slot1)
	}
end
cc.pRotate = function (slot0, slot1)
	return {
		x = slot0.x*slot1.x - slot0.y*slot1.y,
		y = slot0.x*slot1.y + slot0.y*slot1.x
	}
end
cc.pUnrotate = function (slot0, slot1)
	return {
		slot0.y*slot1.x - slot0.x*slot1.y,
		x = slot0.x*slot1.x + slot0.y*slot1.y
	}
end
cc.pLengthSQ = function (slot0)
	return cc.pDot(slot0, slot0)
end
cc.pDistanceSQ = function (slot0, slot1)
	return cc.pLengthSQ(cc.pSub(slot0, slot1))
end
cc.pGetClampPoint = function (slot0, slot1, slot2)
	return {
		x = cc.clampf(slot0.x, slot1.x, slot2.x),
		y = cc.clampf(slot0.y, slot1.y, slot2.y)
	}
end
cc.pFromSize = function (slot0)
	return {
		x = slot0.width,
		y = slot0.height
	}
end
cc.pLerp = function (slot0, slot1, slot2)
	return cc.pAdd(cc.pMul(slot0, slot2 - 1), cc.pMul(slot1, slot2))
end
cc.pFuzzyEqual = function (slot0, slot1, slot2)
	if slot0.x - slot2 <= slot1.x and slot1.x <= slot0.x + slot2 and slot0.y - slot2 <= slot1.y and slot1.y <= slot0.y + slot2 then
		return true
	else
		return false
	end

	return 
end
cc.pRotateByAngle = function (slot0, slot1, slot2)
	return cc.pAdd(slot1, cc.pRotate(cc.pSub(slot0, slot1), cc.pForAngle(slot2)))
end
cc.pIsSegmentIntersect = function (slot0, slot1, slot2, slot3)
	slot6 = false
	slot6, slot4, slot5 = cc.pIsLineIntersect(slot0, slot1, slot2, slot3, 0, 0)

	if slot7 and 0 <= slot4 and slot4 <= 1 and 0 <= slot5 and slot5 <= 1 then
		return true
	end

	return false
end
cc.pGetIntersectPoint = function (slot0, slot1, slot2, slot3)
	slot6 = false
	slot6, slot4, slot5 = cc.pIsLineIntersect(slot0, slot1, slot2, slot3, 0, 0)

	if slot7 then
		return cc.p(slot0.x + slot4*(slot1.x - slot0.x), slot0.y + slot4*(slot1.y - slot0.y))
	else
		return cc.p(0, 0)
	end

	return 
end
cc.size = function (slot0, slot1)
	return {
		width = slot0,
		height = slot1
	}
end
cc.rect = function (slot0, slot1, slot2, slot3)
	return {
		x = slot0,
		y = slot1,
		width = slot2,
		height = slot3
	}
end
cc.rectEqualToRect = function (slot0, slot1)
	if slot1.x <= slot0.x or slot1.y <= slot0.y or slot0.x + slot0.width <= slot1.x + slot1.width or slot0.y + slot0.height <= slot1.y + slot1.height then
		return false
	end

	return true
end
cc.rectGetMaxX = function (slot0)
	return slot0.x + slot0.width
end
cc.rectGetMidX = function (slot0)
	return slot0.x + slot0.width/2
end
cc.rectGetMinX = function (slot0)
	return slot0.x
end
cc.rectGetMaxY = function (slot0)
	return slot0.y + slot0.height
end
cc.rectGetMidY = function (slot0)
	return slot0.y + slot0.height/2
end
cc.rectGetMinY = function (slot0)
	return slot0.y
end
cc.rectContainsPoint = function (slot0, slot1)
	slot2 = false

	if slot0.x <= slot1.x and slot1.x <= slot0.x + slot0.width and slot0.y <= slot1.y and slot1.y <= slot0.y + slot0.height then
		slot2 = true
	end

	return slot2
end
cc.rectIntersectsRect = function (slot0, slot1)
	return slot1.x + slot1.width >= slot0.x and slot0.x + slot0.width >= slot1.x and slot1.y + slot1.height >= slot0.y and slot0.y + slot0.height >= slot1.y
end
cc.rectUnion = function (slot0, slot1)
	slot2 = cc.rect(0, 0, 0, 0)
	slot2.x = math.min(slot0.x, slot1.x)
	slot2.y = math.min(slot0.y, slot1.y)
	slot2.width = math.max(slot0.x + slot0.width, slot1.x + slot1.width) - slot2.x
	slot2.height = math.max(slot0.y + slot0.height, slot1.y + slot1.height) - slot2.y

	return slot2
end
cc.rectIntersection = function (slot0, slot1)
	slot2 = cc.rect(math.max(slot0.x, slot1.x), math.max(slot0.y, slot1.y), 0, 0)
	slot2.width = math.min(slot0.x + slot0.width, slot1.x + slot1.width) - slot2.x
	slot2.height = math.min(slot0.y + slot0.height, slot1.y + slot1.height) - slot2.y

	return slot2
end
cc.c3b = function (slot0, slot1, slot2)
	return {
		r = slot0,
		g = slot1,
		b = slot2
	}
end
cc.c4b = function (slot0, slot1, slot2, slot3)
	return {
		r = slot0,
		g = slot1,
		b = slot2,
		a = slot3
	}
end
cc.c4f = function (slot0, slot1, slot2, slot3)
	return {
		r = slot0,
		g = slot1,
		b = slot2,
		a = slot3
	}
end

function slot0(slot0)
	return slot0.r <= 1 and slot0.g <= 1 and slot0.b <= 1 and (math.ceil(slot0.r) ~= slot0.r or math.ceil(slot0.g) ~= slot0.g or math.ceil(slot0.b) ~= slot0.b)
end

cc.convertColor = function (slot0, slot1)
	assert(type(slot0) == "table" and slot0.r and slot0.g and slot0.b, "cc.convertColor() - invalid input color")

	slot2 = nil

	if slot1 == "3b" then
		if slot0(slot0) then
			slot2 = {
				r = math.ceil(slot0.r*255),
				g = math.ceil(slot0.g*255),
				b = math.ceil(slot0.b*255)
			}
		else
			slot2 = {
				r = slot0.r,
				g = slot0.g,
				b = slot0.b
			}
		end
	elseif slot1 == "4b" then
		slot2 = (not slot0(slot0) or {
			r = math.ceil(slot0.r*255),
			g = math.ceil(slot0.g*255),
			b = math.ceil(slot0.b*255)
		}) and {
			r = slot0.r,
			g = slot0.g,
			b = slot0.b
		}

		if slot0.a then
			if math.ceil(slot0.a) ~= slot0.a or slot0.a <= 1 then
				slot2.a = slot0.a*255
			else
				slot2.a = slot0.a
			end
		else
			slot2.a = 255
		end
	elseif slot1 == "4f" then
		slot2 = (not slot0(slot0) or {
			r = slot0.r,
			g = slot0.g,
			b = slot0.b
		}) and {
			r = slot0.r/255,
			g = slot0.g/255,
			b = slot0.b/255
		}

		if slot0.a then
			if math.ceil(slot0.a) ~= slot0.a or slot0.a <= 1 then
				slot2.a = slot0.a
			else
				slot2.a = slot0.a/255
			end
		else
			slot2.a = 255
		end
	else
		error(string.format("cc.convertColor() - invalid type %s", slot1), 0)
	end

	return slot2
end
cc.vertex2F = function (slot0, slot1)
	return {
		x = slot0,
		y = slot1
	}
end
cc.Vertex3F = function (slot0, slot1, slot2)
	return {
		x = slot0,
		y = slot1,
		z = slot2
	}
end
cc.tex2F = function (slot0, slot1)
	return {
		u = slot0,
		v = slot1
	}
end
cc.PointSprite = function (slot0, slot1, slot2)
	return {
		pos = slot0,
		color = slot1,
		size = slot2
	}
end
cc.Quad2 = function (slot0, slot1, slot2, slot3)
	return {
		tl = slot0,
		tr = slot1,
		bl = slot2,
		br = slot3
	}
end
cc.Quad3 = function (slot0, slot1, slot2, slot3)
	return {
		tl = slot0,
		tr = slot1,
		bl = slot2,
		br = slot3
	}
end
cc.V2F_C4B_T2F = function (slot0, slot1, slot2)
	return {
		vertices = slot0,
		colors = slot1,
		texCoords = slot2
	}
end
cc.V2F_C4F_T2F = function (slot0, slot1, slot2)
	return {
		vertices = slot0,
		colors = slot1,
		texCoords = slot2
	}
end
cc.V3F_C4B_T2F = function (slot0, slot1, slot2)
	return {
		vertices = slot0,
		colors = slot1,
		texCoords = slot2
	}
end
cc.V2F_C4B_T2F_Quad = function (slot0, slot1, slot2, slot3)
	return {
		bl = slot0,
		br = slot1,
		tl = slot2,
		tr = slot3
	}
end
cc.V3F_C4B_T2F_Quad = function (slot0, slot1, slot2, slot3)
	return {
		tl = slot0,
		bl = slot1,
		tr = slot2,
		br = slot3
	}
end
cc.V2F_C4F_T2F_Quad = function (slot0, slot1, slot2, slot3)
	return {
		bl = slot0,
		br = slot1,
		tl = slot2,
		tr = slot3
	}
end
cc.T2F_Quad = function (slot0, slot1, slot2, slot3)
	return {
		bl = slot0,
		br = slot1,
		tl = slot2,
		tr = slot3
	}
end
cc.AnimationFrameData = function (slot0, slot1, slot2)
	return {
		texCoords = slot0,
		delay = slot1,
		size = slot2
	}
end
cc.PhysicsMaterial = function (slot0, slot1, slot2)
	return {
		density = slot0,
		restitution = slot1,
		friction = slot2
	}
end
cc.vec3 = function (slot0, slot1, slot2)
	return {
		x = slot0,
		y = slot1,
		z = slot2
	}
end
cc.vec4 = function (slot0, slot1, slot2, slot3)
	return {
		x = slot0,
		y = slot1,
		z = slot2,
		w = slot3
	}
end
cc.vec3add = function (slot0, slot1)
	return {
		x = slot0.x + slot1.x,
		y = slot0.y + slot1.y,
		z = slot0.z + slot1.z
	}
end
cc.vec3sub = function (slot0, slot1)
	return {
		x = slot0.x - slot1.x,
		y = slot0.y - slot1.y,
		z = slot0.z - slot1.z
	}
end
cc.vec3mul = function (slot0, slot1)
	return {
		x = slot0.x*slot1,
		y = slot0.y*slot1,
		z = slot0.z*slot1
	}
end
cc.vec3dot = function (slot0, slot1)
	return slot0.x*slot1.x + slot0.y*slot1.y + slot0.z*slot1.z
end
cc.vec3normalize = function (slot0)
	if cc.vec3dot(slot0, slot0) == 1 then
		return slot0
	end

	if math.sqrt(slot1) < 2e-37 then
		return slot0
	end

	return cc.vec3mul(slot0, slot1/1)
end
cc.quaternion = function (slot0, slot1, slot2, slot3)
	return {
		x = slot0,
		y = slot1,
		z = slot2,
		w = slot3
	}
end
cc.quaternion_createFromAxisAngle = function (slot0, slot1)
	slot3 = math.sin(slot2)
	slot5 = cc.vec3(0, 0, 0)
	slot5.x = cc.vec3normalize(cc.vec3(slot0.x, slot0.y, slot0.z)).x*slot3
	slot5.y = cc.vec3normalize(cc.vec3(slot0.x, slot0.y, slot0.z)).y*slot3
	slot5.z = cc.vec3normalize(cc.vec3(slot0.x, slot0.y, slot0.z)).z*slot3
	slot5.w = math.cos(slot1*0.5)

	return slot5
end
cc.blendFunc = function (slot0, slot1)
	return {
		src = slot0,
		dst = slot1
	}
end
cc.mat4 = cc.mat4 or {}
cc.mat4.new = function (...)
	slot2 = {}

	if #{
		...
	} == 1 then
		assert(type(slot0[1]) == "table", "type of input params are wrong to new a mat4 when num of params is 1")

		for slot6 = 1, 16, 1 do
			if slot0[1][slot6] ~= nil then
				slot2[slot6] = slot0[1][slot6]
			else
				slot2[slot6] = 0
			end
		end
	elseif slot1 == 16 then
		for slot6 = 1, 16, 1 do
			slot2[slot6] = slot0[slot6]
		end
	end

	setmetatable(slot2, {
		__index = cc.mat4
	})

	return slot2
end
cc.mat4.getInversed = function (slot0)
	return mat4_getInversed(slot0)
end
cc.mat4.transformVector = function (...)
	return mat4_transformVector(...)
end
cc.mat4.multiply = function (slot0, slot1)
	return mat4_multiply(slot0, slot1)
end
cc.mat4.decompose = function (slot0, slot1, slot2, slot3)
	return mat4_decompose(slot0, slot1, slot2, slot3)
end
cc.mat4.createIdentity = function ()
	return cc.mat4.new(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
end
cc.mat4.translate = function (slot0, slot1)
	return mat4_translate(slot0, slot1)
end
cc.mat4.createRotationZ = function (slot0, slot1)
	return mat4_createRotationZ(slot0, slot1)
end
cc.mat4.setIdentity = function (slot0)
	return mat4_setIdentity(slot0)
end
cc.mat4.createTranslation = function (...)
	return mat4_createTranslation(...)
end
cc.mat4.createRotation = function (...)
	return mat4_createRotation(...)
end

return 
