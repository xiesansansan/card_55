bit = bit or {}
bit.data32 = {}

for slot3 = 1, 32, 1 do
	bit.data32[slot3] = 2^(slot3 - 32)
end

bit._b2d = function (slot0)
	slot1 = 0

	for slot5 = 1, 32, 1 do
		if slot0[slot5] == 1 then
			slot1 = slot1 + bit.data32[slot5]
		end
	end

	return slot1
end
bit._d2b = function (slot0)
	slot0 = (0 <= slot0 and slot0) or slot0 + 4294967295.0 + 1
	slot1 = {}

	for slot5 = 1, 32, 1 do
		if bit.data32[slot5] <= slot0 then
			slot1[slot5] = 1
			slot0 = slot0 - bit.data32[slot5]
		else
			slot1[slot5] = 0
		end
	end

	return slot1
end
bit._and = function (slot0, slot1)
	slot2 = bit._d2b(slot0)
	slot3 = bit._d2b(slot1)
	slot4 = {}

	for slot8 = 1, 32, 1 do
		if slot2[slot8] == 1 and slot3[slot8] == 1 then
			slot4[slot8] = 1
		else
			slot4[slot8] = 0
		end
	end

	return bit._b2d(slot4)
end
bit._rshift = function (slot0, slot1)
	slot2 = bit._d2b(slot0)
	slot1 = (0 <= ((slot1 <= 32 and slot1) or 32) and ((slot1 <= 32 and slot1) or 32)) or 0

	for slot6 = 32, slot1 + 1, -1 do
		slot2[slot6] = slot2[slot6 - slot1]
	end

	for slot6 = 1, slot1, 1 do
		slot2[slot6] = 0
	end

	return bit._b2d(slot2)
end
bit._not = function (slot0)
	slot1 = bit._d2b(slot0)
	slot2 = {}

	for slot6 = 1, 32, 1 do
		if slot1[slot6] == 1 then
			slot2[slot6] = 0
		else
			slot2[slot6] = 1
		end
	end

	return bit._b2d(slot2)
end
bit._or = function (slot0, slot1)
	slot2 = bit._d2b(slot0)
	slot3 = bit._d2b(slot1)
	slot4 = {}

	for slot8 = 1, 32, 1 do
		if slot2[slot8] == 1 or slot3[slot8] == 1 then
			slot4[slot8] = 1
		else
			slot4[slot8] = 0
		end
	end

	return bit._b2d(slot4)
end
bit.band = bit.band or bit._and
bit.rshift = bit.rshift or bit._rshift
bit.bnot = bit.bnot or bit._not

return 
