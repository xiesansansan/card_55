cc.loaded_packages = {}
slot0 = cc.loaded_packages
cc.register = function (slot0, slot1)
	cc.loaded_packages[slot0] = slot1

	return 
end
cc.load = function (...)
	assert(0 < #{
		...
	}, "cc.load() - invalid package names")

	slot1 = {}

	for slot5, slot6 in ipairs(slot0) do
		assert(type(slot6) == "string", string.format("cc.load() - invalid package name \"%s\"", tostring(slot6)))

		if not slot0[slot6] then
			assert(slot8, string.format("cc.load() - package class \"%s\" load failed", string.format("packages.%s.init", slot6)))

			slot0[slot6] = require(slot7)

			if 1 < DEBUG then
				printInfo("cc.load() - load module \"packages.%s.init\"", slot6)
			end
		end

		slot1[#slot1 + 1] = slot0[slot6]
	end

	return unpack(slot1)
end
slot1 = cc.load
slot2 = nil
cc.bind = function (slot0, ...)
	assert(type(slot0) == "table" or slot1 == "userdata", string.format("cc.bind() - invalid target, expected is object, actual is %s", slot1))
	assert(0 < #{
		...
	}, "cc.bind() - package names expected")
	slot0(...)

	if not slot0.components_ then
		slot0.components_ = {}
	end

	for slot6, slot7 in ipairs(slot2) do
		assert(type(slot7) == "string" and slot7 ~= "", string.format("cc.bind() - invalid package name \"%s\"", slot7))

		if not slot0.components_[slot7] then
			slot9 = ipairs
			slot10 = slot1[slot7].depends or {}

			for slot12, slot13 in slot9(slot10) do
				if not slot0.components_[slot13] then
					slot2(slot0, slot13)
				end
			end

			slot9 = slot8.create(slot8)
			slot0.components_[slot7] = slot9

			slot9.bind(slot9, slot0)
		end
	end

	return slot0
end
cc.unbind = function (slot0, ...)
	if not slot0.components_ then
		return 
	end

	assert(0 < #{
		...
	}, "cc.unbind() - invalid package names")

	for slot5, slot6 in ipairs(slot1) do
		assert(type(slot6) == "string" and slot6 ~= "", string.format("cc.unbind() - invalid package name \"%s\"", slot6))
		assert(assert, string.format("cc.unbind() - component \"%s\" not found", tostring(slot6)))
		slot0.components_[slot6].unbind(assert, slot0)

		slot0.components_[slot6] = nil
	end

	return slot0
end
cc.setmethods = function (slot0, slot1, slot2)
	for slot6, slot7 in ipairs(slot2) do
		slot8 = slot1[slot7]
		slot0[slot7] = function (slot0, ...)
			return slot0(slot0, ...)
		end
	end

	return 
end
cc.unsetmethods = function (slot0, slot1)
	for slot5, slot6 in ipairs(slot1) do
		slot0[slot6] = nil
	end

	return 
end

return 
