slot0 = class("DlgCampReadyLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = true
	})
end)
slot0.uiTree = {
	{
		name = "untitled95",
		cType = "Sprite",
		params = {
			isFullScale = true,
			scaleApt = 2,
			posApt = 1,
			image = "zj_127.png",
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {}
	},
	{
		name = "untitled126",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			isLiuHai = true,
			pos = {
				x = 0,
				y = 320
			}
		},
		children = {
			{
				name = "untitled127",
				cType = "Sprite",
				params = {
					image = "zj_176.png",
					pos = {
						x = 258.63,
						y = -88.26
					}
				},
				children = {}
			},
			{
				name = "untitled114",
				cType = "Sprite",
				params = {
					image = "xyyz_40.png",
					pos = {
						x = 278.01,
						y = 244.89
					}
				},
				children = {}
			},
			{
				name = "mCountLabel",
				cType = "Label",
				params = {
					fontSize = 22,
					color = {
						g = 255,
						r = 255,
						b = 255
					},
					pos = {
						x = 276.09,
						y = 248.94
					},
					text = TR("出战阵容 (0/5)")
				},
				children = {}
			},
			{
				name = "mBgCampInfo",
				cType = "Scale9Sprite",
				params = {
					image = "c_pure.png",
					anchor = {
						x = 0.5,
						y = 1
					},
					pos = {
						x = 289.02,
						y = 320
					},
					size = {
						width = 578,
						height = 640
					}
				},
				children = {
					{
						name = "untitled120",
						cType = "Sprite",
						custom = {
							{
								value = 1,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 349.94,
								y = 177.56
							}
						},
						children = {}
					},
					{
						name = "untitled69",
						cType = "Sprite",
						custom = {
							{
								value = 2,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 430.85,
								y = 274.19
							}
						},
						children = {}
					},
					{
						name = "untitled55",
						cType = "Sprite",
						custom = {
							{
								value = 3,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 85.36,
								y = 131.13
							}
						},
						children = {}
					},
					{
						name = "untitled54",
						cType = "Sprite",
						custom = {
							{
								value = 4,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 180.77,
								y = 237.58
							}
						},
						children = {}
					},
					{
						name = "untitled53",
						cType = "Sprite",
						custom = {
							{
								value = 5,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 276.14,
								y = 320.44
							}
						},
						children = {}
					},
					{
						name = "fapSp",
						cType = "Sprite",
						params = {
							scale = 0.8,
							image = "c_82.png",
							pos = {
								x = 288.51,
								y = 103.38
							}
						},
						children = {
							{
								name = "untitled113",
								cType = "Sprite",
								params = {
									image = "c_80.png",
									pos = {
										x = 43.36,
										y = 39.91
									}
								},
								children = {}
							},
							{
								name = "mFapLabel",
								cType = "Label",
								params = {
									fontSize = 28,
									charCount = 12,
									text = "",
									fontName = "c_81.png",
									anchor = {
										x = 0,
										y = 0.5
									},
									pos = {
										x = 90.86,
										y = 35.13
									}
								},
								children = {}
							}
						}
					},
					{
						name = "resOwnBgSprite",
						cType = "Sprite",
						params = {
							image = "c_pure.png",
							pos = {
								x = 266.21,
								y = 55.79
							}
						},
						children = {
							{
								name = "untitled11",
								cType = "Label",
								params = {
									fontSize = 20,
									anchor = {
										x = 1,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = -5,
										y = 12
									},
									text = TR("总干粮:")
								},
								children = {}
							},
							{
								name = "untitled60",
								cType = "Sprite",
								params = {
									image = "db_1114.png",
									pos = {
										x = 10,
										y = 12
									}
								},
								children = {}
							},
							{
								name = "mResOwnLabel",
								cType = "Label",
								params = {
									fontSize = 20,
									text = "0",
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = 30,
										y = 11
									}
								},
								children = {}
							}
						}
					},
					{
						name = "resNeedBgSprite",
						cType = "Sprite",
						params = {
							image = "c_pure.png",
							pos = {
								x = 266.73,
								y = 23.72
							}
						},
						children = {
							{
								name = "untitled12",
								cType = "Label",
								params = {
									fontSize = 20,
									anchor = {
										x = 1,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = -5,
										y = 12
									},
									text = TR("消  耗:")
								},
								children = {}
							},
							{
								name = "untitled66",
								cType = "Sprite",
								params = {
									image = "db_1114.png",
									pos = {
										x = 10,
										y = 12
									}
								},
								children = {}
							},
							{
								name = "mResNeedLabel",
								cType = "Label",
								params = {
									fontSize = 20,
									text = "0",
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = 30,
										y = 11
									}
								},
								children = {}
							}
						}
					},
					{
						name = "troopTitle",
						cType = "Label",
						params = {
							fontSize = 20,
							hide = true,
							anchor = {
								x = 1,
								y = 0.5
							},
							color = {
								g = 49,
								r = 49,
								b = 49
							},
							pos = {
								x = 79.49,
								y = 415.41
							},
							text = TR("行进时间:")
						},
						children = {
							{
								name = "troopTime",
								cType = "Label",
								params = {
									fontSize = 20,
									text = "59:50",
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 248,
										r = 255,
										b = 234
									},
									outlineColor = {
										g = 42,
										r = 51,
										b = 24
									},
									pos = {
										x = 91.72,
										y = 11.98
									}
								},
								children = {}
							}
						}
					},
					{
						name = "pveOnlingNode",
						cType = "Node",
						params = {
							pos = {
								x = -391,
								y = 140
							}
						},
						children = {
							{
								name = "totalStars",
								cType = "Label",
								params = {
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 49,
										r = 49,
										b = 49
									},
									pos = {
										x = 380,
										y = 250
									},
									text = TR("总星数：0")
								},
								children = {}
							},
							{
								name = "starSp",
								cType = "Sprite",
								params = {
									scale = 0.8,
									image = "c_5.png",
									pos = {
										x = 515.22,
										y = 252
									}
								},
								children = {}
							},
							{
								name = "untitled91",
								cType = "Label",
								params = {
									fontSize = 18,
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 49,
										r = 49,
										b = 49
									},
									pos = {
										x = 379.34,
										y = 220
									},
									text = TR("（队伍星级越高，巡逻奖励越好）")
								},
								children = {}
							},
							{
								name = "untitled92",
								cType = "Label",
								params = {
									anchor = {
										x = 0.5,
										y = 0.5
									},
									color = {
										g = 49,
										r = 49,
										b = 49
									},
									pos = {
										x = 424.95,
										y = 183.02
									},
									text = TR("奖励预览")
								},
								children = {}
							},
							{
								name = "untitled93",
								cType = "Label",
								params = {
									isRichText = true,
									childName = "goldNum",
									anchor = {
										x = 0,
										y = 0.5
									},
									outlineColor = {
										g = 42,
										r = 51,
										b = 24
									},
									pos = {
										x = 380.68,
										y = 144.72
									},
									text = TR("{db_1112.png} 0/小时")
								},
								children = {}
							},
							{
								name = "untitled94",
								cType = "Label",
								params = {
									isRichText = true,
									childName = "vitNum",
									anchor = {
										x = 0,
										y = 0.5
									},
									outlineColor = {
										g = 42,
										r = 51,
										b = 24
									},
									pos = {
										x = 380.03,
										y = 97.91
									},
									text = TR("{db_1114.png} 0/小时")
								},
								children = {}
							}
						}
					},
					{
						name = "strategyBg",
						cType = "Sprite",
						params = {
							image = "xyyz_51.png",
							pos = {
								x = 52,
								y = 513
							}
						},
						children = {}
					},
					{
						name = "strategyBtn",
						cType = "Button",
						params = {
							image = "tb_gn_31.png",
							clickAction = "onStrategyBtnClickAction",
							scale = 1,
							pos = {
								x = 55,
								y = 513
							}
						},
						children = {
							{
								name = "strategyText",
								cType = "Label",
								params = {
									isRichText = true,
									outlineSize = 2,
									outlineColor = {
										g = 37,
										r = 37,
										b = 37
									},
									pos = {
										x = -0.9,
										y = -67.22
									},
									text = TR("点击添加阵法")
								},
								children = {}
							}
						}
					}
				}
			}
		}
	},
	{
		name = "untitled100",
		cType = "TopResourceNode",
		params = {
			scaleApt = 2,
			posApt = 1,
			anchor = {
				x = 1,
				y = 1
			},
			moduleIdList = {
				1111,
				1112,
				1114
			},
			pos = {
				x = 1136,
				y = 640
			}
		},
		children = {}
	},
	{
		name = "untitled101",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 1136,
				y = 320
			}
		},
		children = {
			{
				name = "oneKeySetBtn",
				cType = "Button",
				params = {
					image = "c_39.png",
					clickAction = "onCampAction",
					pos = {
						x = -401,
						y = -278.58
					},
					titleText = TR("一键布阵")
				},
				children = {}
			},
			{
				name = "mOkBtn",
				cType = "Button",
				params = {
					image = "c_19.png",
					clickAction = "onReadyAction",
					pos = {
						x = -195,
						y = -278.58
					},
					titleText = TR("确 定")
				},
				children = {}
			},
			{
				name = "professionTabView",
				cType = "ProfessionTabView",
				params = {
					onSelectChange = "onProfessionAction",
					lightedImage = "c_35.png",
					direction = true,
					normalImage = "c_pure.png",
					space = "5",
					btnSize = {
						width = 85,
						height = 75
					},
					pos = {
						x = -86,
						y = -232.24
					},
					size = {
						width = 85,
						height = 485
					}
				},
				children = {}
			},
			{
				name = "mBgHeroList",
				cType = "Scale9Sprite",
				params = {
					image = "c_9.png",
					anchor = {
						x = 0.5,
						y = 1
					},
					pos = {
						x = -306,
						y = 280.57
					},
					size = {
						width = 476,
						height = 536
					}
				},
				children = {
					{
						name = "mHeroGridView",
						cType = "GridView",
						params = {
							createColCb = "onCreateGridAction",
							asyncLoad = true,
							itemNum = 0,
							colCount = 4,
							selectIndex = 1,
							celHeight = 140,
							pos = {
								x = 240.78,
								y = 267.29
							},
							size = {
								width = 440,
								height = 480
							}
						},
						children = {
							{
								name = "heroTemplateNode",
								cType = "TemplateNode",
								custom = {
									{
										value = "untitled48-image",
										name = "professionImg",
										type = "string"
									},
									{
										value = "untitled49-text",
										name = "nameText",
										type = "string"
									}
								},
								params = {
									pos = {
										x = 127.82,
										y = 205.57
									},
									size = {
										width = 110,
										height = 139
									}
								},
								children = {
									{
										name = "untitled106",
										cType = "Scale9Sprite",
										params = {
											image = "gcz_27.png",
											pos = {
												x = 55,
												y = 75
											}
										},
										children = {}
									},
									{
										name = "untitled46",
										cType = "CardNode",
										params = {
											scale = 0.9,
											childName = "cardNode",
											allowClick = true,
											pos = {
												x = 55.35,
												y = 85.66
											}
										},
										children = {}
									},
									{
										name = "untitled70",
										cType = "Sprite",
										params = {
											childName = "deadSprite",
											image = "fb_23.png",
											hide = true,
											pos = {
												x = 56,
												y = 85
											}
										},
										children = {}
									},
									{
										name = "untitled71",
										cType = "Sprite",
										params = {
											childName = "otherWarSprite",
											image = "c_pure.png",
											hide = true,
											pos = {
												x = 64,
												y = 95
											}
										},
										children = {
											{
												name = "untitled112",
												cType = "Label",
												params = {
													color = {
														g = 65,
														r = 192,
														b = 65
													},
													pos = {
														x = 0,
														y = 0
													},
													text = TR("其他出战")
												},
												children = {}
											}
										}
									},
									{
										name = "untitled76",
										cType = "Sprite",
										params = {
											childName = "disableSprite",
											image = "fb_21.png",
											hide = true,
											pos = {
												x = 66.13,
												y = 88.09
											}
										},
										children = {}
									},
									{
										name = "untitled83",
										cType = "Sprite",
										params = {
											childName = "gotoWorkSprite",
											image = "gcz_16.png",
											hide = true,
											pos = {
												x = 64.06,
												y = 91.72
											}
										},
										children = {}
									},
									{
										name = "untitled50",
										cType = "Sprite",
										params = {
											childName = "selectSprite",
											zOrder = 1,
											hide = true,
											image = "fb_24.png",
											pos = {
												x = 56.9,
												y = 85.45
											}
										},
										children = {}
									},
									{
										name = "untitled86",
										cType = "Sprite",
										params = {
											childName = "inTeamSprite",
											image = "gcz_16.png",
											hide = true,
											pos = {
												x = 64.12,
												y = 90.05
											}
										},
										children = {}
									},
									{
										name = "untitled116",
										cType = "Scale9Sprite",
										params = {
											image = "gcz_26.png",
											pos = {
												x = 65.44,
												y = 24.03
											}
										},
										children = {}
									},
									{
										name = "untitled87",
										cType = "Sprite",
										params = {
											childName = "indexSprite",
											image = "xyyz_44.png",
											hide = true,
											pos = {
												x = 86.38,
												y = 53.3
											}
										},
										children = {
											{
												name = "untitled88",
												cType = "Label",
												params = {
													fontSize = 16,
													text = "1",
													childName = "label",
													color = {
														g = 255,
														r = 255,
														b = 255
													},
													outlineColor = {
														g = 49,
														r = 49,
														b = 49
													},
													pos = {
														x = 12.5,
														y = 13.5
													}
												},
												children = {}
											}
										}
									},
									{
										name = "untitled49",
										cType = "Label",
										params = {
											fontSize = 18,
											isRichText = true,
											childName = "nameLabel",
											text = "Name",
											anchor = {
												x = 0,
												y = 0.5
											},
											color = {
												g = 255,
												r = 255,
												b = 255
											},
											outlineColor = {
												g = 37,
												r = 37,
												b = 37
											},
											pos = {
												x = 32,
												y = 24
											}
										},
										children = {}
									},
									{
										name = "untitled48",
										cType = "Sprite",
										params = {
											childName = "professionSprite",
											scale = 0.75,
											image = "zj_72.png",
											anchor = {
												x = 1,
												y = 0.5
											},
											pos = {
												x = 27.59,
												y = 22.31
											}
										},
										children = {}
									},
									{
										name = "untitled123",
										cType = "Scale9Sprite",
										params = {
											childName = "revivalNode",
											hide = true,
											image = "c_42.png",
											pos = {
												x = 55.23,
												y = 132.24
											},
											size = {
												width = 100,
												height = 20
											}
										},
										children = {
											{
												name = "untitled125",
												cType = "Label",
												params = {
													fontSize = 18,
													childName = "timeLabel",
													text = "Label",
													color = {
														g = 37,
														r = 37,
														b = 37
													},
													pos = {
														x = 50,
														y = 10
													}
												},
												children = {}
											}
										}
									},
									{
										name = "untitled128",
										cType = "Sprite",
										params = {
											childName = "friendTag",
											image = "swgmd_6.png",
											hide = true,
											pos = {
												x = 15.92,
												y = 118.06
											}
										},
										children = {}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	{
		name = "untitled96",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 0,
				y = 640
			}
		},
		children = {
			{
				name = "untitled98",
				cType = "Button",
				params = {
					clickAction = "onCloseLayer",
					image = "c_1.png",
					anchor = {
						x = 0,
						y = 1
					},
					pos = {
						x = 0,
						y = 0
					}
				},
				children = {}
			},
			{
				name = "untitled97",
				cType = "Sprite",
				params = {
					image = "xyyz_45.png",
					pos = {
						x = 174.51,
						y = -25
					}
				},
				children = {}
			}
		}
	}
}
slot1 = 5
slot2 = 6
slot3 = {
	{
		professionTag = 0,
		titleImg = "txsj_11.png",
		posX = 62,
		titleText = TR("全")
	},
	{
		professionTag = 1,
		titleImg = "txsj_10.png",
		posX = 152,
		titleText = TR("刀")
	},
	{
		professionTag = 2,
		titleImg = "txsj_9.png",
		posX = 242,
		titleText = TR("剑")
	},
	{
		professionTag = 3,
		titleImg = "txsj_12.png",
		posX = 332,
		titleText = TR("力")
	},
	{
		professionTag = 4,
		titleImg = "txsj_13.png",
		posX = 422,
		titleText = TR("气")
	},
	{
		professionTag = 5,
		titleImg = "txsj_14.png",
		posX = 512,
		titleText = TR("技")
	}
}
slot4 = require("common.ShaderManager")
slot0.ctor = function (slot0, slot1)
	slot0.super.ctor(slot0, {
		swallow = true
	})

	slot0.callback = slot1.callback
	slot0.rebirthCallback = slot1.rebirthCallback
	slot0.minCount = slot1.minCount or 1
	slot0.currSlotString = slot1.currSlotString or ""
	slot0.alreadyGotoWar = slot1.alreadyGotoWar or {}
	slot0.alreadyGotoWork = slot1.alreadyGotoWork or {}
	slot0.ignoreHeroList = slot1.ignoreHeroList or {}
	slot0.ignoreCampList = slot1.ignoreCampList or {}
	slot0.ignoreProfessionList = slot1.ignoreProfessionList or {}
	slot0.ignoreSexId = slot1.ignoreSexId or 0
	slot0.titleText = slot1.titleText
	slot0.showStatusBar = slot1.showStatusBar or false
	slot0.statusList = slot1.statusList or {}
	slot0.noNeedVit = slot1.noNeedVit or false
	slot0.isPvp = slot1.isPvp or false
	slot0.isPve = slot1.isPve or false
	slot0.pveData = slot1.pveData or {}
	slot0.isMainCityWar = slot1.isMainCityWar or false
	slot0.revivalInfo = slot1.revivalInfo or {}
	slot0.minTrainLv = slot1.minTrainLv or 0
	slot0.cityWarTeamData = {}
	slot0.mTotalResNeed = 0
	slot0.mIsSwingJYfight = slot1.isSwingJYfight or false
	slot0.limitCount = slot1.limitCount or 0
	slot0.dfSelectedTag = slot1.dfSelectedTag or 0
	slot0.pveOnlinePatrol = slot1.pveOnlinePatrol or false
	slot0.mVitCostR = slot1.vitCostR
	slot0.mStratageID = 0
	slot0.mCallModelSub = slot1.callModelSub or 0
	slot0.useGoods = false
	slot0.isInitOnteam = false
	slot0.mInitSelectTag = slot1.initSelectTag or 0
	slot0.gotoWorkImage = slot1.gotoWorkImage
	slot0.mercenaryList = slot1.mercenaryList or {}

	if type(slot0.mercenaryList) ~= "table" or #slot0.mercenaryList == 0 then
		slot0.mercenaryList = MercenaryObj:getMercenaryIdByModuleId(slot0.mCallModelSub)
	end

	dump(slot0.currSlotString)
	dump(slot0.mercenaryList)

	if slot1.cityWarTeamData then
		for slot5, slot6 in ipairs(slot1.cityWarTeamData) do
			for slot10, slot11 in ipairs(slot6.HeroInfoList) do
				slot0.cityWarTeamData[slot11.HeroModelId] = {
					state = slot6.State,
					originState = slot6.State,
					index = slot5
				}
			end
		end
	end

	slot0.initUI(slot0)
	ui.addTouchEvent({
		node = slot0.mBgCampInfo,
		beganEvent = function (slot0, slot1)
			if not ui.touchInNode(slot0, slot0.mBgCampInfo) then
				return false
			end

			slot0:onBeganEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return true
		end,
		movedEvent = function (slot0, slot1)
			slot0:onMovedEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return 
		end,
		endedEvent = function (slot0, slot1)
			slot0:onEndedEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return 
		end
	})

	return 
end
slot0.initUI = function (slot0)
	slot1 = slot0.checkStrategyEnable(slot0)

	slot0.createUITree(slot0, function (slot0, slot1)
		if slot0.name == "mMsgBox" then
			if slot0.titleText ~= nil then
				slot1.titleText = slot0.titleText
			end
		elseif slot0.name == "professionTabView" then
			slot1.selectTag = slot0.mInitSelectTag
		end

		return 
	end)

	slot0.mDataList = {}
	slot0.selectHeroList = {
		{
			playerId = "0",
			ModelId = 0
		},
		{
			playerId = "0",
			ModelId = 0
		},
		{
			playerId = "0",
			ModelId = 0
		},
		{
			playerId = "0",
			ModelId = 0
		},
		{
			playerId = "0",
			ModelId = 0
		}
	}
	slot0.mSelectedTag = -1
	slot0.professionNodeList = {}
	slot0.headerNodeList = {}

	for slot5, slot6 in ipairs(slot0.getCustomChildren(slot0, slot0.mBgCampInfo, "campTag")) do
		slot0.headerNodeList[slot5] = {
			index = slot5,
			pos = cc.p(slot6.getPosition(slot6))
		}
	end

	if slot0.noNeedVit == true then
		slot0.mResOwnLabel:setVisible(false)
		slot0.resNeedBgSprite:setVisible(false)
		slot0.resOwnBgSprite:setVisible(false)
	else
		slot0.mResOwnLabel:setString(PlayerAttrObj:getPlayerAttrByName("Vit"))
	end

	slot0.pveOnlingNode:setVisible(slot0.pveOnlinePatrol ~= false)
	slot0.starSp:setPositionX(slot0.totalStars:getContentSize().width + slot0.totalStars:getPositionX() + 15)

	if slot0.pveOnlinePatrol ~= false then
		slot0.fapSp:setVisible(false)
	end

	slot0.strategyBtn:setVisible(slot1)
	slot0.strategyBg:setVisible(slot1)

	return 
end
slot0.onCloseLayer = function (slot0)
	LayerManager.removeLayer(slot0)

	return 
end
slot0.onRuleClick = function (slot0)
	return 
end
slot0.onCheckAction = function (slot0, slot1)
	if not slot1.checkAble then
		slot1.setSelected(slot1, false)
		ui.showFlashView(TR("%s%s%s不足！！！", "#EA2C00", Resource.getName(Utility.analysisStrResList(TimedbossConfig.items[1].atkUpUse)[1].resourceId), "#fff8ea"))
	end

	slot0.useGoods = slot1.isSelected(slot1)

	return 
end
slot0.onProfessionAction = function (slot0, slot1)
	slot0.selectOneProfession(slot0, slot1)
	slot0.realExecuteGuide(slot0)

	return 
end
slot0.onCampAction = function (slot0)
	for slot4 = 1, slot0, 1 do
		if slot0.selectHeroList[slot4].ModelId ~= 0 then
			slot0.heroUnWork(slot0, slot4)
			slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot5))
		end
	end

	slot1 = {}
	slot2 = {}

	for slot6, slot7 in ipairs(slot0.mDataList) do
		if 5 <= #slot1 then
			break
		end

		for slot11, slot12 in pairs(slot1) do
			table.insert(slot2, slot12.hero)
		end

		slot8, slot9 = slot0.getItemHpAndRp(slot0, slot7)
		slot10, slot11 = slot0.isHeroAlreadyInTeam(slot0, slot7)

		if (slot8 == nil or 0 < slot8) and slot10 == 0 and slot0.isHeroIgnore(slot0, slot7) == false and slot0.isHeroGotoWar(slot0, slot7) == false and slot0.isHeroGotoWork(slot0, slot7) == false and slot0.isHeroSelected(slot0, slot7) == false and slot0.isHaveSameHero(slot0, slot7, slot2) == false and slot0.isLimitNumOver(slot0) == false then
			if slot0.isMainCityWar then
				if not slot7.RevivalTime then
					table.insert(slot1, {
						hero = slot7,
						order = slot6
					})
				elseif slot7.RevivalTime and slot7.RevivalTime <= Player:getCurrentTime() then
					table.insert(slot1, {
						hero = slot7,
						order = slot6
					})
				end
			elseif slot0.mIsSwingJYfight then
				if slot0.getHeroProfessionInTeam(slot0, slot7, slot2) == false then
					table.insert(slot1, {
						hero = slot7,
						order = slot6
					})
				end
			else
				table.insert(slot1, {
					hero = slot7,
					order = slot6
				})
			end
		end
	end

	table.sort(slot1, function (slot0, slot1)
		slot3 = HeroModel.items[slot1.hero.ModelId].profession
		slot4 = 0
		slot5 = 0

		if HeroModel.items[slot0.hero.ModelId].profession == 1 or slot2 == 3 or slot2 == 5 then
			slot4 = 1
		end

		if slot3 == 1 or slot3 == 3 or slot3 == 5 then
			slot5 = 1
		end

		if slot4 == slot5 then
			return slot0.order < slot1.order
		else
			return slot5 < slot4
		end

		return 
	end)

	for slot6, slot7 in pairs(slot1) do
		slot0.selectOneHero(slot0, slot7.hero)
	end

	slot0.refreshUIState(slot0)

	return 
end
slot0.onReadyAction = function (slot0)
	if slot0.getSelectHeroCount(slot0) < slot0.minCount then
		ui.showFlashView(TR("至少要选择%d个侠客出战~", slot0.minCount))
		Guide.manager:guideError()

		return 
	end

	if slot0.limitCount ~= 0 and slot1 ~= slot0.limitCount then
		ui.showFlashView(TR("需要选择%d个侠客出战~", slot0.limitCount))

		return 
	end

	slot2 = {}
	slot3 = {}

	for slot7, slot8 in ipairs(slot0.selectHeroList) do
		if slot8.playerId then
			table.insert(slot2, slot8.playerId)
		else
			table.insert(slot2, slot8.ModelId)
		end
	end

	if (ZhenfaFightenumConfig.items[slot0.mCallModelSub] and true) or false then
		table.insert(slot2, slot0.mStratageID)
	end

	if slot0.isTimedBoss then
		table.insert(slot2, slot0.useGoods)
	end

	if slot0.callback then
		dump(slot2)

		if not slot0.noNeedVit then
			if Resource.isEnough(ResourceTypeSub.eVit, slot0.mTotalResNeed) then
				slot0.callback(slot2)
			end
		else
			slot0.callback(slot2)
		end
	end

	LayerManager.removeLayer(slot0)

	return 
end
slot0.onCreateGridAction = function (slot0, slot1, slot2, slot3)
	slot4 = slot1.getContentSize(slot1)
	slot6 = slot0.createHeroHeader(slot0, slot5)
	slot7, slot8 = slot0.isHeroSelected(slot0, slot0.mDataList[slot2])

	if slot7 == true then
		slot9 = slot0.loadShader(slot0.Darklight)

		if slot6.cardNode.mHeaderSprite then
			slot6.cardNode.mHeaderSprite:setGLProgram(slot9)
		end

		if slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eStar).node ~= nil then
			slot11 = pairs
			slot12 = slot10.starImgList or {}

			for slot14, slot15 in slot11(slot12) do
				slot15.setGLProgram(slot15, slot9)
			end

			slot11 = pairs
			slot12 = slot10.exStarImgList or {}

			for slot14, slot15 in slot11(slot12) do
				slot15.setGLProgram(slot15, slot9)
			end
		end

		slot12 = slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eProgress).rpProgress1
		slot13 = slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eProgress).rpProgress2

		if slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eProgress).hpProgress ~= nil then
			slot11.mBarSprite:setColor(cc.c3b(180, 180, 180))
		end

		if slot12 ~= nil then
			slot12.mBarSprite:setColor(cc.c3b(180, 180, 180))
		end

		if slot13 ~= nil then
			slot13.mBarSprite:setColor(cc.c3b(180, 180, 180))
		end
	end

	slot6.selectSprite:setVisible(slot7)
	slot6.setScale(slot6, 0.9)
	slot6.setAnchorPoint(slot6, cc.p(0.5, 0.5))
	slot6.setPosition(slot6, slot4.width/2, slot4.height/2)

	slot0.mTempCard = slot6

	slot1.addChild(slot1, slot6)

	slot1.itemLayout = slot6

	return 
end
slot0.onStrategyBtnClickAction = function (slot0)
	if not Utility.moduleIsOpen(ModuleSub.eNewZhenfa, true) then
		return 
	end

	if not slot0.checkStrategyEnable(slot0) then
		ui.showFlashView(TR("【当前功能不允许使用阵法】"))

		return 
	end

	if slot0.getSelectHeroCount(slot0) ~= ZhenfaConfig.items[1].needHeroNum then
		ui.showFlashView(TR("【需五人队伍才能结阵】"))

		return 
	end

	LayerManager.addLayer({
		cleanUp = false,
		name = "strategy.StrategySelectLayer",
		zOrder = Enums.ZOrderType.ePopLayer,
		data = {
			modleId = slot0.mCallModelSub,
			stratageID = slot0.mStratageID,
			selectCallBack = function (slot0)
				slot0:selectStrategy(slot0)

				return 
			end
		}
	})

	return 
end
slot0.selectOneProfession = function (slot0, slot1)
	if slot0.mSelectedTag == slot1 then
		return 
	end

	for slot5, slot6 in ipairs(slot0.professionNodeList) do
		slot6.selectSprite:setVisible(slot6.professionTag == slot1)
	end

	slot2 = {}

	function slot3(slot0)
		for slot4, slot5 in ipairs(slot0.mercenaryList) do
			if Utility.isEntityId(slot5) and HeroModel.items[MercenaryObj:getMercenaryInfoById(slot5).MercenaryHeroInfo.ModelId].profession == slot0 then
				clone(slot6.MercenaryHeroInfo).playerId = slot5

				table.insert(slot1, clone(slot6.MercenaryHeroInfo))
			end
		end

		for slot4, slot5 in pairs(HeroObj:getListByProfession(slot0)) do
			table.insert(slot1, slot5)
		end

		return 
	end

	if slot1 == 0 then
		for slot7 = 1, 5, 1 do
			slot3(slot7)
		end
	else
		slot3(slot1)
	end

	slot0.mDataList = clone(slot2)

	if slot0.isMainCityWar then
		for slot7, slot8 in ipairs(slot0.mDataList) do
			for slot12, slot13 in ipairs(slot0.revivalInfo) do
				if slot8.ModelId == slot13.HeroModelId then
					slot8.RevivalNum = slot13.RevivalNum
					slot8.RevivalTime = slot13.RevivalTime
				end
			end
		end
	end

	table.sort(slot0.mDataList, function (slot0, slot1)
		slot2 = 0
		slot3 = 0

		if slot0.playerId then
			slot2 = 1
		end

		if slot1.playerId then
			slot3 = 1
		end

		if slot2 == slot3 then
			if ((15 <= HeroModel.items[slot0.ModelId].quality and 1) or 0) == ((15 <= HeroModel.items[slot1.ModelId].quality and 1) or 0) then
				return slot1.Fap < slot0.Fap
			else
				return slot5 < slot4
			end
		else
			return slot3 < slot2
		end

		return 
	end)

	slot4 = #slot0.mDataList

	if not slot0.isInitOnteam then
		slot0.dealOnTeamData(slot0)

		slot0.isInitOnteam = true
	end

	slot0.mHeroGridView:setItemNum(slot4)
	slot0.mHeroGridView:jumpToTop()

	slot5 = false

	for slot9, slot10 in ipairs(slot0.mDataList) do
		slot11, slot12 = slot0.getItemHpAndRp(slot0, slot10)

		if slot11 ~= nil and slot11 == 0 then
			slot5 = true

			break
		end
	end

	slot0.mSelectedTag = slot1

	return 
end
slot0.selectOneHero = function (slot0, slot1)
	slot2, slot3 = slot0.isHeroSelected(slot0, slot1)

	if slot2 == true then
		slot0.heroUnWork(slot0, slot3)

		if slot0.cityWarTeamData[slot1.ModelId] then
			slot4.state = nil
		end

		if slot0.mIsSwingJYfight then
			slot0.refreshIgnoreHeroList(slot0, slot1)
		end
	else
		slot5, slot6 = slot0.getItemHpAndRp(slot0, slot0.mDataList[slot0.getHeroDataIndex(slot0, slot1)])

		if slot5 ~= nil and slot5 == 0 then
			if slot0.rebirthCallback ~= nil then
				slot0.rebirthCallback(slot1.ModelId)
				LayerManager.removeLayer(slot0)
			else
				ui.showFlashView(TR("该侠客已经阵亡，不能出战！"))
			end

			return 
		end

		if slot0.isMainCityWar and slot4.RevivalTime and Player:getCurrentTime() < slot4.RevivalTime then
			slot0.rebirthCallback(slot1.ModelId)
			LayerManager.removeLayer(slot0)

			return 
		end

		if slot0.isHeroGotoWar(slot0, slot1) == true then
			ui.showFlashView(TR("该侠客已在其他地方出战，不能再次选择！"))

			return 
		end

		if slot0.isHeroGotoWork(slot0, slot1) == true then
			ui.showFlashView(TR("该侠客已经上阵，不能再次选择！"))

			return 
		end

		slot7, slot8 = slot0.isHeroAlreadyInTeam(slot0, slot1)

		if 0 < slot7 then
			ui.showFlashView((slot7 == 2 and TR("该侠客已经编队，不能再次选择！")) or TR("该侠客已经出战，不能再次选择！"))

			return 
		end

		if slot0.findEmptyGrid(slot0) == 0 then
			ui.showFlashView(TR("出战阵容已满员"))

			return 
		end

		if slot0.mIsSwingJYfight then
			slot10 = HeroModel.items[slot1.ModelId].profession

			if slot0.getHeroProfessionInTeam(slot0, slot1) then
				ui.showFlashView(TR("%s职业的侠客已上阵", slot0[slot10 + 1].titleText))

				return 
			end
		end

		if slot0.isLimitNumOver(slot0) then
			ui.showFlashView(TR("限制上阵%s人", slot0.limitCount))

			return 
		end

		if slot0.isHaveSameHero(slot0, slot1) then
			ui.showFlashView(TR("已经上阵相同人物"))

			return 
		end

		slot0.heroToWork(slot0, slot1, slot9)

		if slot0.mIsSwingJYfight then
			slot0.refreshIgnoreHeroList(slot0, slot1)
		end
	end

	if slot0.mIsSwingJYfight then
		slot0.mHeroGridView:reloadData()
	else
		slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot1))
	end

	if slot0.pveOnlinePatrol ~= false then
		slot0.refreshPveOnlingUI(slot0)
	end

	return 
end
slot0.refreshPveOnlingUI = function (slot0)
	slot1 = 0

	for slot5, slot6 in pairs(slot0.selectHeroList) do
		if slot6.ModelId ~= 0 then
			slot1 = slot1 + HeroObj:getItem(slot6.ModelId).Star
		end
	end

	slot2 = PveOnlineStarConfig.items[slot1].addR/10000 + 1

	for slot7, slot8 in pairs(Utility.analysisStrResList(slot3)) do
		slot9 = Resource.getDaibiImg(slot8.resourceId)
		slot10 = slot8.num*60*slot2

		if slot8.resourceId == ResourceTypeSub.eGold then
			slot0.pveOnlingNode.goldNum:setString(TR("{%s} %s / 每小时", slot9, math.floor(Utility.numberWithUnit(slot10))))
		elseif slot8.resourceId == ResourceTypeSub.eVit then
			slot0.pveOnlingNode.vitNum:setString(TR("{%s} %s / 每小时", slot9, math.floor(Utility.numberWithUnit(slot10))))
		end
	end

	slot0.totalStars:setString(TR("总星数：%s", slot1))
	slot0.starSp:setPositionX(slot0.totalStars:getContentSize().width + slot0.totalStars:getPositionX() + 15)

	return 
end
slot0.refreshIgnoreHeroList = function (slot0, slot1)
	slot2 = {}

	for slot6, slot7 in pairs(slot0.selectHeroList) do
		if slot7.ModelId ~= 0 then
			table.insert(slot2, HeroModel.items[slot7.ModelId].profession)
		end
	end

	slot0.ignoreHeroList = {}

	for slot6, slot7 in pairs(slot0.mDataList) do
		if slot1.ModelId ~= slot7.ModelId and slot0.isHeroSelected(slot0, slot7) == false then
			slot8 = HeroModel.items[slot7.ModelId].profession

			for slot12, slot13 in pairs(slot2) do
				if slot8 == slot13 then
					table.insert(slot0.ignoreHeroList, slot7.ModelId)

					break
				end
			end
		end
	end

	return 
end
slot0.heroToWork = function (slot0, slot1, slot2)
	if slot0.cityWarTeamData[(slot1 and slot1.ModelId) or 0] then
		slot3.state = slot3.originState
	end

	slot5 = slot0.createFigureHero(slot0, slot0.mDataList[slot0.getHeroDataIndex(slot0, slot1)])

	slot5.setIgnoreAnchorPointForPosition(slot5, false)
	slot5.setAnchorPoint(slot5, cc.p(0.5, 0.5))
	slot5.setPosition(slot5, slot4)
	slot5.setLocalZOrder(slot5, slot0.getZorderByIndex(slot0, slot2))
	slot5.setScale(slot5, (slot0.headerNodeList[slot2].pos.y*0.3)/190 - 1.3)
	slot0.mBgCampInfo:addChild(slot5)

	slot0.headerNodeList[slot2].node = slot5
	slot0.headerNodeList[slot2].zorder = slot0.getZorderByIndex(slot0, slot2)
	slot0.headerNodeList[slot2].scale = (slot0.headerNodeList[slot2].pos.y*0.3)/190 - 1.4
	slot0.selectHeroList[slot2] = slot1

	return 
end
slot0.heroUnWork = function (slot0, slot1)
	slot0.headerNodeList[slot1].node:removeFromParent()

	slot0.headerNodeList[slot1].node = nil
	slot0.selectHeroList[slot1] = {
		playerId = "0",
		ModelId = 0
	}

	if slot0.checkStrategyEnable(slot0) and slot0.findEmptyGrid(slot0) then
		slot0.selectStrategy(slot0)
	end

	return 
end
slot0.refreshUIState = function (slot0)
	slot1 = 0
	slot2 = 0
	slot3 = PlayerAttrObj:getPlayerAttrByName("Lv")

	for slot7 = 1, slot0, 1 do
		slot1 = slot1 + (HeroObj:getItem(slot0.selectHeroList[slot7].ModelId or 0) or {}.Fap or 0)
		slot2 = slot2 + Utility.getNeedVitByFap(HeroObj.getItem(slot0.selectHeroList[slot7].ModelId or 0) or {}.Fap or 0)
	end

	if 0 < slot1 then
		slot1 = slot1 + Player:getGameData("Push_SkillTotalFap")
	end

	if slot0.isPvp then
		slot2 = PvpLvUseConfig.items[slot3].vitUse
	elseif slot0.isPve and next(slot0.pveData) then
		slot2 = PveNodeModel.items[slot0.pveData.chapterId][slot0.pveData.nodeId].nodeBattleNeed
	end

	slot0.mTotalResNeed = slot2

	if slot0.mVitCostR then
		slot0.mTotalResNeed = math.floor(slot0.mTotalResNeed*(slot0.mVitCostR - 1))
	end

	slot0.mFapLabel:setString(Utility.numberWithUnit(slot1))
	slot0.mResNeedLabel:setString(Utility.numberWithUnit(slot0.mTotalResNeed))
	slot0.mCountLabel:setString(TR("出战阵容 (%d/%d)", slot0.getSelectHeroCount(slot0), slot0))

	if slot0.limitCount ~= 0 then
		slot0.mCountLabel:setString(TR("出战阵容 (%d/%d)", slot0.getSelectHeroCount(slot0), slot0.limitCount))
	end

	return 
end
slot0.createHeroHeader = function (slot0, slot1)
	slot2 = {
		Enums.CardShowAttr.eLevel,
		Enums.CardShowAttr.eStar,
		Enums.CardShowAttr.eTrainLv
	}

	if slot0.showStatusBar == true then
		table.insert(slot2, Enums.CardShowAttr.eProgress)
	end

	slot3, slot4, slot5 = slot0.getItemHpAndRp(slot0, slot1)

	if slot4 == nil then
		slot4 = 0
		slot6 = nil
		slot4 = cjson.decode((slot1.AttrContent and slot1) or HeroObj:getItem(slot1.ModelId).AttrContent or "").Ang
	end

	slot6, slot7, slot8, slot9 = Utility.getHeroCampProfessionImg(slot1.ModelId)
	slot10, slot11 = Utility.getColorValue(HeroTrainColorlvRelation.items[slot1.TrainLv].colorLv, true)

	if (slot3 ~= nil and slot3 == 0) or slot0.isHeroIgnore(slot0, slot1) == true then
		slot11 = ""
	end

	slot0.createLayoutTemplateNode(slot0, "heroTemplateNode", {
		professionImg = slot7,
		nameText = slot11 .. Resource.getName(slot1.ModelId)
	}).cardNode:setCardData(nil, slot2, slot1)
	slot0.createLayoutTemplateNode(slot0, "heroTemplateNode", {
		professionImg = slot7,
		nameText = slot11 .. Resource.getName(slot1.ModelId)
	}).cardNode:setClickAction(function ()
		slot0:selectOneHero(slot0)

		if not tolua.isnull(tolua.isnull) then
			slot0:refreshUIState()
		end

		return 
	end)

	if slot0.showStatusBar == true then
		if slot3 then
			slot13.cardNode:setHpProgressValue(slot3, slot5)
		end

		if slot4 then
			slot13.cardNode:setRpProgressValue(slot4)
		end
	end

	if slot3 ~= nil and slot3 == 0 then
		slot13.cardNode:setGray()
		slot13.deadSprite:setVisible(true)

		if slot0.rebirthCallback ~= nil then
			slot13.deadSprite:setTexture("gcz_31.png")
		end
	elseif slot0.isHeroIgnore(slot0, slot1) == true then
		slot13.cardNode:setGray()
		slot13.disableSprite:setVisible(true)
		slot13.cardNode:setClickAction(function ()
			if 0 < slot0.minTrainLv then
				ui.showFlashView(TR("%s侠客才能参与", Utility.getColorName(HeroTrainColorlvRelation.items[slot0.minTrainLv].colorLv)))
			end

			return 
		end)
	else
		if slot0.gotoWorkImage then
			slot13.gotoWorkSprite:setTexture(slot0.gotoWorkImage)
		end

		slot14, slot15 = slot0.isHeroAlreadyInTeam(slot0, slot1)

		if 0 < slot14 then
			slot13.inTeamSprite:setTexture((slot14 == 1 and "gcz_21.png") or "gcz_16.png")
			slot13.inTeamSprite:setVisible(true)
			slot13.indexSprite:setVisible(true)
			slot13.indexSprite.label:setString(slot15)
		else
			slot13.otherWarSprite:setVisible(slot0.isHeroGotoWar(slot0, slot1))
			slot13.gotoWorkSprite:setVisible(slot0.isHeroGotoWork(slot0, slot1))
		end
	end

	if slot0.isMainCityWar then
		if slot1.RevivalTime and Player:getCurrentTime() < slot1.RevivalTime then
			slot13.deadSprite:setVisible(true)
			slot13.cardNode:setGray()

			if slot0.rebirthCallback ~= nil then
				slot13.deadSprite:setTexture("gcz_31.png")
			end
		end

		if slot1.RevivalTime and Player:getCurrentTime() < slot1.RevivalTime then
			slot13.revivalNode:setVisible(true)

			slot14 = nil
			slot14 = Utility.schedule(slot13, function ()
				if 0 < slot0.RevivalTime - Player:getCurrentTime() then
					slot1.revivalNode.timeLabel:setString(MqTime.formatAsDay(slot0))
				else
					slot1.revivalNode:setVisible(false)
					slot1.revivalNode.setVisible:stopAllActions()

					slot2 = nil

					slot3.mHeroGridView:refreshCell(false:getHeroDataIndex(slot0))
				end

				return 
			end, 1)
		end
	end

	if slot1.playerId then
		slot13.friendTag:setVisible(true)
	else
		slot13.friendTag:setVisible(false)
	end

	return slot13
end
slot0.createFigureHero = function (slot0, slot1)
	return UIWrap.newControl("FigureHero", {
		async = true,
		heroModelId = slot1.ModelId,
		clickAction = function ()
			slot0:selectOneHero(slot0)

			if not tolua.isnull(tolua.isnull) then
				slot0:refreshUIState()
			end

			return 
		end
	})
end
slot0.selectStrategy = function (slot0, slot1)
	if not slot0.checkStrategyEnable(slot0) then
		return 
	end

	slot2 = ZhenfaModel.items[slot1]

	if not slot1 or not slot2 then
		slot0.mStratageID = 0

		slot0.strategyBtn:loadTextures("zhenfa_2.png", "zhenfa_2.png")
		slot0.strategyText:setString("")

		return 
	end

	slot0.mStratageID = slot1

	if slot2.pic ~= "" then
		slot0.strategyBtn:loadTextures(slot2.uiPic .. ".png", slot2.uiPic .. ".png")

		slot3, slot7 = Utility.getColorValue(slot2.colorLv)

		slot0.strategyText:setString(slot4 .. slot2.name)
	end

	return 
end
slot0.getClickItem = function (slot0, slot1, slot2)
	slot3 = nil

	for slot7, slot8 in ipairs(slot0.headerNodeList) do
		if slot8.pos.x - 60 <= slot1 and slot1 <= slot8.pos.x + 60 and slot8.pos.y - 20 <= slot2 and slot2 <= slot8.pos.y + 180 then
			slot3 = slot8

			break
		end
	end

	return slot3
end
slot0.onBeganEvent = function (slot0, slot1, slot2)
	slot0.lastClickPos = nil
	slot0.lastNodePos = nil
	slot0.clickItem = slot0.getClickItem(slot0, slot1, slot2)

	if slot0.clickItem ~= nil and slot0.clickItem.node ~= nil then
		slot0.clickItem.node:setLocalZOrder(5)

		slot0.lastNodePos = slot0.clickItem.pos
	else
		slot0.clickItem = nil
	end

	return 
end
slot0.onMovedEvent = function (slot0, slot1, slot2)
	if slot0.clickItem == nil or slot0.clickItem.node == nil or slot0.lastNodePos == nil then
		return 
	end

	if slot0.lastClickPos == nil then
		slot0.lastClickPos = cc.p(slot1, slot2)
	else
		slot4 = slot2 - slot0.lastClickPos.y

		if 3 <= math.abs(slot3) or 3 <= math.abs(slot4) then
			slot0.lastNodePos = cc.p(slot0.lastNodePos.x + slot3, slot0.lastNodePos.y + slot4)

			slot0.clickItem.node:setPosition(slot0.lastNodePos)
			slot0.clickItem.node:setScale((slot0.lastNodePos.y*0.3)/190 - 1.3)

			slot0.lastClickPos = cc.p(slot1, slot2)
		end
	end

	return 
end
slot0.onEndedEvent = function (slot0, slot1, slot2)
	if slot0.clickItem == nil or slot0.clickItem.node == nil or slot0.lastClickPos == nil then
		return 
	end

	if slot0.getClickItem(slot0, slot1, slot2) ~= nil and slot3.index ~= slot0.clickItem.index then
		if slot3.node ~= nil then
			slot3.node:runAction(cc.MoveTo:create(0.1, slot0.clickItem.pos))
			slot3.node:setLocalZOrder(slot0.getZorderByIndex(slot0, slot0.clickItem.index))
			slot3.node:setScale((slot0.clickItem.pos.y*0.3)/190 - 1.3)
		end

		slot0.clickItem.node:runAction(cc.MoveTo:create(0.1, slot3.pos))
		slot0.clickItem.node:setLocalZOrder(slot0.getZorderByIndex(slot0, slot3.index))
		slot0.clickItem.node:setScale((slot3.pos.y*0.3)/190 - 1.3)

		slot0.headerNodeList[slot0.clickItem.index].node = slot3.node
		slot0.headerNodeList[slot3.index].node = slot0.clickItem.node
		slot0.selectHeroList[slot0.clickItem.index] = slot0.selectHeroList[slot3.index]
		slot0.selectHeroList[slot3.index] = slot0.selectHeroList[slot0.clickItem.index]
	else
		slot0.clickItem.node:runAction(cc.MoveTo:create(0.1, slot0.clickItem.pos))
		slot0.clickItem.node:setLocalZOrder(slot0.getZorderByIndex(slot0, slot0.clickItem.index))
		slot0.clickItem.node:setScale((slot0.clickItem.pos.y*0.3)/190 - 1.3)
	end

	slot0.clickItem = nil
	slot0.lastClickPos = nil
	slot0.lastNodePos = nil

	return 
end
slot0.getZorderByIndex = function (slot0, slot1)
	return ({
		4,
		2,
		5,
		3,
		1
	})[slot1]
end
slot0.getHeroProfessionInTeam = function (slot0, slot1, slot2)
	slot3 = HeroModel.items[slot1.ModelId].profession
	slot4 = {}
	slot5 = pairs
	slot6 = slot2 or slot0.selectHeroList

	for slot8, slot9 in slot5(slot6) do
		if slot9.ModelId ~= 0 then
			table.insert(slot4, HeroModel.items[slot9.ModelId].profession)
		end
	end

	for slot8, slot9 in pairs(slot4) do
		if slot3 == slot9 then
			return true
		end
	end

	return false
end
slot0.getHeroDataIndex = function (slot0, slot1)
	if slot1 then
		for slot5, slot6 in ipairs(slot0.mDataList) do
			if slot6.ModelId == slot1.ModelId and slot6.playerId == slot1.playerId then
				return slot5
			end
		end
	end

	return 0
end
slot0.findEmptyGrid = function (slot0)
	slot1 = 0

	for slot5 = 1, slot0, 1 do
		if slot0.selectHeroList[slot5].ModelId == nil or slot6 == 0 then
			slot1 = slot5

			break
		end
	end

	return slot1
end
slot0.isHeroGotoWar = function (slot0, slot1)
	slot2 = pairs
	slot3 = slot0.alreadyGotoWar or {}

	for slot5, slot6 in slot2(slot3) do
		if slot6 == slot1.ModelId then
			return true
		end
	end

	return false
end
slot0.isHeroGotoWork = function (slot0, slot1)
	slot2 = pairs
	slot3 = slot0.alreadyGotoWork or {}

	for slot5, slot6 in slot2(slot3) do
		if slot6 == slot1.ModelId then
			return true
		end
	end

	return false
end
slot0.isHaveSameHero = function (slot0, slot1, slot2)
	slot3 = pairs
	slot4 = slot2 or slot0.selectHeroList

	for slot6, slot7 in slot3(slot4) do
		if slot7.ModelId == slot1.ModelId then
			return true
		end
	end

	return false
end
slot0.isHeroAlreadyInTeam = function (slot0, slot1)
	if #slot0.cityWarTeamData == nil then
		return 0
	end

	if slot0.cityWarTeamData[slot1.ModelId] or {}.state == 4 then
		return 2, slot2.index
	elseif slot2.state then
		return 1, slot2.index
	end

	return 0
end
slot0.isHeroIgnore = function (slot0, slot1)
	slot2 = pairs
	slot3 = slot0.ignoreHeroList or {}

	for slot5, slot6 in slot2(slot3) do
		if slot6 == slot1.ModelId then
			return true
		end
	end

	if HeroModel.items[slot1.ModelId] == nil then
		return true
	end

	slot3 = pairs
	slot4 = slot0.ignoreCampList or {}

	for slot6, slot7 in slot3(slot4) do
		if slot7 == slot2.camp then
			return true
		end
	end

	slot3 = pairs
	slot4 = slot0.ignoreProfessionList or {}

	for slot6, slot7 in slot3(slot4) do
		if slot7 == slot2.profession then
			return true
		end
	end

	if slot0.ignoreSexId ~= nil and slot0.ignoreSexId == slot2.sex then
		return true
	end

	if 0 < slot0.minTrainLv then
		slot3 = nil

		for slot7, slot8 in ipairs(slot0.mDataList) do
			if slot8.ModelId == slot1.ModelId then
				slot3 = slot8

				break
			end
		end

		return slot3.TrainLv < slot0.minTrainLv
	end

	return false
end
slot0.isHeroSelected = function (slot0, slot1)
	if slot1 then
		for slot5, slot6 in pairs(slot0.selectHeroList) do
			if slot6.ModelId == slot1.ModelId and slot6.playerId == slot1.playerId then
				return true, slot5
			end
		end
	end

	return false
end
slot0.getSelectHeroCount = function (slot0)
	slot1 = 0

	for slot5 = 1, slot0, 1 do
		if slot0.selectHeroList[slot5].ModelId ~= nil and 0 < slot6 then
			slot1 = slot1 + 1
		end
	end

	return slot1
end
slot0.getItemHpAndRp = function (slot0, slot1)
	slot2, slot3, slot4 = nil
	slot5 = pairs
	slot6 = slot0.statusList or {}

	for slot8, slot9 in slot5(slot6) do
		if slot9.ModelId == slot1.ModelId then
			slot4 = slot9.TotalHP or slot9.TotalHp
			slot3 = slot9.Ang
			slot2 = slot9.Hp

			break
		end
	end

	return slot2, slot3, slot4
end
slot0.dealOnTeamData = function (slot0)
	for slot4, slot5 in ipairs(string.split(slot0.currSlotString, ",")) do
		slot6 = tonumber(slot5) or 0

		if slot4 == slot0 then
			slot0.selectStrategy(slot0, slot6)

			break
		end

		if 0 < slot6 or Utility.isEntityId(slot5) then
			if Utility.isEntityId(slot5) then
				slot6 = MercenaryObj:getMercenaryInfoById(slot5).MercenaryHeroInfo.ModelId
			end

			slot0.heroToWork(slot0, {
				ModelId = slot6,
				playerId = (Utility.isEntityId(slot5) and slot5) or nil
			}, slot4)
		end
	end

	slot0.refreshUIState(slot0)

	return 
end
slot0.isLimitNumOver = function (slot0)
	if slot0.limitCount == 0 then
		return false
	elseif slot0.getSelectHeroCount(slot0) < slot0.limitCount then
		return false
	else
		return true
	end

	return 
end
slot0.checkStrategyEnable = function (slot0)
	return ((ZhenfaFightenumConfig.items[slot0.mCallModelSub] and true) or false) and Utility.moduleIsOpen(ModuleSub.eNewZhenfa, false)
end
slot0.realExecuteGuide = function (slot0)
	slot1 = 0

	for slot5, slot6 in pairs(slot0.selectHeroList) do
		if 0 < slot6.ModelId then
			slot1 = slot1 + 1
		end
	end

	slot2, slot3 = Guide.manager:getGuideInfo()

	if slot3 == 10201 and 0 < slot1 then
		Guide.manager:nextStep(slot3)
	elseif slot3 == 10401 and 1 < slot1 then
		Guide.manager:nextStep(slot3)
	end

	slot0.executeGuide(slot0)

	return 
end
slot0.executeGuide = function (slot0)
	Guide.manager:exeGuideList({
		[10201] = {
			clickNode = slot2(1)
		},
		[10202] = {
			clickNode = slot0.mOkBtn
		},
		[10401] = {
			clickNode = slot2(1)
		},
		[10402] = {
			clickNode = slot0.mOkBtn
		},
		[20401] = {
			clickNode = slot0.oneKeySetBtn
		},
		[20402] = {
			clickNode = slot0.mOkBtn
		},
		[20701] = {
			clickNode = slot0.mOkBtn
		},
		[800203] = {
			saveStep = true,
			overClose = true,
			clickNode = slot0.mOkBtn
		},
		[8002021] = {
			clickNode = slot0.oneKeySetBtn
		}
	})

	return 
end

return slot0
