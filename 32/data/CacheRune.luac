slot0 = class("CacheRune", {})
slot0.ctor = function (slot0)
	slot0.reset(slot0)

	return 
end
slot0.reset = function (slot0)
	slot0.mRuneList = {}

	return 
end
slot0.setList = function (slot0, slot1)
	slot0.mRuneList = slot1

	return 
end
slot0.getList = function (slot0)
	return slot0.mRuneList
end
slot0.modifyItemList = function (slot0, slot1)
	for slot5, slot6 in pairs(slot1) do
		slot0.modifyRune(slot0, slot6)
	end

	return 
end
slot0.modifyRune = function (slot0, slot1)
	slot2 = slot1.EntityId

	if not slot1 or not Utility.isEntityId(slot2) then
		return 
	end

	slot3 = false

	for slot7, slot8 in ipairs(slot0.mRuneList) do
		if slot8.EntityId == slot1.EntityId then
			slot3 = true
			slot0.mRuneList[slot7] = slot1

			break
		end
	end

	if not slot3 then
		table.insert(slot0.mRuneList, slot1)
	end

	return 
end
slot0.getItem = function (slot0, slot1)
	slot2 = nil

	for slot6, slot7 in ipairs(slot0.mRuneList) do
		if slot1 == slot7.EntityId then
			slot2 = slot7

			break
		end
	end

	return slot2
end
slot0.removeItem = function (slot0, slot1)
	for slot5, slot6 in ipairs(slot0.mRuneList) do
		if slot1 == slot6.EntityId then
			table.remove(slot0.mRuneList, slot5)

			break
		end
	end

	return 
end
slot0.getItemCount = function (slot0, slot1)
	slot2 = 0

	for slot6, slot7 in pairs(slot0.mRuneList) do
		if slot7.ModelId == slot1 then
			slot2 = slot2 + 1
		end
	end

	return slot2
end

return slot0
