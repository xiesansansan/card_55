slot0 = class("EtlyAutoHookSubLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false
	})
end)
slot0.uiTree = {
	{
		name = "untitled73",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 1136,
				y = 448
			}
		},
		children = {
			{
				name = "mBg2",
				cType = "Sprite",
				params = {
					scale = 0.8,
					hide = true,
					image = "dgjz_25.png",
					anchor = {
						x = 0.5,
						y = 0.8
					},
					pos = {
						x = -152.32,
						y = 64.22
					}
				},
				children = {}
			},
			{
				name = "mLabelBg",
				cType = "Sprite",
				params = {
					image = "dgjz_28.png",
					hide = true,
					pos = {
						x = -139.39,
						y = 133.9
					}
				},
				children = {}
			},
			{
				name = "mChapterLabel",
				cType = "Label",
				params = {
					fontSize = 18,
					emptyInit = true,
					isRichText = true,
					color = {
						g = 255,
						r = 255,
						b = 255
					},
					pos = {
						x = -141.14,
						y = 133.26
					},
					text = TR("第一三七章")
				},
				children = {}
			},
			{
				name = "mBox",
				cType = "Sprite",
				params = {
					image = "dgjz_24.png",
					pos = {
						x = -149.34,
						y = 66.39
					}
				},
				children = {}
			},
			{
				name = "mBoxEffect",
				cType = "Effect",
				params = {
					loop = true,
					hide = true,
					isPlayAnimation = true,
					dataFile = "effect_ui_yuanbaodiaoluo",
					pos = {
						x = -147.97,
						y = 48.51
					}
				},
				children = {}
			},
			{
				name = "untitled66",
				cType = "Scale9Sprite",
				params = {
					image = "c_118.png",
					pos = {
						x = -149.99,
						y = 12.28
					},
					size = {
						width = 215,
						height = 27
					}
				},
				children = {}
			},
			{
				name = "mTimeOutLabel",
				cType = "Label",
				params = {
					fontSize = 20,
					text = "00:00:00",
					color = {
						g = 255,
						r = 255,
						b = 255
					},
					pos = {
						x = -149.6,
						y = 13.8
					}
				},
				children = {}
			},
			{
				name = "untitled81",
				cType = "Node",
				params = {
					pos = {
						x = -199.95,
						y = 15.86
					},
					size = {
						width = 101.78,
						height = 96.97
					}
				},
				children = {
					{
						name = "untitled80",
						cType = "RedDot",
						params = {
							subKey = "IfConDrawAndFreeGetTimeOutReward",
							moduleId = 4002
						},
						children = {}
					}
				}
			},
			{
				name = "untitled68",
				cType = "Button",
				params = {
					image = "c_pure.png",
					clickAction = "onClickExpend",
					pos = {
						x = -145.67,
						y = 39.96
					},
					size = {
						width = 175.16,
						height = 160.81
					}
				},
				children = {}
			},
			{
				name = "mExpedNode",
				cType = "Node",
				params = {
					hide = true,
					pos = {
						x = -292.53,
						y = -289.97
					}
				},
				children = {
					{
						name = "mSpeedGridView",
						cType = "GridView",
						params = {
							createColCb = "onSpeedCreateGrid",
							itemNum = 1,
							selectIndex = 1,
							colCount = 1,
							celHeight = 28,
							pos = {
								x = 142.72,
								y = 254.46
							},
							size = {
								width = 197.32,
								height = 68
							}
						},
						children = {
							{
								name = "speedGridItem",
								cType = "TemplateNode",
								custom = {
									{
										value = "goods-modelId",
										name = "modelId",
										type = "string"
									},
									{
										value = "goods-num",
										name = "num",
										type = "string"
									}
								},
								params = {
									pos = {
										x = 56.02,
										y = 30.45
									}
								},
								children = {
									{
										name = "goods",
										cType = "ResLabel",
										params = {
											isBig = false,
											modelId = 1111,
											num = 0,
											color = {
												g = 255,
												r = 255,
												b = 255
											},
											pos = {
												x = 0,
												y = 9.03
											}
										},
										children = {}
									}
								}
							}
						}
					},
					{
						name = "untitled16",
						cType = "Scale9Sprite",
						params = {
							image = "dgjz_27.png",
							pos = {
								x = 142.2,
								y = 150.86
							},
							size = {
								width = 210,
								height = 94.17
							}
						},
						children = {
							{
								name = "untitled27",
								cType = "Sprite",
								params = {
									image = "dgjz_26.png",
									pos = {
										x = 181.73,
										y = 105.57
									}
								},
								children = {}
							},
							{
								name = "untitled28",
								cType = "Sprite",
								params = {
									scaleX = -1,
									image = "dgjz_26.png",
									pos = {
										x = 27.57,
										y = 106.13
									}
								},
								children = {}
							},
							{
								name = "untitled29",
								cType = "Label",
								params = {
									fontSize = 22,
									align = 0,
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = 62.01,
										y = 105.44
									},
									text = TR("挂机收益")
								},
								children = {}
							}
						}
					},
					{
						name = "mEmptyTip",
						cType = "Label",
						params = {
							fontSize = 24,
							hide = true,
							color = {
								g = 255,
								r = 255,
								b = 255
							},
							pos = {
								x = 149.87,
								y = 142.68
							},
							text = TR("暂无产出")
						},
						children = {}
					},
					{
						name = "mGridView",
						cType = "GridView",
						params = {
							createColCb = "onCreateGrid",
							itemNum = 1,
							selectIndex = 1,
							colCount = 3,
							celHeight = 58,
							pos = {
								x = 141.87,
								y = 150.42
							},
							size = {
								width = 206.51,
								height = 92.61
							}
						},
						children = {
							{
								name = "gridItem",
								cType = "TemplateNode",
								custom = {
									{
										value = "untitled63-initParams",
										name = "head",
										type = "string"
									}
								},
								params = {
									pos = {
										x = 59.31,
										y = 54.24
									}
								},
								children = {
									{
										name = "untitled63",
										cType = "CardNode",
										params = {
											scale = 0.7,
											allowClick = true,
											initParams = {},
											pos = {
												x = -2.29,
												y = 0.12
											}
										},
										children = {}
									}
								}
							}
						}
					},
					{
						name = "untitled43",
						cType = "Scale9Sprite",
						params = {
							image = "xklz_10.png",
							hide = true,
							pos = {
								x = 141.16,
								y = 405.06
							},
							size = {
								width = 150,
								height = 27
							}
						},
						children = {
							{
								name = "mHookProgressLabel",
								cType = "Label",
								params = {
									fontSize = 18,
									text = "",
									color = {
										g = 216,
										r = 215,
										b = 217
									},
									pos = {
										x = 61.5,
										y = 13.5
									}
								},
								children = {}
							}
						}
					},
					{
						name = "mTipLabel",
						cType = "Label",
						params = {
							fontSize = 20,
							emptyInit = true,
							hide = true,
							color = {
								g = 255,
								r = 255,
								b = 255
							},
							pos = {
								x = 148.12,
								y = 87.43
							},
							text = TR("产出一次奖励")
						},
						children = {}
					},
					{
						name = "untitled32",
						cType = "Button",
						params = {
							image = "c_27.png",
							clickAction = "onGetRewardCb",
							pos = {
								x = 89.22,
								y = 73.8
							},
							titleText = TR("领取")
						},
						children = {
							{
								name = "untitled67",
								cType = "RedDot",
								params = {
									subKey = "IfConDrawTimeOutReward",
									moduleId = 4002
								},
								children = {}
							}
						}
					},
					{
						name = "untitled77",
						cType = "Button",
						params = {
							image = "c_32.png",
							clickAction = "onClickQuick",
							pos = {
								x = 196.18,
								y = 73.05
							},
							titleText = TR("快速收益")
						},
						children = {
							{
								name = "untitled78",
								cType = "RedDot",
								params = {
									subKey = "IfFreeGetTimeOutNum",
									moduleId = 4002
								},
								children = {}
							}
						}
					}
				}
			}
		}
	}
}
slot1 = require("common.SpineManager")
slot2 = require("common.LoopBackgroundSprite")
slot0.ctor = function (slot0, slot1)
	slot0.mFreeTime = slot1.freeTime
	slot0.callBack = slot1.callback
	slot0.isActivity = slot1.isActivity
	slot0.rewardNodes = {}

	slot0.super.ctor(slot0)
	slot0.initUI(slot0)

	if slot0.isActivity then
		slot0.getHookInfo(slot0)
	end

	ui.addTouchEvent({
		swallowTouch = false,
		node = slot0,
		beganEvent = function ()
			return true
		end,
		endedEvent = function (slot0, slot1)
			if not ui.touchInNode(slot0, slot0.mBg2) and slot0.mExpedNode:isVisible() then
				slot0:onClickExpend()
			end

			return 
		end
	})

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)
	slot0.mTipLabel:setString(TR("%s分钟产出一次奖励", EtlyConfig.items[1].timeOutPutOnceNeed/60))
	EventAuto:registerAutoEvent(slot0.mBox, RedDotObj:getEvents(ModuleSub.eEtlyPoint, "IfConDrawTimeOutReward"), function (slot0)
		slot0:refreshRewardState()

		return 
	end)

	return 
end
slot0.onSpeedCreateGrid = function (slot0, slot1, slot2, slot3)
	if not next(Utility.analysisStrResList(EtlyNodeModel.items[slot0.chapterId].timeOutputStr)) then
		return 
	end

	slot5 = slot0.createLayoutTemplateNode(slot0, "speedGridItem", {
		modelId = slot4[slot2].resourceId,
		num = slot4[slot2].num
	})

	if slot4[slot2].resourceId == ResourceTypeSub.eGold then
		slot0.goldItem = slot5
	end

	slot5.setPosition(slot5, slot1.getContentSize(slot1).width/2, slot1.getContentSize(slot1).height/2)
	slot1.addChild(slot1, slot5)
	slot5.goods:setPosition(cc.p(-slot1.getContentSize(slot1).width/2, 0))

	slot6 = UIWrap.newControl("Label", {
		fontSize = 20,
		text = string.format("/%s分钟", EtlyConfig.items[1].timeOutPutOnceNeed/60),
		color = cc.c3b(255, 255, 255),
		anchor = cc.p(0, 0.5)
	})

	slot6.setPosition(slot6, cc.p(-slot1.getContentSize(slot1).width/2 + slot5.goods:getContentSize().width + slot5.goods.label:getContentSize().width, -1))
	slot5.goods:getParent():addChild(slot6)

	return 
end
slot0.refreshRewardInfo = function (slot0)
	slot0.mEmptyTip:setVisible(#Utility.analysisStrResList(slot0.timeOutResourceStr) <= 0)
	slot0.mGridView:setItemNum(#slot1)
	slot0.mChapterLabel:setString(string.format("第%s层", Utility.getChineseNum(EtlyNodeModel.items[slot0.chapterId].showNumC)))
	slot0.mSpeedGridView:setItemNum(#Utility.analysisStrResList(EtlyNodeModel.items[slot0.chapterId].timeOutputStr))
	slot0.refreshRewardState(slot0)

	return 
end
slot0.refreshRewardState = function (slot0)
	slot1 = RedDotObj:isValid(ModuleSub.eEtlyPoint, "IfConDrawTimeOutReward")

	if slot0.isActivity and slot1 then
		ui.setWaveAnimation(slot0.mBox, 3.5)
	else
		slot0.mBox:stopAllActions()
		slot0.mBox:setRotation(0)
	end

	slot0.mBoxEffect:setVisible(slot0.isActivity and slot1)
	slot0.mLabelBg:setVisible(slot0.isActivity)

	return 
end
slot0.refreshHookProgress = function (slot0)
	slot1, slot2 = slot0.calcCurHookValue(slot0)

	if slot2 == 100 then
		slot0.mHookProgressLabel:setString(TR("挂机进度:%d%%", slot2))
	else
		slot0.mHookProgressLabel:setString(TR("挂机进度:%.1f%%", slot2))
	end

	return 
end
slot0.refreshTimeOut = function (slot0)
	slot0.mTimeOutLabel:setString(string.format("%s", MqTime.formatAsHour(slot0.timeOutTime)))

	return 
end
slot0.onCreateGrid = function (slot0, slot1, slot2, slot3)
	if not next(Utility.analysisStrResList(slot0.timeOutResourceStr)) then
		return 
	end

	slot5 = slot0.createLayoutTemplateNode(slot0, "gridItem", {
		head = {
			cardInfo = {
				modelId = slot4[slot2].resourceId,
				num = slot4[slot2].num
			},
			showAttrs = {
				Enums.CardShowAttr.eBorder,
				Enums.CardShowAttr.eNum
			}
		}
	})

	slot5.setPosition(slot5, slot1.getContentSize(slot1).width/2, slot1.getContentSize(slot1).height/2)
	slot1.addChild(slot1, slot5)

	return 
end
slot0.calcCurHookValue = function (slot0)
	return slot0.timeOutTime/EtlyConfig.items[1].timeOutPutMaxTime*100, math.min(100, slot0.timeOutTime/EtlyConfig.items[1].timeOutPutMaxTime*100)
end
slot0.updateTime = function (slot0)
	if slot0.mUpdateAction then
		slot0.stopAction(slot0, slot0.mUpdateAction)

		slot0.mUpdateAction = nil
	end

	if slot0.mRefreshAction then
		slot0.mGridView:stopAction(slot0.mRefreshAction)

		slot0.mRefreshAction = nil
	end

	slot0.mUpdateAction = Utility.schedule(slot0, function ()
		if 100 < slot0:calcCurHookValue() then
			slot0:stopAction(slot0.mUpdateAction)

			slot0.stopAction.mUpdateAction = nil
		else
			slot0:refreshHookProgress()
			slot0.refreshHookProgress:refreshTimeOut()

			slot0.refreshHookProgress.refreshTimeOut.timeOutTime = slot0.timeOutTime + 1
		end

		return 
	end, 1)
	slot0.mRefreshAction = Utility.schedule(slot0.mGridView, function ()
		if 100 < slot0:calcCurHookValue() then
			slot0.mGridView:stopAction(slot0.mRefreshAction)

			slot0.mGridView.stopAction.mRefreshAction = nil
		else
			print("getHookInfo")
			print:getHookInfo()
		end

		return 
	end, 60)

	return 
end
slot0.onGetRewardCb = function (slot0, slot1)
	if slot0.canGetResource then
		slot0.requestGetReward(slot0)
	else
		ui.showFlashView(TR("暂时没有奖励可以领取噢！"))
	end

	return 
end
slot0.onClickQuick = function (slot0)
	ui.showMessageBox({
		titleText = TR("快速收益"),
		okCallback = function (...)
			slot0:requestDrawFreeTimeOut()

			return 
		end,
		cancelCallback = function (...)
			return 
		end,
		diyUICallback = function (slot0, slot1)
			slot0.addChild(slot0, slot2)
			slot0.addChild(slot0, slot3)
			slot0.addChild(slot0, UIWrap.newControl("Label", {
				isRichText = true,
				fontSize = 24,
				text = TR("立即获得%s%s%s分钟的挂机收益", "#8BA857", EtlyConfig.items[1].freeGetTimeOutTime/60, "#252525"),
				pos = cc.p(slot1.width*0.5, slot1.height*0.6),
				anchor = anchor,
				color = cc.c3b(37, 37, 37)
			}))

			return 
		end
	})

	return 
end
slot0.onShowReward = function (slot0)
	slot3 = {}

	for slot7, slot8 in pairs(slot2) do
		table.insert(slot3, {
			resourceId = slot8.resourceId
		})
	end

	LayerManager.addLayer({
		cleanUp = false,
		name = "commonlayer.DlgRewardShowLayer",
		data = {
			title = TR("奖励预览"),
			rewardList = slot3
		},
		zOrder = Enums.ZOrderType.ePopLayer
	})

	return 
end
slot0.getHookInfo = function (slot0, slot1)
	slot0.canGetResource = false

	slot0.socketRequest(slot0, {
		methodName = "GetTimeOutInfo",
		moduleName = "EtlyInfo",
		methodData = {},
		successCallback = function (slot0)
			slot0.canGetResource = true
			slot0.chapterId = slot0.CommonMaxNodeId
			slot0.timeOutTime = slot0.TimeOutTime
			slot0.timeOutResourceStr = slot0.TimeOutResourceStr
			slot0.isActivity = 0 < slot0.CommonMaxNodeId

			if not slot0.mInit then
				slot0.mInit = true

				slot0:updateTime()
			end

			slot0:refreshRewardInfo()

			if slot0.refreshRewardInfo then
				slot1()
			end

			return 
		end
	})

	return 
end
slot0.requestGetReward = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "DrawTimeOut",
		moduleName = "EtlyInfo",
		methodData = {},
		successCallback = function (slot0)
			slot0.timeOutTime = slot0.TimeOutTime
			slot0.timeOutResourceStr = slot0.TimeOutResourceStr

			MqAudio.playEffect("guajihuode.mp3")

			slot0.canGetResource = false

			ui.showFlashReward({
				BaseGetGameResourceList = slot0.BaseGetGameResourceList
			})
			slot0:refreshHookProgress()
			slot0:refreshRewardInfo()
			slot0:refreshTimeOut()

			if not slot0.mUpdateAction and not slot0.mRefreshAction then
				slot0:updateTime()
			end

			return 
		end
	})

	return 
end
slot0.requestDrawFreeTimeOut = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "DrawFreeTimeOut",
		moduleName = "EtlyInfo",
		methodData = {},
		successCallback = function (slot0)
			ui.showFlashReward(slot0)

			slot0.mFreeTime = slot0.FreeGetTimeOutNum

			if slot0.callBack then
				slot0.callBack(slot0.FreeGetTimeOutNum)
			end

			return 
		end
	})

	return 
end
slot0.onClickExpend = function (slot0)
	if not slot0.isActivity then
		ui.showFlashView(TR("通关第一层后开启剑窟试炼"))

		return 
	end

	if slot0.mExpedNode:isVisible() then
		slot0.mBg2:runAction(cc.ScaleTo:create(0.3, 0))
		slot0.mExpedNode:setVisible(not slot0.mExpedNode:isVisible())
	else
		slot0.mBg2:setVisible(true)
		slot0.mBg2:runAction(cc.ScaleTo:create(0.1, 1))
		Utility.performWithDelay(slot0, function ()
			slot0.mExpedNode:setVisible(not slot0.mExpedNode:isVisible())

			return 
		end, 0.1)
	end

	return 
end

return slot0
