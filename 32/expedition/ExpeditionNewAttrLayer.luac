slot0 = class("ExpeditionNewAttrLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false,
		color = cc.c4b(0, 0, 0, 150)
	})
end)
slot0.uiTree = {
	{
		name = "msgbox",
		cType = "MsgBoxBg",
		params = {
			image = "tc_1.png",
			posApt = 1,
			pos = {
				x = 568,
				y = 320
			},
			size = {
				width = 700,
				height = 400
			},
			titleText = TR("累积加成")
		},
		children = {
			{
				name = "bgSprite",
				cType = "Scale9Sprite",
				params = {
					image = "c_24.png",
					pos = {
						x = 350,
						y = 193
					},
					size = {
						width = 635,
						height = 320
					}
				},
				children = {
					{
						name = "attrListView",
						cType = "ListView",
						params = {
							direction = true,
							anchor = {
								x = 0.5,
								y = 0.5
							},
							pos = {
								x = 317.5,
								y = 160
							},
							size = {
								width = 600,
								height = 300
							}
						},
						children = {
							{
								name = "attrLayout",
								cType = "Layout",
								params = {
									size = {
										width = 600,
										height = 50
									}
								},
								children = {}
							}
						}
					}
				}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.super.ctor(slot0)

	slot0.buffIdList = slot1.buffIdList

	dump(slot0.buffIdList, "self.buffIdList")
	slot0.initUI(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)

	function slot1(slot0)
		slot1 = {}
		slot2 = {}

		for slot6, slot7 in pairs(slot0) do
			table.insert(slot1, slot7)

			if table.maxn(slot1) == 2 then
				table.insert(slot2, slot1)

				slot1 = {}
			end
		end

		if 0 < table.maxn(slot1) then
			table.insert(slot2, slot1)
		end

		return slot2
	end

	slot2 = {}
	slot3 = {}
	slot4 = {}

	for slot8, slot9 in ipairs(slot0.buffIdList) do
		if slot2[slot9] then
			slot2[slot9].num = slot2[slot9].num + 1
		else
			slot2[slot9] = {
				num = 1,
				buffId = slot9,
				isSkill = 0 < NewexpeditionBuffConfig.items[slot9].skillId
			}
		end
	end

	for slot8, slot9 in pairs(slot2) do
		if slot9.isSkill then
			table.insert(slot4, slot9)
		else
			table.insert(slot3, slot9)
		end
	end

	table.sort(slot3, function (slot0, slot1)
		return slot0.buffId < slot1.buffId
	end)
	table.sort(slot4, function (slot0, slot1)
		return slot0.buffId < slot1.buffId
	end)

	slot5 = {}
	slot6 = 0

	for slot10, slot11 in ipairs(slot1(slot3)) do
		slot0.createLayoutTemplateNode(slot0, "attrLayout").setContentSize(slot12, cc.size(600, 40))

		for slot16, slot17 in ipairs(slot11) do
			slot19 = ""

			slot12.addChild(slot12, UIWrap.newControl("Label", {
				fontSize = 22,
				isRichText = true,
				text = string.format(NewexpeditionBuffConfig.items[slot17.buffId].intro, (Utility.isAttrNeedPercent(Utility.analysisStrAttrList(NewexpeditionBuffConfig.items[slot17.buffId].attrStr)[1].fightattr) and (slot20[1].value*slot17.num)/100) or slot20[1].value*slot17.num),
				anchor = cc.p(0, 0.5),
				color = cc.c3b(37, 37, 37),
				pos = cc.p((slot16 - 1)*270 + 80, 20)
			}))
		end

		slot0.attrListView:pushBackCustomItem(slot12)
	end

	dump(slot4, "skillList")

	for slot10, slot11 in ipairs(slot4) do
		slot13 = slot0.createLayoutTemplateNode(slot0, "attrLayout")
		slot15 = UIWrap.newControl("Label", {
			fontSize = 22,
			isRichText = true,
			text = Resource.getSkillIntroStr(NewexpeditionBuffConfig.items[slot11.buffId].skillId),
			anchor = cc.p(0, 0.5),
			color = cc.c3b(37, 37, 37),
			size = cc.size(570, 0)
		})

		print(slot15.getContentSize(slot15).height)
		slot13.setContentSize(slot13, cc.size(600, (slot15.getContentSize(slot15).height <= 40 and 40) or slot15.getContentSize(slot15).height + 8))
		slot15.setPosition(slot15, 30, ((slot15.getContentSize(slot15).height <= 40 and 40) or slot15.getContentSize(slot15).height + 8)*0.5)
		slot13.addChild(slot13, slot15)
		slot0.attrListView:pushBackCustomItem(slot13)
	end

	return 
end

return slot0
