slot0 = class("FeiJiCampReadyLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false,
		color = cc.c4b(0, 0, 0, 150)
	})
end)
slot0.uiTree = {
	{
		name = "untitled106",
		cType = "Sprite",
		params = {
			isFullScale = true,
			scaleApt = 2,
			posApt = 1,
			image = "zj_127.png",
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {}
	},
	{
		name = "untitled107",
		cType = "TopResourceNode",
		params = {
			scaleApt = 2,
			posApt = 1,
			anchor = {
				x = 1,
				y = 1
			},
			moduleIdList = {
				1111,
				1112,
				1114
			},
			pos = {
				x = 1136,
				y = 640
			}
		},
		children = {}
	},
	{
		name = "untitled112",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			isLiuHai = true,
			pos = {
				x = 0,
				y = 320
			}
		},
		children = {
			{
				name = "untitled113",
				cType = "Sprite",
				params = {
					image = "zj_176.png",
					pos = {
						x = 269.63,
						y = -88.26
					}
				},
				children = {}
			},
			{
				name = "untitled125",
				cType = "Sprite",
				params = {
					image = "xyyz_40.png",
					pos = {
						x = 301.01,
						y = 246.89
					}
				},
				children = {}
			},
			{
				name = "mCountLabel",
				cType = "Label",
				params = {
					fontSize = 22,
					pos = {
						x = 301,
						y = 250
					},
					text = TR("出战阵容 (0/5)")
				},
				children = {}
			},
			{
				name = "mBgCampInfo",
				cType = "Scale9Sprite",
				params = {
					image = "c_pure.png",
					anchor = {
						x = 0.5,
						y = 1
					},
					pos = {
						x = 320,
						y = 321
					},
					size = {
						width = 578,
						height = 640
					}
				},
				children = {
					{
						name = "untitled69",
						cType = "Sprite",
						custom = {
							{
								value = 1,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 333.62,
								y = 191.19
							}
						},
						children = {}
					},
					{
						name = "untitled68",
						cType = "Sprite",
						custom = {
							{
								value = 2,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 412.95,
								y = 284.82
							}
						},
						children = {}
					},
					{
						name = "untitled55",
						cType = "Sprite",
						custom = {
							{
								value = 3,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 64.9,
								y = 140.95
							}
						},
						children = {}
					},
					{
						name = "untitled54",
						cType = "Sprite",
						custom = {
							{
								value = 4,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 162.86,
								y = 250.34
							}
						},
						children = {}
					},
					{
						name = "untitled53",
						cType = "Sprite",
						custom = {
							{
								value = 5,
								name = "campTag",
								type = "integer"
							}
						},
						params = {
							image = "c_pure.png",
							pos = {
								x = 262.52,
								y = 334.5
							}
						},
						children = {}
					},
					{
						name = "strategyBtn",
						cType = "Button",
						params = {
							image = "tb_gn_31.png",
							clickAction = "onStrategyBtnClickAction",
							scale = 1,
							pos = {
								x = 48.75,
								y = 499
							}
						},
						children = {
							{
								name = "strategyText",
								cType = "Label",
								params = {
									outlineSize = 2,
									outlineColor = {
										g = 28,
										r = 58,
										b = 18
									},
									pos = {
										x = -0.9,
										y = -67.22
									},
									text = TR("点击添加阵法")
								},
								children = {}
							}
						}
					},
					{
						name = "fapSp",
						cType = "Sprite",
						params = {
							scale = 0.8,
							image = "c_82.png",
							pos = {
								x = 289.08,
								y = 107.33
							}
						},
						children = {
							{
								name = "untitled118",
								cType = "Sprite",
								params = {
									image = "c_80.png",
									pos = {
										x = 43.36,
										y = 39.91
									}
								},
								children = {}
							},
							{
								name = "mFapLabel",
								cType = "Label",
								params = {
									fontSize = 28,
									charCount = 12,
									text = "",
									fontName = "c_81.png",
									anchor = {
										x = 0,
										y = 0.5
									},
									pos = {
										x = 90.86,
										y = 35.13
									}
								},
								children = {}
							}
						}
					},
					{
						name = "resOwnBgSprite",
						cType = "Sprite",
						params = {
							image = "c_pure.png",
							pos = {
								x = 266.78,
								y = 59.74
							}
						},
						children = {
							{
								name = "untitled120",
								cType = "Label",
								params = {
									fontSize = 20,
									anchor = {
										x = 1,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = -5,
										y = 12
									},
									text = TR("总干粮:")
								},
								children = {}
							},
							{
								name = "untitled121",
								cType = "Sprite",
								params = {
									image = "db_1114.png",
									pos = {
										x = 10,
										y = 12
									}
								},
								children = {}
							},
							{
								name = "mResOwnLabel",
								cType = "Label",
								params = {
									fontSize = 20,
									text = "0",
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = 30,
										y = 11
									}
								},
								children = {}
							}
						}
					},
					{
						name = "resNeedBgSprite",
						cType = "Sprite",
						params = {
							image = "c_pure.png",
							pos = {
								x = 267.3,
								y = 27.67
							}
						},
						children = {
							{
								name = "untitled123",
								cType = "Label",
								params = {
									fontSize = 20,
									anchor = {
										x = 1,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = -5,
										y = 12
									},
									text = TR("消  耗:")
								},
								children = {}
							},
							{
								name = "untitled124",
								cType = "Sprite",
								params = {
									image = "db_1114.png",
									pos = {
										x = 10,
										y = 12
									}
								},
								children = {}
							},
							{
								name = "mResNeedLabel",
								cType = "Label",
								params = {
									fontSize = 20,
									text = "0",
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = 30,
										y = 11
									}
								},
								children = {}
							}
						}
					}
				}
			}
		}
	},
	{
		name = "untitled111",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 1136,
				y = 320
			}
		},
		children = {
			{
				name = "teamsInfoSprite",
				cType = "Node",
				params = {
					pos = {
						x = -527,
						y = 242
					}
				},
				children = {
					{
						name = "teamsListView",
						cType = "ListView",
						params = {
							direction = false,
							anchor = {
								x = 0.5,
								y = 0.5
							},
							pos = {
								x = 198,
								y = 14
							},
							size = {
								width = 450,
								height = 40
							}
						},
						children = {
							{
								name = "teamsLayout",
								cType = "Layout",
								custom = {
									{
										value = "untitled103-text",
										name = "labelStr",
										type = "string"
									},
									{
										value = "untitled102-teamIndex",
										name = "teamIndex",
										type = "string"
									}
								},
								params = {
									size = {
										width = 85,
										height = 40
									}
								},
								children = {
									{
										name = "untitled102",
										cType = "Button",
										custom = {
											{
												value = 1,
												name = "teamIndex",
												type = "integer"
											}
										},
										params = {
											image = "xyyz_41.png",
											clickAction = "onTeamBtnClickAction",
											childName = "setButton",
											pos = {
												x = 42,
												y = 20
											}
										},
										children = {
											{
												name = "untitled103",
												cType = "Label",
												params = {
													fontSize = 20,
													childName = "teamIndexLabel",
													outlineColor = {
														g = 34,
														r = 69,
														b = 13
													},
													pos = {
														x = 5,
														y = 0.78
													},
													text = TR("一队")
												},
												children = {}
											},
											{
												name = "untitled105",
												cType = "Sprite",
												params = {
													childName = "enoughSprite",
													image = "gcz_15.png",
													hide = true,
													pos = {
														x = -24.8,
														y = 7.19
													}
												},
												children = {}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			{
				name = "oneKeySetBtn",
				cType = "Button",
				params = {
					image = "c_19.png",
					clickAction = "onCampAction",
					pos = {
						x = -426,
						y = -284
					},
					titleText = TR("一键布阵")
				},
				children = {}
			},
			{
				name = "mOkBtn",
				cType = "Button",
				params = {
					image = "c_39.png",
					clickAction = "onReadyAction",
					pos = {
						x = -216,
						y = -284
					},
					titleText = TR("确 定")
				},
				children = {}
			},
			{
				name = "mBgHeroList",
				cType = "Scale9Sprite",
				params = {
					image = "c_9.png",
					anchor = {
						x = 0.5,
						y = 1
					},
					pos = {
						x = -327,
						y = 256
					},
					size = {
						width = 476,
						height = 520
					}
				},
				children = {
					{
						name = "mHeroGridView",
						cType = "GridView",
						params = {
							createColCb = "onCreateGridAction",
							asyncLoad = true,
							itemNum = 0,
							colCount = 4,
							selectIndex = 1,
							celHeight = 120,
							pos = {
								x = 238.78,
								y = 259.76
							},
							size = {
								width = 440,
								height = 480
							}
						},
						children = {
							{
								name = "heroTemplateNode",
								cType = "TemplateNode",
								custom = {
									{
										value = "untitled48-image",
										name = "professionImg",
										type = "string"
									},
									{
										value = "untitled49-text",
										name = "nameText",
										type = "string"
									}
								},
								params = {
									pos = {
										x = 0,
										y = 61
									},
									size = {
										width = 114,
										height = 120
									}
								},
								children = {
									{
										name = "untitled46",
										cType = "CardNode",
										params = {
											childName = "cardNode",
											allowClick = true,
											pos = {
												x = 57,
												y = 72
											}
										},
										children = {}
									},
									{
										name = "untitled47",
										cType = "Sprite",
										params = {
											image = "gcz_26.png",
											pos = {
												x = 57,
												y = 12
											}
										},
										children = {}
									},
									{
										name = "untitled49",
										cType = "Label",
										params = {
											fontSize = 18,
											isRichText = true,
											text = "Name",
											childName = "nameLabel",
											anchor = {
												x = 0,
												y = 0.5
											},
											color = {
												g = 248,
												r = 255,
												b = 234
											},
											pos = {
												x = 36,
												y = 12
											}
										},
										children = {}
									},
									{
										name = "untitled76",
										cType = "Sprite",
										params = {
											childName = "disableSprite",
											image = "fb_21.png",
											hide = true,
											pos = {
												x = 57,
												y = 72
											}
										},
										children = {}
									},
									{
										name = "untitled50",
										cType = "Sprite",
										params = {
											childName = "selectSprite",
											zOrder = 1,
											hide = true,
											image = "fb_24.png",
											pos = {
												x = 57,
												y = 72
											}
										},
										children = {}
									},
									{
										name = "untitled86",
										cType = "Sprite",
										params = {
											childName = "inTeamSprite",
											image = "gcz_16.png",
											hide = true,
											pos = {
												x = 57,
												y = 72
											}
										},
										children = {}
									},
									{
										name = "untitled87",
										cType = "Sprite",
										params = {
											childName = "indexSprite",
											image = "xyyz_44.png",
											hide = true,
											pos = {
												x = 90,
												y = 40
											}
										},
										children = {
											{
												name = "untitled88",
												cType = "Label",
												params = {
													fontSize = 16,
													childName = "label",
													text = "1",
													color = {
														g = 231,
														r = 255,
														b = 72
													},
													pos = {
														x = 16,
														y = 16
													}
												},
												children = {}
											}
										}
									},
									{
										name = "untitled48",
										cType = "Sprite",
										params = {
											childName = "professionSprite",
											scale = 0.7,
											image = "zj_72.png",
											anchor = {
												x = 1,
												y = 0.5
											},
											pos = {
												x = 34,
												y = 12
											}
										},
										children = {}
									},
									{
										name = "untitled126",
										cType = "Sprite",
										params = {
											childName = "friendTag",
											image = "swgmd_6.png",
											hide = true,
											pos = {
												x = 7.92,
												y = 99.06
											}
										},
										children = {}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	{
		name = "untitled108",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 0,
				y = 640
			}
		},
		children = {
			{
				name = "untitled109",
				cType = "Button",
				params = {
					clickAction = "onCloseLayer",
					image = "c_1.png",
					anchor = {
						x = 0,
						y = 1
					},
					pos = {
						x = 0,
						y = 0
					}
				},
				children = {}
			},
			{
				name = "untitled110",
				cType = "Sprite",
				params = {
					image = "xyyz_45.png",
					pos = {
						x = 174.51,
						y = -26
					}
				},
				children = {}
			}
		}
	}
}
slot1 = 5
slot2 = 6
slot3 = require("common.ShaderManager")
slot0.ctor = function (slot0, slot1)
	slot0.super.ctor(slot0, {
		swallow = true
	})

	slot0.callback = slot1.callback
	slot0.minCount = slot1.minCount or 1
	slot0.ignoreHeroList = slot1.ignoreHeroList or {}
	slot0.ignoreCampList = slot1.ignoreCampList or {}
	slot0.ignoreProfessionList = slot1.ignoreProfessionList or {}
	slot0.ignoreSexId = slot1.ignoreSexId or 0
	slot0.titleText = slot1.titleText
	slot0.showStatusBar = slot1.showStatusBar or false
	slot0.statusList = slot1.statusList or {}
	slot0.noNeedVit = slot1.noNeedVit or false
	slot0.minTrainLv = slot1.minTrainLv or 0
	slot0.mTotalResNeed = 0
	slot0.limitCount = slot1.limitCount or 0
	slot0.mStratageID = 0
	slot0.mCallModelSub = slot1.callModelSub or 0
	slot0.mTeamsList = (slot1.teamData and clone(slot1.teamData)) or {}
	slot0.mSetTeamIndex = 1
	slot0.teamTotalNum = slot1.teamTotalNum or 5
	slot0.mFromEtly = slot1.fromEtly == true
	slot0.mercenaryList = slot1.mercenaryList or {}

	if type(slot0.mercenaryList) ~= "table" or #slot0.mercenaryList == 0 then
		slot0.mercenaryList = MercenaryObj:getMercenaryIdByModuleId(slot0.mCallModelSub)
	end

	slot0.initUI(slot0)
	ui.addTouchEvent({
		node = slot0.mBgCampInfo,
		beganEvent = function (slot0, slot1)
			if not ui.touchInNode(slot0, slot0.mBgCampInfo) then
				return false
			end

			slot0:onBeganEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return true
		end,
		movedEvent = function (slot0, slot1)
			slot0:onMovedEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return 
		end,
		endedEvent = function (slot0, slot1)
			slot0:onEndedEvent(slot0.mBgCampInfo:convertTouchToNodeSpace(slot0).x, slot0.mBgCampInfo.convertTouchToNodeSpace(slot0).y)

			return 
		end
	})

	return 
end
slot0.initUI = function (slot0)
	slot1 = slot0.checkStrategyEnable(slot0)

	slot0.createUITree(slot0)

	slot0.mDataList = {}
	slot0.selectHeroList = {
		{
			playerId = "0",
			ModelId = 0
		},
		{
			playerId = "0",
			ModelId = 0
		},
		{
			playerId = "0",
			ModelId = 0
		},
		{
			playerId = "0",
			ModelId = 0
		},
		{
			playerId = "0",
			ModelId = 0
		}
	}
	slot0.headerNodeList = {}

	for slot5, slot6 in ipairs(slot0.getCustomChildren(slot0, slot0.mBgCampInfo, "campTag")) do
		slot0.headerNodeList[slot5] = {
			index = slot5,
			pos = cc.p(slot6.getPosition(slot6))
		}
	end

	if slot0.noNeedVit == true then
		slot0.mResOwnLabel:setVisible(false)
		slot0.resNeedBgSprite:setVisible(false)
		slot0.resOwnBgSprite:setVisible(false)
	else
		slot0.mResOwnLabel:setString(PlayerAttrObj:getPlayerAttrByName("Vit"))
	end

	slot0.strategyBtn:setVisible(slot1)
	slot0.onPopActionOver(slot0)

	return 
end
slot0.refreshTeamsList = function (slot0)
	slot0.teamsListView:removeAllItems()

	for slot4, slot5 in ipairs(slot0.mTeamsList) do
		slot0.createOneTeamListCell(slot0, slot4)
	end

	slot0.refreshTeamBtnState(slot0)
	slot0.refreshTeamInfo(slot0)
	ui.setListviewItemShow(slot0.teamsListView, slot0.mSetTeamIndex)

	return 
end
slot0.createOneTeamListCell = function (slot0, slot1)
	slot0.teamsListView:pushBackCustomItem(slot0.createLayoutTemplateNode(slot0, "teamsLayout", {
		teamIndex = slot1,
		labelStr = (slot0.mFromEtly and ((slot1 == 1 and TR("首战")) or TR("末战"))) or TR("%s队", Utility.getChineseNum(slot1))
	}))

	return 
end
slot0.refreshTeamBtnState = function (slot0)
	for slot4, slot5 in ipairs(slot0.teamsListView:getItems()) do
		slot5.setButton:loadTextures((slot5.setButton.teamIndex == slot0.mSetTeamIndex and "xyyz_42.png") or "xyyz_41.png", )
		slot5.setButton.enoughSprite:setVisible(not slot0.isEnoughPersonByTeamIndex(slot0, slot5.setButton.teamIndex))
	end

	return 
end
slot0.onTeamBtnClickAction = function (slot0, slot1)
	slot0.mSetTeamIndex = slot1.teamIndex

	slot0.refreshTeamBtnState(slot0)
	slot0.refreshTeamInfo(slot0)

	return 
end
slot0.refreshTeamInfo = function (slot0)
	slot1 = clone(slot0.mTeamsList[slot0.mSetTeamIndex].HeroInfoList)

	for slot5 = 1, slot0, 1 do
		if slot0.selectHeroList[slot5].ModelId ~= 0 then
			slot0.heroUnWork(slot0, slot5)
			slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot6))
		end
	end

	for slot5, slot6 in ipairs(slot1) do
		if 0 < slot6.ModelId then
			slot0.heroToWork(slot0, slot6, slot5)
			slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot6))
		end
	end

	slot0.selectStrategy(slot0, slot0.mTeamsList[slot0.mSetTeamIndex].StrategyId or 0)
	slot0.refreshUIState(slot0)

	return 
end
slot0.onCampAction = function (slot0)
	for slot4 = 1, slot0, 1 do
		if slot0.selectHeroList[slot4].ModelId ~= 0 then
			slot0.heroUnWork(slot0, slot4)
			slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot5))
		end
	end

	for slot4, slot5 in ipairs(slot0.mDataList) do
		if slot0.findEmptyGrid(slot0) == 0 then
			break
		end

		slot7, slot8 = slot0.getItemHpAndRp(slot0, slot5)
		slot9, slot10 = slot0.isHeroAlreadyInTeam(slot0, slot5)

		if (slot7 == nil or 0 < slot7) and slot9 == 0 and slot0.isHeroIgnore(slot0, slot5.ModelId) == false and slot0.isHeroSelected(slot0, slot5) == false and slot0.isLimitNumOver(slot0) == false then
			slot0.selectOneHero(slot0, slot5)
		end
	end

	slot0.refreshUIState(slot0)

	return 
end
slot0.onReadyAction = function (slot0)
	for slot4 = 1, #slot0.mTeamsList, 1 do
		if not slot0.isEnoughPersonByTeamIndex(slot0, slot4) then
			ui.showFlashView(TR("第%s编队人数不足~~", slot4))

			return 
		end
	end

	slot1 = {}

	for slot5 = 1, #slot0.mTeamsList, 1 do
		table.insert(slot1, slot0.getSlotListByTeamIndex(slot0, slot5))
	end

	if slot0.callback then
		slot0.callback(table.concat(slot1, "||"))
	end

	LayerManager.removeLayer(slot0)

	return 
end
slot0.onCreateGridAction = function (slot0, slot1, slot2, slot3)
	slot4 = slot1.getContentSize(slot1)
	slot6 = slot0.createHeroHeader(slot0, slot5)
	slot7, slot8 = slot0.isHeroSelected(slot0, slot0.mDataList[slot2])

	if slot7 == true then
		slot6.cardNode.mHeaderSprite:setGLProgram(slot9)

		if slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eStar).node ~= nil then
			slot11 = pairs
			slot12 = slot10.starImgList or {}

			for slot14, slot15 in slot11(slot12) do
				slot15.setGLProgram(slot15, slot9)
			end

			slot11 = pairs
			slot12 = slot10.exStarImgList or {}

			for slot14, slot15 in slot11(slot12) do
				slot15.setGLProgram(slot15, slot9)
			end
		end

		slot12 = slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eProgress).rpProgress1
		slot13 = slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eProgress).rpProgress2

		if slot6.cardNode:getAttrCtrl(Enums.CardShowAttr.eProgress).hpProgress ~= nil then
			slot11.mBarSprite:setColor(cc.c3b(180, 180, 180))
		end

		if slot12 ~= nil then
			slot12.mBarSprite:setColor(cc.c3b(180, 180, 180))
		end

		if slot13 ~= nil then
			slot13.mBarSprite:setColor(cc.c3b(180, 180, 180))
		end

		slot6.nameLabel:setOpacity(180)
	end

	slot6.selectSprite:setVisible(slot7)
	slot6.setScale(slot6, 0.9)
	slot6.setAnchorPoint(slot6, cc.p(0.5, 0.5))
	slot6.setPosition(slot6, slot4.width/2, slot4.height/2)
	slot1.addChild(slot1, slot6)

	slot1.itemLayout = slot6

	return 
end
slot0.onStrategyBtnClickAction = function (slot0)
	if not Utility.moduleIsOpen(ModuleSub.eNewZhenfa, true) then
		return 
	end

	if not slot0.checkStrategyEnable(slot0) then
		ui.showFlashView(TR("【当前功能不允许使用阵法】"))

		return 
	end

	if slot0.getSelectHeroCount(slot0) ~= ZhenfaConfig.items[1].needHeroNum then
		ui.showFlashView(TR("【需五人队伍才能结阵】"))

		return 
	end

	slot0.getStratageList(slot0)

	return 
end
slot0.selectOneProfession = function (slot0)
	slot1 = {}

	function slot2(slot0)
		for slot4, slot5 in ipairs(slot0.mercenaryList) do
			if Utility.isEntityId(slot5) and HeroModel.items[MercenaryObj:getMercenaryInfoById(slot5).MercenaryHeroInfo.ModelId].profession == slot0 then
				clone(slot6.MercenaryHeroInfo).playerId = slot5

				table.insert(slot1, clone(slot6.MercenaryHeroInfo))
			end
		end

		for slot4, slot5 in pairs(HeroObj:getListByProfession(slot0)) do
			table.insert(slot1, slot5)
		end

		return 
	end

	for slot6 = 1, 5, 1 do
		slot2(slot6)
	end

	slot0.mDataList = clone(slot1)

	table.sort(slot0.mDataList, function (slot0, slot1)
		slot2 = 0
		slot3 = 0

		if slot0.playerId then
			slot2 = 1
		end

		if slot1.playerId then
			slot3 = 1
		end

		if slot2 == slot3 then
			if ((15 <= HeroModel.items[slot0.ModelId].quality and 1) or 0) == ((15 <= HeroModel.items[slot1.ModelId].quality and 1) or 0) then
				return slot1.Fap < slot0.Fap
			else
				return slot5 < slot4
			end
		else
			return slot3 < slot2
		end

		return 
	end)
	slot0.mHeroGridView:setItemNum(#slot0.mDataList)

	return 
end
slot0.selectOneHero = function (slot0, slot1)
	slot2, slot3 = slot0.isHeroSelected(slot0, slot1)

	if slot2 == true then
		slot0.heroUnWork(slot0, slot3)
	else
		slot5, slot6 = slot0.getItemHpAndRp(slot0, slot0.mDataList[slot0.getHeroDataIndex(slot0, slot1)])

		if slot5 ~= nil and slot5 == 0 then
			ui.showFlashView(TR("该侠客已经阵亡，不能出战！"))

			return 
		end

		if slot0.findEmptyGrid(slot0) == 0 then
			ui.showFlashView(TR("出战阵容已满员"))

			return 
		end

		if slot0.isLimitNumOver(slot0) then
			ui.showFlashView(TR("限制上阵%s人", slot0.limitCount))

			return 
		end

		slot8, slot9 = slot0.isHeroAlreadyInTeam(slot0, slot1)

		if 0 < slot8 and slot8 ~= 2 then
			ui.showFlashView(TR("该侠客已经出战，不能再次选择！"))

			return 
		end

		slot0.heroToWork(slot0, slot1, slot7)
	end

	slot0.mHeroGridView:refreshCell(slot0.getHeroDataIndex(slot0, slot1))

	return 
end
slot0.heroToWork = function (slot0, slot1, slot2)
	for slot6, slot7 in ipairs(slot0.mTeamsList) do
		for slot11, slot12 in ipairs(slot7.HeroInfoList) do
			if slot12.ModelId == slot1.ModelId and slot12.playerId == slot1.playerId then
				slot12.ModelId = 0
				slot12.playerId = "0"

				break
			end
		end
	end

	slot0.mTeamsList[slot0.mSetTeamIndex].HeroInfoList[slot2].ModelId = slot1.ModelId
	slot0.mTeamsList[slot0.mSetTeamIndex].HeroInfoList[slot2].playerId = slot1.playerId

	slot0.refreshTeamBtnState(slot0)

	slot4 = slot0.createFigureHero(slot0, slot0.mDataList[slot0.getHeroDataIndex(slot0, slot1)])

	slot4.setIgnoreAnchorPointForPosition(slot4, false)
	slot4.setAnchorPoint(slot4, cc.p(0.5, 0.5))
	slot4.setPosition(slot4, slot3)
	slot4.setLocalZOrder(slot4, slot0.getZorderByIndex(slot0, slot2))
	slot4.setScale(slot4, (slot0.headerNodeList[slot2].pos.y*0.3)/190 - 1.3)
	slot0.mBgCampInfo:addChild(slot4)

	slot0.headerNodeList[slot2].node = slot4
	slot0.headerNodeList[slot2].zorder = slot0.getZorderByIndex(slot0, slot2)
	slot0.headerNodeList[slot2].scale = (slot0.headerNodeList[slot2].pos.y*0.3)/190 - 1.4
	slot0.selectHeroList[slot2].ModelId = slot1.ModelId
	slot0.selectHeroList[slot2].playerId = slot1.playerId

	return 
end
slot0.createFigureHero = function (slot0, slot1)
	return UIWrap.newControl("FigureHero", {
		async = true,
		heroModelId = slot1.ModelId,
		pos = cc.p(0, 0),
		clickAction = function ()
			slot0:selectOneHero(slot0)

			if not tolua.isnull(tolua.isnull) then
				slot0:refreshUIState()
			end

			return 
		end
	})
end
slot0.heroUnWork = function (slot0, slot1)
	slot0.headerNodeList[slot1].node:removeFromParent()

	slot0.headerNodeList[slot1].node = nil
	slot0.selectHeroList[slot1] = {
		playerId = "0",
		ModelId = 0
	}
	slot0.mTeamsList[slot0.mSetTeamIndex].HeroInfoList[slot1] = {
		playerId = "0",
		ModelId = 0
	}

	slot0.refreshTeamBtnState(slot0)

	if slot0.checkStrategyEnable(slot0) and slot0.findEmptyGrid(slot0) then
		slot0.selectStrategy(slot0)
	end

	return 
end
slot0.refreshUIState = function (slot0)
	slot1 = 0
	slot2 = 0
	slot3 = PlayerAttrObj:getPlayerAttrByName("Lv")

	for slot7 = 1, slot0, 1 do
		slot1 = slot1 + (HeroObj:getItem((slot0.selectHeroList[slot7] and slot0.selectHeroList[slot7].ModelId) or 0) or {}.Fap or 0)
		slot2 = slot2 + Utility.getNeedVitByFap(HeroObj.getItem((slot0.selectHeroList[slot7] and slot0.selectHeroList[slot7].ModelId) or 0) or {}.Fap or 0)
	end

	if 0 < slot1 then
		slot1 = slot1 + Player:getGameData("Push_SkillTotalFap")
	end

	slot0.mTotalResNeed = slot2

	slot0.mFapLabel:setString(Utility.numberWithUnit(slot1))
	slot0.mResNeedLabel:setString(Utility.numberWithUnit(slot0.mTotalResNeed))
	slot0.mCountLabel:setString(TR("出战阵容 (%d/%d)", slot0.getSelectHeroCount(slot0), slot0))

	if slot0.limitCount ~= 0 then
		slot0.mCountLabel:setString(TR("出战阵容 (%d/%d)", slot0.getSelectHeroCount(slot0), slot0.limitCount))
	end

	return 
end
slot0.createHeroHeader = function (slot0, slot1, slot2)
	slot3 = {
		Enums.CardShowAttr.eLevel,
		Enums.CardShowAttr.eStar,
		Enums.CardShowAttr.eTrainLv
	}

	if slot0.showStatusBar == true then
		table.insert(slot3, Enums.CardShowAttr.eProgress)
	end

	slot4, slot5, slot6 = slot0.getItemHpAndRp(slot0, slot1)

	if slot5 == nil then
		slot5 = cjson.decode(HeroObj:getItem(slot1.ModelId).AttrContent or "").Ang
	end

	slot7, slot8, slot9, slot10 = Utility.getHeroCampProfessionImg(slot1.ModelId)
	slot11, slot12 = Utility.getColorValue(HeroTrainColorlvRelation.items[slot1.TrainLv].colorLv, true)

	if (slot4 ~= nil and slot4 == 0) or slot0.isHeroIgnore(slot0, slot1.ModelId) == true then
		slot12 = ""
	end

	slot0.createLayoutTemplateNode(slot0, "heroTemplateNode", {
		professionImg = slot8,
		nameText = slot12 .. Resource.getName(slot1.ModelId)
	}).cardNode:setCardData(nil, slot3, slot1)
	slot0.createLayoutTemplateNode(slot0, "heroTemplateNode", {
		professionImg = slot8,
		nameText = slot12 .. Resource.getName(slot1.ModelId)
	}).cardNode:setClickAction(function ()
		slot0:selectOneHero(slot0)

		if not tolua.isnull(tolua.isnull) then
			slot0:refreshUIState()
		end

		return 
	end)

	if not slot2 then
		if slot0.showStatusBar == true then
			if slot4 then
				slot14.cardNode:setHpProgressValue(slot4, slot6)
			end

			if slot5 then
				slot14.cardNode:setRpProgressValue(slot5)
			end
		end

		if slot0.isHeroIgnore(slot0, slot1.ModelId) == true then
			slot14.professionSprite:setGray(true)
			slot14.cardNode:setGray()
			slot14.disableSprite:setVisible(true)
			slot14.cardNode:setClickAction(function ()
				if 0 < slot0.minTrainLv then
					ui.showFlashView(TR("%s侠客才能参与", Utility.getColorName(HeroTrainColorlvRelation.items[slot0.minTrainLv].colorLv)))
				end

				return 
			end)
		else
			slot15, slot16 = slot0.isHeroAlreadyInTeam(slot0, slot1)

			if slot15 == 2 then
				slot14.inTeamSprite:setTexture("gcz_16.png")
				slot14.inTeamSprite:setVisible(true)
				slot14.indexSprite:setVisible(true)
				slot14.indexSprite.label:setString(slot16)
				slot14.cardNode:setGray()
			end
		end
	end

	if slot1.playerId then
		slot14.friendTag:setVisible(true)
	else
		slot14.friendTag:setVisible(false)
	end

	return slot14
end
slot0.selectStrategy = function (slot0, slot1)
	if not slot0.checkStrategyEnable(slot0) then
		return 
	end

	slot2 = ZhenfaModel.items[slot1]

	if not slot1 or not slot2 then
		slot0.mStratageID = 0

		slot0.strategyBtn:loadTextures("zhenfa_2.png", "zhenfa_2.png")
		slot0.addSprite:setVisible(true)
		slot0.strategyText:setString("#FFEED0" .. TR("点击添加阵法"))

		slot0.mTeamsList[slot0.mSetTeamIndex].StrategyId = 0

		return 
	end

	slot0.mStratageID = slot1

	if slot2.pic ~= "" then
		slot0.strategyBtn:loadTextures(slot2.uiPic .. ".png", slot2.uiPic .. ".png")
		slot0.addSprite:setVisible(false)

		slot3, slot7 = Utility.getColorValue(slot2.colorLv)

		slot0.strategyText:setString(slot4 .. slot2.name)
	end

	for slot6, slot7 in ipairs(slot0.mTeamsList) do
		if slot7.StrategyId == slot1 then
			slot7.StrategyId = 0

			break
		end
	end

	slot0.mTeamsList[slot0.mSetTeamIndex].StrategyId = slot1

	return 
end
slot0.getClickItem = function (slot0, slot1, slot2)
	slot3 = nil

	for slot7, slot8 in ipairs(slot0.headerNodeList) do
		if slot8.pos.x - 60 <= slot1 and slot1 <= slot8.pos.x + 60 and slot8.pos.y - 20 <= slot2 and slot2 <= slot8.pos.y + 180 then
			slot3 = slot8

			break
		end
	end

	return slot3
end
slot0.onBeganEvent = function (slot0, slot1, slot2)
	slot0.lastClickPos = nil
	slot0.lastNodePos = nil
	slot0.clickItem = slot0.getClickItem(slot0, slot1, slot2)

	if slot0.clickItem ~= nil and slot0.clickItem.node ~= nil then
		slot0.clickItem.node:setLocalZOrder(5)

		slot0.lastNodePos = slot0.clickItem.pos
	else
		slot0.clickItem = nil
	end

	return 
end
slot0.onMovedEvent = function (slot0, slot1, slot2)
	if slot0.clickItem == nil or slot0.clickItem.node == nil or slot0.lastNodePos == nil then
		return 
	end

	if slot0.lastClickPos == nil then
		slot0.lastClickPos = cc.p(slot1, slot2)
	else
		slot4 = slot2 - slot0.lastClickPos.y

		if 3 <= math.abs(slot3) or 3 <= math.abs(slot4) then
			slot0.lastNodePos = cc.p(slot0.lastNodePos.x + slot3, slot0.lastNodePos.y + slot4)

			slot0.clickItem.node:setPosition(slot0.lastNodePos)
			slot0.clickItem.node:setScale((slot0.lastNodePos.y*0.3)/190 - 1.3)

			slot0.lastClickPos = cc.p(slot1, slot2)
		end
	end

	return 
end
slot0.onEndedEvent = function (slot0, slot1, slot2)
	if slot0.clickItem == nil or slot0.clickItem.node == nil or slot0.lastClickPos == nil then
		return 
	end

	if slot0.getClickItem(slot0, slot1, slot2) ~= nil and slot3.index ~= slot0.clickItem.index then
		if slot3.node ~= nil then
			slot3.node:runAction(cc.MoveTo:create(0.1, slot0.clickItem.pos))
			slot3.node:setLocalZOrder(slot0.getZorderByIndex(slot0, slot0.clickItem.index))
			slot3.node:setScale((slot0.clickItem.pos.y*0.3)/190 - 1.3)
		end

		slot0.clickItem.node:runAction(cc.MoveTo:create(0.1, slot3.pos))
		slot0.clickItem.node:setLocalZOrder(slot0.getZorderByIndex(slot0, slot3.index))
		slot0.clickItem.node:setScale((slot3.pos.y*0.3)/190 - 1.3)

		slot0.headerNodeList[slot0.clickItem.index].node = slot3.node
		slot0.headerNodeList[slot3.index].node = slot0.clickItem.node
		slot0.selectHeroList[slot0.clickItem.index] = slot0.selectHeroList[slot3.index]
		slot0.selectHeroList[slot3.index] = slot0.selectHeroList[slot0.clickItem.index]
		slot0.mTeamsList[slot0.mSetTeamIndex].HeroInfoList[slot0.clickItem.index] = slot0.selectHeroList[slot0.clickItem.index]
		slot0.mTeamsList[slot0.mSetTeamIndex].HeroInfoList[slot3.index] = slot0.selectHeroList[slot3.index]
	else
		slot0.clickItem.node:runAction(cc.MoveTo:create(0.1, slot0.clickItem.pos))
		slot0.clickItem.node:setLocalZOrder(slot0.getZorderByIndex(slot0, slot0.clickItem.index))
		slot0.clickItem.node:setScale((slot0.clickItem.pos.y*0.3)/190 - 1.3)
	end

	slot0.clickItem = nil
	slot0.lastClickPos = nil
	slot0.lastNodePos = nil

	return 
end
slot0.getHeroDataIndex = function (slot0, slot1)
	if slot1 then
		for slot5, slot6 in ipairs(slot0.mDataList) do
			if slot6.ModelId == slot1.ModelId and slot6.playerId == slot1.playerId then
				return slot5
			end
		end
	end

	return 0
end
slot0.findEmptyGrid = function (slot0)
	slot1 = 0

	for slot5 = 1, slot0, 1 do
		if slot0.selectHeroList[slot5].ModelId == nil or slot6 == 0 then
			slot1 = slot5

			break
		end
	end

	return slot1
end
slot0.isHeroAlreadyInTeam = function (slot0, slot1)
	if #slot0.mTeamsList == nil then
		return 0
	end

	for slot5, slot6 in ipairs(slot0.mTeamsList) do
		for slot10, slot11 in ipairs(slot6.HeroInfoList) do
			if slot11.ModelId == slot1.ModelId and slot11.playerId == slot1.playerId then
				return 2, slot5
			end
		end
	end

	return 0
end
slot0.isHeroIgnore = function (slot0, slot1)
	slot2 = pairs
	slot3 = slot0.ignoreHeroList or {}

	for slot5, slot6 in slot2(slot3) do
		if slot6 == slot1 then
			return true
		end
	end

	if HeroModel.items[slot1] == nil then
		return true
	end

	slot3 = pairs
	slot4 = slot0.ignoreCampList or {}

	for slot6, slot7 in slot3(slot4) do
		if slot7 == slot2.camp then
			return true
		end
	end

	slot3 = pairs
	slot4 = slot0.ignoreProfessionList or {}

	for slot6, slot7 in slot3(slot4) do
		if slot7 == slot2.profession then
			return true
		end
	end

	if slot0.ignoreSexId ~= nil and slot0.ignoreSexId == slot2.sex then
		return true
	end

	if 0 < slot0.minTrainLv then
		slot3 = nil

		for slot7, slot8 in ipairs(slot0.mDataList) do
			if slot8.ModelId == slot1 then
				slot3 = slot8

				break
			end
		end

		if slot3 then
			return slot3.TrainLv < slot0.minTrainLv
		else
			return true
		end
	end

	return false
end
slot0.isHeroSelected = function (slot0, slot1)
	if slot1 then
		for slot5, slot6 in pairs(slot0.selectHeroList) do
			if slot6.ModelId == slot1.ModelId and slot6.playerId == slot1.playerId then
				return true, slot5
			end
		end
	end

	return false
end
slot0.getSelectHeroCount = function (slot0)
	slot1 = 0

	for slot5 = 1, slot0, 1 do
		if slot0.selectHeroList[slot5].ModelId ~= nil and 0 < slot6 then
			slot1 = slot1 + 1
		end
	end

	return slot1
end
slot0.getItemHpAndRp = function (slot0, slot1)
	slot2, slot3, slot4 = nil
	slot5 = pairs
	slot6 = slot0.statusList or {}

	for slot8, slot9 in slot5(slot6) do
		if slot9.ModelId == slot1.ModelId then
			slot4 = slot9.TotalHP
			slot3 = slot9.Ang
			slot2 = slot9.Hp

			break
		end
	end

	return slot2, slot3, slot4
end
slot0.onPopActionOver = function (slot0)
	if next(slot0.mTeamsList) == nil or #slot0.mTeamsList < slot0.teamTotalNum then
		for slot4 = 1, slot0.teamTotalNum, 1 do
			slot0.addOneModelTeamList(slot0)
		end
	else
		slot0.sortSeverTeamData(slot0)
	end

	slot0.selectOneProfession(slot0)
	slot0.refreshTeamsList(slot0)

	return 
end
slot0.isLimitNumOver = function (slot0)
	if slot0.limitCount == 0 then
		return false
	elseif slot0.getSelectHeroCount(slot0) < slot0.limitCount then
		return false
	else
		return true
	end

	return 
end
slot0.checkStrategyEnable = function (slot0)
	return false
end
slot0.isEnoughPersonByTeamIndex = function (slot0, slot1)
	if not slot0.mTeamsList[slot1] then
		return false
	end

	slot2 = 0

	for slot6, slot7 in ipairs(slot0.mTeamsList[slot1].HeroInfoList) do
		if (slot7.ModelId and 0 < slot7.ModelId) or (slot7.playerId and Utility.isEntityId(slot7.playerId)) then
			slot2 = slot2 + 1
		end
	end

	return slot0.minCount <= slot2
end
slot0.getStratageList = function (slot0)
	slot0.safeRequest(slot0, {
		methodName = "GetInfo",
		moduleName = "Zhenfa",
		methodData = {
			0
		},
		successCallback = function (slot0)
			slot1 = {}
			slot2 = {}
			slot3 = ipairs
			slot4 = slot0.ZhenfaModelInfo or {}

			for slot6, slot7 in slot3(slot4) do
				slot8 = slot7.ZhenfaId

				for slot12, slot13 in ipairs(slot0.mTeamsList) do
					if slot13.StrategyId == slot8 then
						table.insert(slot2, slot8)

						break
					end
				end

				if not inTeams then
					table.insert(slot1, slot7)
				end
			end

			LayerManager.addLayer({
				cleanUp = false,
				name = "strategy.StrategySelectLayer",
				zOrder = Enums.ZOrderType.ePopLayer,
				data = {
					modleId = slot0.mCallModelSub,
					selectCallBack = function (slot0)
						slot0:selectStrategy(slot0)

						return 
					end,
					stratageList = slot1,
					inTeamsList = slot2
				}
			})

			return 
		end
	})

	return 
end
slot0.getSlotListByTeamIndex = function (slot0, slot1)
	slot2 = {}

	for slot7, slot8 in ipairs(slot0.mTeamsList[slot1].HeroInfoList) do
		if slot8.playerId and Utility.isEntityId(slot8.playerId) then
			table.insert(slot2, slot8.playerId)
		else
			table.insert(slot2, slot8.ModelId)
		end
	end

	if slot0.checkStrategyEnable(slot0) then
		table.insert(slot2, slot3.StrategyId)
	end

	return table.concat(slot2, ",")
end
slot0.sortSeverTeamData = function (slot0)
	slot1 = {}

	for slot5, slot6 in ipairs(slot0.mTeamsList) do
		slot1[slot5] = {
			HeroInfoList = {}
		}
		slot7 = string.splitBySep(slot6.FormationInfo, ",")

		for slot11 = 1, 5, 1 do
			slot1[slot5].HeroInfoList[slot11] = {}

			if slot7[slot11] and Utility.isEntityId(slot7[slot11]) then
				slot1[slot5].HeroInfoList[slot11].playerId = slot7[slot11]
				slot1[slot5].HeroInfoList[slot11].ModelId = Utility.getHeroInfo(slot7[slot11]).ModelId
			else
				slot1[slot5].HeroInfoList[slot11].ModelId = tonumber(slot7[slot11]) or 0
			end
		end

		slot1[slot5].StrategyId = tonumber(slot7[6]) or 0
	end

	slot0.mTeamsList = slot1

	return 
end
slot0.addOneModelTeamList = function (slot0)
	table.insert(slot0.mTeamsList, {
		StrategyId = 0,
		HeroInfoList = {
			{
				playerId = "0",
				ModelId = 0
			},
			{
				playerId = "0",
				ModelId = 0
			},
			{
				playerId = "0",
				ModelId = 0
			},
			{
				playerId = "0",
				ModelId = 0
			},
			{
				playerId = "0",
				ModelId = 0
			}
		}
	})

	return 
end
slot0.getZorderByIndex = function (slot0, slot1)
	return ({
		4,
		2,
		5,
		3,
		1
	})[slot1]
end
slot0.onCloseLayer = function (slot0)
	LayerManager.removeLayer(slot0)

	return 
end

return slot0
