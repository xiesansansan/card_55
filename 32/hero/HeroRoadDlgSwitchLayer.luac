slot0 = class("HeroRoadDlgSwitchLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = true,
		color = cc.c4b(0, 0, 0, 150)
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "MsgBoxBg",
		params = {
			closeAction = "onBackBtnClickAction",
			posApt = 1,
			image = "tc_2.png",
			pos = {
				x = 568,
				y = 320
			},
			size = {
				width = 590,
				height = 575
			},
			titleText = TR("专精切换")
		},
		children = {
			{
				name = "mSkillPic",
				cType = "Sprite",
				params = {
					image = "xkxx_24.png",
					pos = {
						x = 142.39,
						y = 487.58
					}
				},
				children = {}
			},
			{
				name = "untitled4",
				cType = "Scale9Sprite",
				params = {
					image = "c_94.png",
					pos = {
						x = 295,
						y = 265
					},
					size = {
						width = 530,
						height = 320
					}
				},
				children = {
					{
						name = "untitled5",
						cType = "Sprite",
						params = {
							image = "c_36.png",
							pos = {
								x = 105,
								y = 295
							}
						},
						children = {}
					},
					{
						name = "untitled9",
						cType = "Label",
						params = {
							color = {
								g = 37,
								r = 37,
								b = 37
							},
							pos = {
								x = 265,
								y = 295
							},
							text = TR("属性加成")
						},
						children = {}
					},
					{
						name = "untitled7",
						cType = "Sprite",
						params = {
							reverse = 1,
							image = "c_36.png",
							pos = {
								x = 427.59,
								y = 295
							}
						},
						children = {}
					},
					{
						name = "mGridView",
						cType = "GridView",
						params = {
							createColCb = "onAttrGridAction",
							itemNum = 0,
							selectIndex = 1,
							colCount = 4,
							celHeight = 28,
							pos = {
								x = 275.74,
								y = 230
							},
							size = {
								width = 508,
								height = 90
							}
						},
						children = {}
					},
					{
						name = "mNoAttrLabel",
						cType = "Label",
						params = {
							hide = true,
							color = {
								g = 65,
								r = 192,
								b = 65
							},
							pos = {
								x = 265,
								y = 230
							},
							text = TR("暂无属性加成")
						},
						children = {}
					},
					{
						name = "untitled6",
						cType = "Sprite",
						params = {
							image = "c_36.png",
							pos = {
								x = 105,
								y = 150
							}
						},
						children = {}
					},
					{
						name = "untitled10",
						cType = "Label",
						params = {
							color = {
								g = 37,
								r = 37,
								b = 37
							},
							pos = {
								x = 265,
								y = 150
							},
							text = TR("特殊天赋")
						},
						children = {}
					},
					{
						name = "untitled8",
						cType = "Sprite",
						params = {
							reverse = 1,
							image = "c_36.png",
							pos = {
								x = 427.59,
								y = 150
							}
						},
						children = {}
					},
					{
						name = "mListView",
						cType = "ListView",
						params = {
							direction = true,
							pos = {
								x = 5,
								y = 3
							},
							size = {
								width = 520,
								height = 130
							}
						},
						children = {
							{
								name = "templateSkillCell",
								cType = "Layout",
								params = {
									size = {
										width = 520,
										height = 50
									}
								},
								children = {
									{
										name = "untitled15",
										cType = "Label",
										params = {
											childName = "nameLabel",
											isRichText = true,
											anchor = {
												x = 1,
												y = 1
											},
											color = {
												g = 37,
												r = 37,
												b = 37
											},
											pos = {
												x = 75,
												y = 36
											},
											text = TR("名字")
										},
										children = {}
									},
									{
										name = "untitled16",
										cType = "Label",
										params = {
											fontSize = 20,
											isRichText = true,
											align = 0,
											childName = "infoLabel",
											valign = 0,
											anchor = {
												x = 0,
												y = 1
											},
											color = {
												g = 37,
												r = 37,
												b = 37
											},
											pos = {
												x = 80,
												y = 35
											},
											size = {
												width = 420,
												height = 0
											},
											text = TR("名字名字名字:")
										},
										children = {}
									}
								}
							}
						}
					}
				}
			},
			{
				name = "mStepLabel",
				cType = "Label",
				params = {
					emptyInit = true,
					isRichText = true,
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 203.03,
						y = 483.09
					},
					text = TR("当前进度")
				},
				children = {}
			},
			{
				name = "mResLabel",
				cType = "Label",
				params = {
					fontSize = 18,
					emptyInit = true,
					isRichText = true,
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 293.41,
						y = 93.52
					},
					text = TR("消耗:")
				},
				children = {}
			},
			{
				name = "mBtnActive",
				cType = "Button",
				params = {
					isDisable = true,
					clickAction = "onBtnActiveAction",
					image = "c_27.png",
					pos = {
						x = 294.32,
						y = 56
					},
					titleText = TR("启 用")
				},
				children = {}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.super.ctor(slot0)

	slot0.showRoadId = slot1.showRoadId
	slot0.currHeroId = slot1.currHeroId
	slot0.callback = slot1.callback
	slot0.heroModel = HeroModel.items[slot0.currHeroId]
	slot0.roadDecConfig = HeroRoadDecRelation.items[slot0.heroModel.profession]
	slot0.showDescModel = slot0.roadDecConfig[slot0.showRoadId]

	slot0.initUI(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0, function (slot0, slot1)
		if slot0.cType == "MsgBoxBg" then
			slot1.titleText = slot0.showDescModel.name
		end

		return 
	end)
	slot0.refreshUI(slot0)

	return 
end
slot0.onBackBtnClickAction = function (slot0, slot1)
	if slot0.callback then
		slot0.callback()
	end

	LayerManager.removeLayer(slot0)

	return 
end
slot0.refreshUI = function (slot0)
	slot0.mSkillPic:setTexture(slot0.showDescModel.newProfessionPic .. ".png")

	slot8 = "当前进度:第%s层%s%s"
	slot9 = (0 < (HeroObj:getItem(slot0.currHeroId).HeroRoadInfo or {}.NodeID or 0) and HeroRoadModel.items[slot0.heroModel.profession*1000 + slot0.heroModel.quality][HeroObj.getItem(slot0.currHeroId).HeroRoadInfo or {}.RoadID or 0][HeroObj.getItem(slot0.currHeroId).HeroRoadInfo or {}.NodeID or 0].floorID) or 0
	slot10 = (slot0.showRoadId == (HeroObj.getItem(slot0.currHeroId).HeroRoadInfo or {}.RoadID or 0) and "#8BA857") or "#C04141"
	slot11 = (slot0.showRoadId == (HeroObj.getItem(slot0.currHeroId).HeroRoadInfo or {}.RoadID or 0) and TR("（已启用）")) or TR("（未启用）")

	slot0.mStepLabel:setString(TR)

	slot8 = HeroRoadModel.items[slot0.heroModel.profession*1000 + slot0.heroModel.quality][slot0.showRoadId]
	slot9 = {}

	for slot13 = 1, slot2, 1 do
		if slot8[slot13].attrStr ~= nil and slot14 ~= "" then
			for slot18, slot19 in ipairs(Utility.analysisStrAttrList(slot14)) do
				slot9[slot20] = (slot9[slot19.fightattr] or 0) + slot19.value
			end
		end
	end

	slot0.attrAddList = {}

	for slot13, slot14 in pairs(slot9) do
		table.insert(slot0.attrAddList, {
			type = slot13,
			value = slot14
		})
	end

	table.sort(slot0.attrAddList, function (slot0, slot1)
		return slot0.type < slot1.type
	end)
	slot0.mNoAttrLabel:setVisible(#slot0.attrAddList == 0)
	slot0.mGridView:setItemNum(#slot0.attrAddList)

	slot10 = {}

	for slot14, slot15 in ipairs(slot8) do
		if 0 < slot15.skillId then
			table.insert(slot10, clone(slot15))
		end
	end

	slot0.mListView:removeAllItems()

	for slot14, slot15 in ipairs(slot10) do
		slot19 = slot0.createLayoutTemplateNode(slot0, "templateSkillCell")

		slot19.nameLabel:setString(((slot15.orderID <= slot2 and "#252525") or "#5F5F5F") .. SkillModel.items[slot15.skillId].skillName .. ":")
		slot19.infoLabel:setString(((slot15.orderID <= slot2 and "#252525") or "#5F5F5F") .. Resource.getSkillIntroStr(slot15.skillId, 1, 1, (slot15.orderID <= slot2 and "#252525") or "#5F5F5F", (slot15.orderID <= slot2 and "#258711") or "#5F5F5F"))
		slot19.setContentSize(slot19, cc.size(520, slot19.infoLabel:getContentSize().height + 15))
		slot19.nameLabel:setPositionY((slot19.infoLabel.getContentSize().height + 15) - 8)
		slot19.infoLabel:setPositionY((slot19.infoLabel.getContentSize().height + 15) - 10)
		slot0.mListView:pushBackCustomItem(slot19)
	end

	if slot1.ChangePositionNum == nil or slot1.ChangePositionNum < 1 then
		slot0.mResLabel:setString(TR("#252525每日首次切换免费"))
	else
		slot12 = TR("切换消耗: ")

		for slot16, slot17 in ipairs(slot11) do
			slot12 = slot12 .. string.format("{%s}%s ", Resource.getDaibiImg(slot17.resourceId), Utility.numberWithUnit(slot17.num))
		end

		slot0.mResLabel:setString(slot12)
	end

	slot0.mBtnActive:setTitleText((slot4 and TR("已启用")) or TR("启 用"))
	slot0.mBtnActive:setEnabled(not slot4)
	slot0.mBtnActive:setVisible(not slot4)
	slot0.mResLabel:setVisible(not slot4)

	return 
end
slot0.onAttrGridAction = function (slot0, slot1, slot2, slot3)
	if slot0.attrAddList == nil then
		return 
	end

	slot5 = ""

	slot1.addChild(slot1, UIWrap.newControl("Label", {
		fontSize = 18,
		isRichText = true,
		text = (not Utility.isAttrNeedPercent(slot0.attrAddList[slot2].type) or string.format("%s#252525+%s%%", FightAttrTypeName[slot4.type], slot4.value/100)) and string.format("%s#252525+%s", FightAttrTypeName[slot4.type], slot4.value),
		color = cc.c3b(37, 37, 37),
		anchor = cc.p(0, 0.5),
		pos = cc.p(0, 14)
	}))

	return 
end
slot0.onBtnActiveAction = function (slot0, slot1)
	if HeroObj:getItem(slot0.currHeroId).HeroRoadInfo or {}.ChangePositionNum ~= nil and 1 <= slot2.ChangePositionNum then
		for slot6, slot7 in ipairs(Utility.analysisStrResList(HeroConfig.items[1].turnRoadUseStr)) do
			if Resource.isEnough(slot7.resourceId, slot7.num) == false then
				return 
			end
		end
	end

	slot0.socketRequest(slot0, {
		methodName = "ChooseRoadID",
		moduleName = "HeroRoad",
		methodData = {
			slot0.currHeroId,
			slot0.showRoadId
		},
		successCallback = function (slot0)
			clone(HeroObj:getItem(slot0.currHeroId)).HeroRoadInfo = clone(slot0)

			HeroObj:modifyItem(clone(HeroObj.getItem(slot0.currHeroId)))
			slot0:refreshUI()
			slot0:callback()
			LayerManager.removeLayer(slot0)

			return 
		end
	})

	return 
end

return slot0
