slot0 = class("HeroTrainLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = true,
		color = cc.c4b(0, 0, 0, 128)
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "MsgBoxBg",
		params = {
			actionCallback = "onAnctionCallBack",
			closeAction = "onCloseBtnClickAction",
			posApt = 1,
			image = "tc_2.png",
			pos = {
				x = 568,
				y = 320
			},
			size = {
				width = 870,
				height = 500
			},
			titleText = TR("侠客训练")
		},
		children = {
			{
				name = "card",
				cType = "CardNode",
				params = {
					allowClick = true,
					initParams = {},
					pos = {
						x = 132.58,
						y = 389.58
					}
				},
				children = {}
			},
			{
				name = "partBtn",
				cType = "Button",
				custom = {
					{
						value = 1,
						name = "partId",
						type = "integer"
					}
				},
				params = {
					fontSize = 18,
					hide = true,
					pressedAction = false,
					image = "c_18.png",
					titleisRichText = true,
					titleImage = "wxl_gj1_1.png",
					outlineSize = 2,
					outlineColor = {
						g = 33,
						r = 42,
						b = 16
					},
					pos = {
						x = 188,
						y = 389.58
					},
					titleColor = {
						g = 255,
						r = 255,
						b = 255
					},
					titleText = TR("未训练")
				},
				children = {
					{
						name = "untitled44",
						cType = "StarNode",
						params = {
							isVert = true,
							childName = "starNode",
							starImg = "c_70.png",
							starLevel = 1,
							anchor = {
								x = 0.5,
								y = 1
							},
							pos = {
								x = 40.5,
								y = 45.5
							}
						},
						children = {}
					},
					{
						name = "untitled45",
						cType = "Sprite",
						params = {
							childName = "addSprite",
							image = "c_136.png",
							hide = true,
							pos = {
								x = 0,
								y = 0
							}
						},
						children = {}
					}
				}
			},
			{
				name = "needNumLabel",
				cType = "Label",
				params = {
					emptyInit = true,
					color = {
						g = 49,
						r = 49,
						b = 49
					},
					pos = {
						x = 133.78,
						y = 254.64
					},
					text = TR("需要数量：123")
				},
				children = {}
			},
			{
				name = "ownNumLabel",
				cType = "Label",
				params = {
					emptyInit = true,
					isRichText = true,
					color = {
						g = 49,
						r = 49,
						b = 49
					},
					pos = {
						x = 133.78,
						y = 222.7
					},
					text = TR("拥有数量：123")
				},
				children = {}
			},
			{
				name = "name",
				cType = "Label",
				params = {
					emptyInit = true,
					color = {
						g = 49,
						r = 49,
						b = 49
					},
					pos = {
						x = 133.78,
						y = 321.85
					},
					text = TR("名字碎片")
				},
				children = {}
			},
			{
				name = "att",
				cType = "Label",
				params = {
					emptyInit = true,
					color = {
						g = 49,
						r = 49,
						b = 49
					},
					pos = {
						x = 133.78,
						y = 289.08
					},
					text = TR("攻击+50")
				},
				children = {}
			},
			{
				name = "needSprite",
				cType = "Sprite",
				params = {
					image = "db_1111.png",
					hide = true,
					pos = {
						x = 92.3,
						y = 154.79
					}
				},
				children = {}
			},
			{
				name = "needGold",
				cType = "Label",
				params = {
					fontSize = 18,
					emptyInit = true,
					text = "Label",
					isRichText = true,
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 49,
						r = 49,
						b = 49
					},
					pos = {
						x = 114.82,
						y = 153.28
					}
				},
				children = {}
			},
			{
				name = "trainBtn",
				cType = "Button",
				params = {
					image = "c_19.png",
					clickAction = "onTrainAction",
					pos = {
						x = 127.01,
						y = 112.31
					},
					titleText = TR("训 练")
				},
				children = {}
			},
			{
				name = "open",
				cType = "Label",
				params = {
					emptyInit = true,
					anchor = {
						x = 0.5,
						y = 0.5
					},
					color = {
						g = 44,
						r = 234,
						b = 0
					},
					pos = {
						x = 127.01,
						y = 72.31
					},
					text = TR("玩家1级开启")
				},
				children = {}
			},
			{
				name = "listViewBg",
				cType = "Scale9Sprite",
				params = {
					image = "c_24.png",
					anchor = {
						x = 0.5,
						y = 1
					},
					pos = {
						x = 536.38,
						y = 455.18
					},
					size = {
						width = 570,
						height = 400
					}
				},
				children = {
					{
						name = "waysListView",
						cType = "ListView",
						params = {
							direction = true,
							swallowTouch = false,
							anchor = {
								x = 0.5,
								y = 1
							},
							pos = {
								x = 285,
								y = 390
							},
							size = {
								width = 558,
								height = 380
							}
						},
						children = {
							{
								name = "pveMopLayout",
								cType = "Layout",
								params = {
									size = {
										width = 558,
										height = 170
									}
								},
								children = {
									{
										name = "untitled20",
										cType = "Scale9Sprite",
										params = {
											image = "c_34.png",
											anchor = {
												x = 0.5,
												y = 0.5
											},
											pos = {
												x = 279,
												y = 85
											},
											size = {
												width = 550,
												height = 160
											}
										},
										children = {}
									},
									{
										name = "untitled21",
										cType = "Label",
										params = {
											fontSize = 22,
											isRichText = true,
											childName = "nameLabel",
											anchor = {
												x = 0,
												y = 0.5
											},
											color = {
												g = 49,
												r = 49,
												b = 49
											},
											pos = {
												x = 21.94,
												y = 142
											},
											text = TR("第1章")
										},
										children = {}
									},
									{
										name = "untitled22",
										cType = "ResLabel",
										params = {
											modelId = 1111,
											num = 0,
											childName = "resLabel",
											color = {
												g = 49,
												r = 49,
												b = 49
											},
											pos = {
												x = 416.56,
												y = 113
											}
										},
										children = {}
									},
									{
										name = "untitled23",
										cType = "ListView",
										params = {
											childName = "rewardListView",
											direction = false,
											pos = {
												x = 6,
												y = 22.23
											},
											size = {
												width = 390,
												height = 100
											}
										},
										children = {
											{
												name = "pveMopRewardCell",
												cType = "Layout",
												custom = {
													{
														value = "untitled25-initParams",
														name = "cardParams",
														type = "string"
													}
												},
												params = {
													size = {
														width = 96,
														height = 100
													}
												},
												children = {
													{
														name = "untitled25",
														cType = "CardNode",
														params = {
															scale = 0.8,
															childName = "cardNode",
															allowClick = true,
															initParams = {},
															pos = {
																x = 48,
																y = 60
															}
														},
														children = {}
													},
													{
														name = "untitled26",
														cType = "BadgeText",
														params = {
															fontSize = 22,
															hide = true,
															fontRotation = -45,
															image = "c_88.png",
															childName = "doubleBadge",
															fontColor = {
																g = 245,
																r = 255,
																b = 129
															},
															fontPos = {
																x = 20,
																y = 38
															},
															pos = {
																x = 66,
																y = 95
															},
															text = TR("双倍")
														},
														children = {}
													}
												}
											}
										}
									},
									{
										name = "untitled27",
										cType = "Button",
										params = {
											childName = "goButton",
											swallowTouch = false,
											image = "c_27.png",
											anchor = {
												x = 0,
												y = 0.5
											},
											pos = {
												x = 410,
												y = 67.23
											},
											titleText = TR("扫 荡")
										},
										children = {}
									},
									{
										name = "untitled28",
										cType = "BadgeText",
										params = {
											fontSize = 20,
											hide = true,
											image = "c_76.png",
											childName = "badge",
											fontColor = {
												g = 245,
												r = 255,
												b = 129
											},
											pos = {
												x = 553.89,
												y = 165
											},
											text = TR("推荐")
										},
										children = {}
									},
									{
										name = "untitled29",
										cType = "Sprite",
										params = {
											image = "xkxx_82.png",
											childName = "elitSprite",
											anchor = {
												x = 0,
												y = 0.5
											},
											pos = {
												x = 189.52,
												y = 142
											}
										},
										children = {}
									}
								}
							},
							{
								name = "buyLayout",
								cType = "Layout",
								params = {
									size = {
										width = 558,
										height = 150
									}
								},
								children = {
									{
										name = "untitled11",
										cType = "Scale9Sprite",
										params = {
											childName = "bgSprite",
											image = "c_34.png",
											anchor = {
												x = 0.5,
												y = 0.5
											},
											pos = {
												x = 279,
												y = 75
											},
											size = {
												width = 550,
												height = 140
											}
										},
										children = {
											{
												name = "untitled12",
												cType = "CardNode",
												params = {
													scale = 0.8,
													childName = "cardNode",
													allowClick = true,
													pos = {
														x = 57.21,
														y = 64.32
													}
												},
												children = {}
											},
											{
												name = "untitled13",
												cType = "BadgeText",
												params = {
													fontSize = 20,
													hide = true,
													image = "c_76.png",
													childName = "badge",
													fontColor = {
														g = 245,
														r = 255,
														b = 129
													},
													pos = {
														x = 550,
														y = 140
													},
													text = TR("推荐")
												},
												children = {}
											},
											{
												name = "untitled14",
												cType = "ResLabel",
												params = {
													fontSize = 24,
													num = 0,
													modelId = 1111,
													childName = "priceLabel",
													color = {
														g = 49,
														r = 49,
														b = 49
													},
													pos = {
														x = 149.99,
														y = 64.3
													}
												},
												children = {}
											},
											{
												name = "untitled15",
												cType = "Sprite",
												params = {
													hide = true,
													image = "c_46.png",
													childName = "discountSprite",
													anchor = {
														x = 0,
														y = 0.5
													},
													pos = {
														x = 179.99,
														y = 64.3
													}
												},
												children = {}
											},
											{
												name = "untitled16",
												cType = "Label",
												params = {
													fontSize = 24,
													hide = true,
													isRichText = true,
													childName = "discountLabel",
													text = "0",
													anchor = {
														x = 0,
														y = 0.5
													},
													color = {
														g = 49,
														r = 49,
														b = 49
													},
													pos = {
														x = 244.99,
														y = 64
													}
												},
												children = {}
											},
											{
												name = "untitled17",
												cType = "Label",
												params = {
													fontSize = 22,
													isRichText = true,
													text = "limit",
													childName = "limitLabel",
													anchor = {
														x = 0,
														y = 0.5
													},
													color = {
														g = 49,
														r = 49,
														b = 49
													},
													pos = {
														x = 21.31,
														y = 118
													}
												},
												children = {}
											},
											{
												name = "untitled18",
												cType = "Button",
												params = {
													childName = "buyButton",
													swallowTouch = false,
													image = "c_27.png",
													anchor = {
														x = 0,
														y = 0.5
													},
													pos = {
														x = 410,
														y = 64.32
													},
													titleText = TR("购 买")
												},
												children = {}
											}
										}
									}
								}
							},
							{
								name = "eliteLayout",
								cType = "Layout",
								params = {
									size = {
										width = 558,
										height = 170
									}
								},
								children = {
									{
										name = "untitled31",
										cType = "Scale9Sprite",
										params = {
											image = "c_34.png",
											anchor = {
												x = 0.5,
												y = 0.5
											},
											pos = {
												x = 279,
												y = 85
											},
											size = {
												width = 550,
												height = 160
											}
										},
										children = {}
									},
									{
										name = "untitled32",
										cType = "Label",
										params = {
											fontSize = 22,
											isRichText = true,
											childName = "nameLabel",
											anchor = {
												x = 0,
												y = 0.5
											},
											color = {
												g = 49,
												r = 49,
												b = 49
											},
											pos = {
												x = 23.67,
												y = 142.16
											},
											text = TR("第1章")
										},
										children = {}
									},
									{
										name = "untitled33",
										cType = "StarNode",
										params = {
											exStarImg = "c_89.png",
											starImg = "c_5.png",
											exStarLevel = 3,
											starLevel = 1,
											childName = "starNode",
											anchor = {
												x = 0,
												y = 0.5
											},
											pos = {
												x = 88.67,
												y = 142.16
											}
										},
										children = {}
									},
									{
										name = "untitled34",
										cType = "Label",
										params = {
											childName = "notPassLabel",
											anchor = {
												x = 0,
												y = 0.5
											},
											color = {
												g = 44,
												r = 234,
												b = 0
											},
											pos = {
												x = 194.12,
												y = 141.58
											},
											text = TR("（未通关）")
										},
										children = {}
									},
									{
										name = "untitled35",
										cType = "ListView",
										params = {
											childName = "rewardListView",
											direction = false,
											pos = {
												x = 6,
												y = 25.15
											},
											size = {
												width = 390,
												height = 100
											}
										},
										children = {
											{
												name = "pveMopRewardCell2",
												cType = "Layout",
												custom = {
													{
														value = "untitled37-initParams",
														name = "cardParams",
														type = "string"
													}
												},
												params = {
													size = {
														width = 96,
														height = 100
													}
												},
												children = {
													{
														name = "untitled37",
														cType = "CardNode",
														params = {
															scale = 0.8,
															childName = "cardNode",
															allowClick = true,
															initParams = {},
															pos = {
																x = 48,
																y = 60
															}
														},
														children = {}
													},
													{
														name = "untitled38",
														cType = "BadgeText",
														params = {
															fontSize = 22,
															hide = true,
															fontRotation = -45,
															image = "c_88.png",
															childName = "doubleBadge",
															fontColor = {
																g = 245,
																r = 255,
																b = 129
															},
															fontPos = {
																x = 20,
																y = 38
															},
															pos = {
																x = 66,
																y = 95
															},
															text = TR("双倍")
														},
														children = {}
													}
												}
											}
										}
									},
									{
										name = "untitled39",
										cType = "Button",
										params = {
											clickAction = "onGoAction",
											swallowTouch = false,
											image = "c_27.png",
											childName = "goButton",
											anchor = {
												x = 0,
												y = 0.5
											},
											pos = {
												x = 410,
												y = 110.16
											},
											titleText = TR("扫 荡")
										},
										children = {}
									},
									{
										name = "untitled40",
										cType = "BadgeText",
										params = {
											fontSize = 20,
											hide = true,
											image = "c_76.png",
											childName = "badge",
											fontColor = {
												g = 245,
												r = 255,
												b = 129
											},
											pos = {
												x = 556.18,
												y = 165
											},
											text = TR("推荐")
										},
										children = {}
									},
									{
										name = "untitled41",
										cType = "Label",
										params = {
											fontSize = 20,
											childName = "state",
											isRichText = true,
											color = {
												g = 49,
												r = 49,
												b = 49
											},
											pos = {
												x = 458.34,
												y = 57.7
											},
											text = TR("剩余次数:6")
										},
										children = {}
									}
								}
							},
							{
								name = "titleLayout",
								cType = "Layout",
								custom = {
									{
										value = "text-text",
										name = "text",
										type = "string"
									}
								},
								params = {
									size = {
										width = 558,
										height = 50
									}
								},
								children = {
									{
										name = "getWayTitle",
										cType = "Sprite",
										params = {
											image = "c_36.png",
											anchor = {
												x = 0,
												y = 0.5
											},
											pos = {
												x = 29.95,
												y = 26.19
											}
										},
										children = {
											{
												name = "text",
												cType = "Label",
												params = {
													fontSize = 28,
													color = {
														g = 49,
														r = 49,
														b = 49
													},
													pos = {
														x = 242.33,
														y = 6.36
													},
													text = TR("副本获取")
												},
												children = {}
											},
											{
												name = "untitled9",
												cType = "Sprite",
												params = {
													rotationAngle = 180,
													image = "c_36.png",
													pos = {
														x = 396.14,
														y = 3.24
													}
												},
												children = {}
											}
										}
									}
								}
							},
							{
								name = "wayLayout",
								cType = "Layout",
								custom = {
									{
										value = "goBtn-info",
										name = "info",
										type = "string"
									}
								},
								params = {
									size = {
										width = 558,
										height = 150
									}
								},
								children = {
									{
										name = "getWay",
										cType = "Scale9Sprite",
										params = {
											image = "c_34.png",
											anchor = {
												x = 0.5,
												y = 0.5
											},
											pos = {
												x = 279,
												y = 75
											},
											size = {
												width = 550,
												height = 140
											}
										},
										children = {
											{
												name = "untitled8",
												cType = "ClippingNode",
												params = {
													alpha = 1,
													pos = {
														x = 0.43,
														y = 10.67
													},
													size = {
														width = 160,
														height = 120
													}
												},
												children = {
													{
														name = "headImg",
														cType = "Sprite",
														params = {
															scale = 0.9,
															image = "zd_7.png",
															pos = {
																x = 78,
																y = 60
															}
														},
														children = {}
													}
												}
											},
											{
												name = "tbpic",
												cType = "Sprite",
												params = {
													image = "c_pure.png",
													pos = {
														x = 75.37,
														y = 73.22
													}
												},
												children = {}
											},
											{
												name = "lock",
												cType = "Sprite",
												params = {
													image = "c_21.png",
													pos = {
														x = 78.83,
														y = 68.28
													}
												},
												children = {}
											},
											{
												name = "badge",
												cType = "BadgeText",
												params = {
													image = "c_76.png",
													fontColor = {
														g = 241,
														r = 255,
														b = 129
													},
													pos = {
														x = 548.96,
														y = 140
													},
													text = TR("推荐")
												},
												children = {}
											},
											{
												name = "wayName",
												cType = "Label",
												params = {
													fontSize = 22,
													anchor = {
														x = 0,
														y = 0.5
													},
													color = {
														g = 34,
														r = 69,
														b = 13
													},
													pos = {
														x = 180,
														y = 80
													},
													size = {
														width = 220,
														height = 0
													},
													text = TR("41-龙门客栈")
												},
												children = {}
											},
											{
												name = "status",
												cType = "Label",
												params = {
													fontSize = 22,
													text = "10/15",
													anchor = {
														x = 0,
														y = 0.5
													},
													color = {
														g = 34,
														r = 69,
														b = 13
													},
													pos = {
														x = 180,
														y = 50
													}
												},
												children = {}
											},
											{
												name = "goBtn",
												cType = "Button",
												custom = {
													{
														value = 1,
														name = "moduleID",
														type = "integer"
													},
													{
														value = 1,
														name = "outPutPoint",
														type = "integer"
													},
													{
														name = "info",
														type = "table",
														value = {}
													}
												},
												params = {
													clickAction = "onGoAction",
													swallowTouch = false,
													image = "c_27.png",
													anchor = {
														x = 0,
														y = 0.5
													},
													pos = {
														x = 394.46,
														y = 70
													},
													titleText = TR("前 往")
												},
												children = {}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.mPartId = slot1.partId or 1
	slot0.mHeroModelId = slot1.heroModelId
	slot0.mHeroInfo = clone(HeroObj:getItem(slot1.heroModelId))
	slot0.mPlayerLv = PlayerAttrObj:getPlayerAttrByName("Lv")
	slot0.mEliteInfo = {}

	slot0.dealWithData(slot0)
	slot0.super.ctor(slot0, {
		swallow = true
	})
	slot0.initUI(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot1 = Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeCoinC)[1]

	slot0.createUITree(slot0, function (slot0, slot1)
		if slot0.name == "needGold" then
			slot1.modelId = slot0.resourceId
		end

		return 
	end)
	EventAuto:registerAutoEvent(slot0, EventDefine.eRefreshTrain, function (slot0)
		if slot0.consumeCoinC.num <= Resource.getCount(slot0.consumeCoinC.resourceId) then
			EventAuto:postEvent(EventDefine.eRefreshHeroTrainNode, {
				heroModelId = slot0.mHeroInfo.ModelId
			})
			LayerManager.removeLayer(slot0)
		else
			slot0:refreshUI()
		end

		return 
	end)

	return 
end
slot0.refreshPartInfo = function (slot0)
	slot2 = HeroModel.items[slot0.mHeroModelId]
	slot3 = {}

	for slot7, slot8 in ipairs(clone(HeroObj:getItem(slot0.mHeroModelId)).TrainInfo) do
		slot3[slot8.TrainPartNum] = slot8
	end

	slot4 = {
		"c_70.png",
		"c_70.png",
		"c_71.png",
		"c_72.png",
		"c_73.png",
		"c_75.png",
		"c_74.png"
	}
	slot5 = slot3[slot0.mPartId]
	slot7 = HeroTrainRelation.items[slot2.profession*1000 + slot1.TrainLv*10 + slot0.mPartId]

	if slot1.TrainLv and 0 < slot1.TrainLv then
		slot0.partBtn.starNode:setVisible(true)
		slot0.partBtn.starNode:setStarImg(slot9)
		slot0.partBtn.starNode:setStarLevel(HeroTrainColorlvRelation.items[slot1.TrainLv].intro)
	else
		slot0.partBtn.starNode:setVisible(false)
	end

	slot0.partBtn.addSprite:setVisible(false)

	if slot1.Lv < slot7.needLv then
		slot0.partBtn:setTitleText(TR("#DF0A0A%s级开启", slot7.needLv))
		slot0.partBtn:setTitleImage(slot7.noActivePic .. ".png")
	elseif slot3[slot0.mPartId].IsActive then
		slot0.partBtn:setTitleImage(slot7.pic .. ".png")
		slot0.partBtn:setTitleText("")
	else
		slot0.partBtn:setTitleImage(slot7.noActivePic .. ".png")

		slot9 = Utility.analysisStrResList(slot7.consumeCoinC)[1]

		if Resource.isEnough(Utility.analysisStrResList(slot7.consumeStrC)[1].resourceId, Utility.analysisStrResList(slot7.consumeStrC)[1].num, false) and Resource.isEnough(slot9.resourceId, slot9.num, false) then
			slot0.partBtn:setTitleText(TR("#37ff40可训练"))
		else
			slot0.partBtn:setTitleText(TR("#fff8ea去获取"))
		end
	end

	slot0.partBtn:setVisible(true)

	return 
end
slot0.onAnctionCallBack = function (slot0)
	if Utility.moduleIsOpen(ModuleSub.eElite, false) then
		slot0.requestGetEliteInfo(slot0)
	else
		slot0.refreshUI(slot0)
	end

	return 
end
slot0.onExit = function (slot0)
	if slot0.mHeroInfo and slot0.mHeroInfo.ModelId then
		LayerManager.setRestoreData("hero.HeroMainLayer", {
			defModelId = slot0.mHeroInfo.ModelId
		})
	end

	return 
end
slot0.dealWithData = function (slot0)
	slot0.mHeroTrainRelationInfo = nil
	slot1 = HeroModel.items[slot0.mHeroInfo.ModelId]

	for slot5, slot6 in pairs(HeroTrainRelation.items) do
		if slot6.profession == slot1.profession and slot6.trainLv == slot0.mHeroInfo.TrainLv and slot6.trainPartNum == slot0.mPartId then
			slot0.mHeroTrainRelationInfo = slot6

			break
		end
	end

	slot0.consumeCoinC = Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1]

	return 
end
slot0.getTextColor = function (slot0, slot1, slot2)
	slot3 = nil

	return (slot2 <= slot1 and "#67A31E") or "#DF0A0A"
end
slot0.refreshUI = function (slot0)
	slot3 = Utility.numberWithUnit(Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeCoinC)[1].num)

	slot0.needSprite:setTexture(slot2)
	slot0.needSprite:setVisible(true)

	if Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeCoinC)[1].num <= Resource.getCount(Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeCoinC)[1].resourceId) then
		slot0.needGold:setString(TR("%s%s", "#67A31E", slot3))
	else
		slot0.needGold:setString(TR("%s%s", "#DF0A0A", slot3))
	end

	slot0.card:setCardData({
		modelId = Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1].resourceId,
		num = Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1].num
	}, {})
	print(string.format("材料ID:%s", Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1].resourceId))

	slot0.ownNumLabel.refreshString = function (slot0)
		slot1.ownNumLabel:setString(TR("拥有数量：%s%s", (slot0.num <= Resource.getCount(slot0.resourceId) and "#258711") or "#ea2c00", slot1))
		slot1.trainBtn:setEnabled(slot0.num <= slot1)

		return 
	end

	slot0.needNumLabel:setString(TR("需要数量：%s", Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1].num))
	slot0.ownNumLabel:refreshString()
	slot0.trainBtn:setEnabled(Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1].num <= Resource.getCount(Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1].resourceId))

	slot7 = tonumber(Utility.analysisStrAttrList(slot0.mHeroTrainRelationInfo.singleAttrStr)[1].value)

	if HeroModel.items[slot0.mHeroInfo.ModelId].trainAddR ~= nil then
		slot7 = math.ceil((slot7*slot5.trainAddR)/10000)
	end

	slot0.name:setString(TR("%s", Resource.getName(slot4.resourceId)))
	slot0.name:setColor(slot8)
	slot0.att:setString((Utility.isAttrNeedPercent(slot6.fightattr) and "" .. string.format("%s: +%s%%", FightAttrTypeName[slot6.fightattr], slot7/100)) or "" .. string.format("%s: +%s", FightAttrTypeName[slot6.fightattr], slot7))

	if slot0.mHeroInfo.Lv < slot0.mHeroTrainRelationInfo.needLv then
		slot0.open:setString(TR("侠客%s级开启", slot0.mHeroTrainRelationInfo.needLv))
	else
		slot0.open:setVisible(false)
	end

	slot0.waysListView:removeAllChildren()
	slot0.dealDropwayListData(slot0, slot4, function (slot0)
		function slot1(slot0, slot1)
			if slot0 == nil then
				return 
			end

			if slot0.moduleID == ModuleSub.eMarketMateria then
				slot0:createLayoutTemplateNode("buyLayout").bgSprite.cardNode:setCardData({
					resourceId = slot0.priceInfo.sellResId,
					num = slot0.priceInfo.sellResNum
				}, {
					Enums.CardShowAttr.eNum
				})
				slot0.createLayoutTemplateNode("buyLayout").bgSprite.limitLabel:setString(TR("购买需要玩家等级达到:%s%s", (slot0.priceInfo.needLv <= slot0.mPlayerLv and "#258711") or "#EA2C00", slot0.priceInfo.needLv))

				slot2.refreshCell = function (slot0, slot1)
					slot2 = Resource.getCount(slot0.priceInfo.needResId)
					slot3 = slot1.BuyCount or 0
					slot5 = 1

					if HeartmethodSaleConfig.items[slot3 + 1] ~= nil and slot4.discount ~= nil then
						slot5 = slot4.discount
					end

					slot6 = 0

					if slot5 < 1 then
						slot0.bgSprite.discountLabel:setString(((math.ceil(slot0.priceInfo.needResNum*slot5) <= slot2 and "#258711") or "#EA2C00") .. slot6)
						slot0.bgSprite.priceLabel:setString(slot0.priceInfo.needResNum)
					else
						slot0.bgSprite.priceLabel:setString(slot0.priceInfo.needResNum)
					end

					slot0.bgSprite.badge:setVisible(slot6 <= slot2)
					slot0.bgSprite.discountSprite:setVisible(slot5 < 1)
					slot0.bgSprite.discountLabel:setVisible(slot5 < 1)
					slot0.bgSprite.buyButton:setClickAction(function ()
						if slot0.mPlayerLv < slot1.priceInfo.needLv then
							ui.showFlashView(TR("玩家需要达到%s%s级%s才能购买该材料", "#FFE748", slot1.priceInfo.needLv, "#fff8ea"))

							return 
						end

						if Resource.isEnough(slot1.priceInfo.needResId, slot2) == false then
							return 
						end

						slot0:requestBuyGood(slot1.priceInfo.goodId)

						return 
					end)

					return 
				end

				slot0.waysListView:pushBackCustomItem(slot2)
			else
				if slot0.moduleID == ModuleSub.ePveMoppingUp then
					slot0.waysListView:pushBackCustomItem(slot2)

					slot4 = TR("副本") .. PveChapterModel.items[slot0.outPutPoint].name

					if slot0.status == 0 then
						slot4 = slot4 .. "#EA2C00 " .. TR("（未通关）")
					end

					slot2.nameLabel:setString(slot4)
					slot2.resLabel:setType((slot0.status == 2 and Utility.analysisStrResList(slot3.elitesBanditsNeed)[1]) or Utility.analysisStrResList(slot3.baseBanditsNeed)[1].resourceId)
					slot2.resLabel:setString((slot0.status == 2 and Utility.analysisStrResList(slot3.elitesBanditsNeed)[1]) or Utility.analysisStrResList(slot3.baseBanditsNeed)[1].num)
					slot2.badge:setVisible(0 < slot0.status and slot1)
					slot2.goButton:setEnabled(0 < slot0.status)
					slot2.elitSprite:setPositionX(slot2.nameLabel:getContentSize().width + 40)
					slot2.elitSprite:setVisible(slot0.status == 2)
					slot2.goButton:setClickAction(function ()
						if slot0.mPlayerLv < slot1.needPlayerLv then
							ui.showFlashView(TR("玩家需要达到%s%s级", "#FFE748", slot1.needPlayerLv))

							return 
						end

						if not Resource.isEnough(slot2.resourceId, slot2.num) then
							return 
						end

						if slot3.status == 2 then
							LayerManager.addLayer({
								cleanUp = false,
								name = "hero.MaterialSweepLayer",
								data = {
									sweepType = 2,
									chapterId = slot3.outPutPoint,
									modelID = slot3.outPutPoint.modelID,
									needNum = slot4.num
								},
								zOrder = Enums.ZOrderType.ePopLayer
							})
						else
							LayerManager.addLayer({
								cleanUp = false,
								name = "home.DlgBanditsLayer",
								data = {
									chapterId = slot1.modelId,
									normalPass = slot1.modelId.NormalPass,
									elitePass = slot1.modelId.NormalPass.ElitePass,
									needNum = slot4.num,
									modelID = slot4.num.modelID,
									callback = function ()
										slot0.ownNumLabel:refreshString()

										return 
									end
								},
								zOrder = Enums.ZOrderType.ePopLayer
							})
						end

						return 
					end)

					slot6 = (slot0.status == 2 and slot3.elitesBanditsOutPut) or slot3.baseBanditsOutPut

					for slot10, slot11 in pairs(Utility.analysisStrResList(slot6)) do
						slot2.rewardListView:pushBackCustomItem(slot12)
						slot0:createLayoutTemplateNode("pveMopRewardCell", {
							cardParams = {
								cardInfo = {
									modelId = slot11.resourceId,
									num = slot11.num
								},
								showAttrs = {
									Enums.CardShowAttr.eNum,
									Enums.CardShowAttr.eStar,
									Enums.CardShowAttr.eName
								}
							}
						}).doubleBadge:setVisible(PlayerAttrObj:isModuleDoubleIncome(ModuleSub.ePveMoppingUp) and slot11.resourceId ~= ResourceTypeSub.eExp)
						slot12.doubleBadge:setScale(0.8)
						slot12.doubleBadge:setPosition(cc.p(60, 90))

						if slot11.resourceId == ResourceTypeSub.eExp and PlayerConfig.items[1].noEnjoyAnyExpAddsLv < PlayerAttrObj:getPlayerAttrByName("Lv") and PlayerAttrObj:getPlayerAttrByName("WorldLvAddR") and 0 < slot13 then
							slot12.cardNode:addChild(UIWrap.newControl("Label", {
								fontSize = 15,
								text = TR("经验+%s%%", slot13*100),
								color = cc.c3b(55, 255, 64),
								anchor = cc.p(1, 1),
								outlineColor = cc.c3b(51, 42, 24),
								pos = cc.p(85, 88)
							}))
						end
					end

					slot2.rewardListView:setSwallowTouches(false)

					return 
				end

				if slot0.moduleID == ModuleSub.eElite then
					slot0.waysListView:pushBackCustomItem(slot0:createLayoutTemplateNode("eliteLayout"))

					slot5, slot6 = slot2.nameLabel:getPosition()

					slot2.nameLabel:setString(EliteNodeModel.items[slot0.outPutPoint].name)
					slot2.starNode:setStarLevel((slot0.mEliteInfo.EliteNode and slot0.mEliteInfo.EliteNode[tostring(slot0.outPutPoint)] and slot0.mEliteInfo.EliteNode and slot0.mEliteInfo.EliteNode[tostring(slot0.outPutPoint)].PassStars) or 0, EliteNodeModel.items[slot0.outPutPoint].starNum)
					slot2.starNode:setPosition(slot5 + slot2.nameLabel:getContentSize().width + 10, slot6)
					slot2.notPassLabel:setPosition(slot5 + slot2.nameLabel.getContentSize().width + 10, slot6)
					slot2.notPassLabel:setVisible(not slot0.isCanSweep)
					slot2.goButton:setEnabled(slot0.isCanSweep)
					slot2.badge:setVisible(slot0.isCanSweep and slot1)

					slot8 = ""

					slot2.state:setString((not slot2.starNode.setStarLevel or ((0 >= slot0.mEliteInfo.Elite.CanChallengeCount or TR("剩余次数:%s", slot0.mEliteInfo.Elite.CanChallengeCount)) and TR("购买次数:%s", VipConfig.items[PlayerAttrObj:getPlayerAttrByName("Vip")].heroTriedBuyNum - slot0.mEliteInfo.Elite.BuyCount))) and TR("三星通关可扫荡"))

					slot2.goButton.info = slot0

					for slot12, slot13 in pairs(Utility.analysisStrResList(slot3.outPutStr)) do
						slot14 = slot0:createLayoutTemplateNode("pveMopRewardCell2", {
							cardParams = {
								cardInfo = {
									modelId = slot13.resourceId,
									num = slot13.num
								},
								showAttrs = {
									Enums.CardShowAttr.eNum,
									Enums.CardShowAttr.eStar,
									Enums.CardShowAttr.eName
								}
							}
						})

						slot2.rewardListView:pushBackCustomItem(slot14)
						slot14.doubleBadge:setVisible(PlayerAttrObj:isModuleDoubleIncome(ModuleSub.eElite))
						slot14.doubleBadge:setScale(0.8)
						slot14.doubleBadge:setPosition(cc.p(60, 90))

						if slot13.resourceId == ResourceTypeSub.eExp and PlayerConfig.items[1].noEnjoyAnyExpAddsLv < PlayerAttrObj:getPlayerAttrByName("Lv") and PlayerAttrObj:getPlayerAttrByName("WorldLvAddR") and 0 < slot15 then
							slot14.cardNode:addChild(UIWrap.newControl("Label", {
								fontSize = 15,
								text = TR("经验+%s%%", slot15*100),
								color = cc.c3b(55, 255, 64),
								anchor = cc.p(1, 1),
								outlineColor = cc.c3b(51, 42, 24),
								pos = cc.p(85, 88)
							}))
						end
					end

					slot2.rewardListView:setSwallowTouches(false)
				else
					slot0.waysListView:pushBackCustomItem(slot0:createLayoutTemplateNode("wayLayout", {
						info = slot0
					}))

					if slot0.moduleID == ModuleSub.eElite then
						slot2.headImg:setVisible(false)
						slot2.tbpic:setVisible(true)
						slot2.tbpic:setTexture(slot0.pic)
						slot2.wayName:setString(EliteNodeModel.items[slot0.outPutPoint].name)
						slot2.badge:setVisible(slot0.isCanSweep and slot1)

						if slot0.isCanSweep then
							slot2.wayName:setPosition(130, 80)
							slot2.state:setPosition(130, 50)
							slot2.state:setString(TR("剩余扫荡次数:%s", slot0.mEliteInfo.Elite.CanChallengeCount))
							slot2.lock:setVisible(false)
							slot2.goBtn:setTitleText(TR("扫 荡"))
							slot2.goBtn:loadTextures("c_47.png", "c_47.png")
							slot2.goBtn.titleLabel:enableOutline(cc.c3b(24, 126, 109), 2)
						else
							slot2.wayName:setPosition(130, 60)
							slot2.tbpic:setGray(true)
							slot2.state:setVisible(false)
							slot2.lock:setVisible(true)
							slot2.goBtn:setVisible(false)
						end
					else
						slot2.headImg:setVisible(false)
						slot2.tbpic:setVisible(true)
						slot2.tbpic:setTexture(slot0.pic)
						slot2.badge:setVisible(false)
						slot2.state:setVisible(false)
						slot2.wayName:setString(slot0.intro)
						slot2.wayName:setPosition(120, 60)
						slot2.lock:setVisible(false)
						slot2.goBtn:setTitleText(TR("前 往"))
					end
				end
			end
		end

		slot2, slot3, slot4 = nil
		slot5 = {}

		for slot9, slot10 in ipairs(slot0) do
			if slot10.moduleID == ModuleSub.eMarketMateria then
				slot2 = clone(slot10)
			elseif slot10.moduleID == ModuleSub.eElite then
				if not slot10.ways[1].isCanSweep then
					slot3 = clone(slot10)
				else
					table.insert(slot5, clone(slot10))
				end
			elseif slot10.moduleID == ModuleSub.ePveMoppingUp then
				if 0 >= slot10.ways[1].status then
					slot4 = clone(slot10)
				else
					table.insert(slot5, clone(slot10))
				end
			else
				table.insert(slot5, clone(slot10))
			end
		end

		if slot2 then
			table.insert(slot5, clone(slot2))

			slot0 = slot5
		end

		if slot4 then
			table.insert(slot5, clone(slot4))

			slot0 = slot5
		end

		if slot3 then
			table.insert(slot5, clone(slot3))

			slot0 = slot5
		end

		for slot9, slot10 in ipairs(slot0) do
			if Utility.moduleIsOpen(slot10.moduleID, false) then
				slot0.waysListView:pushBackCustomItem(slot0:createLayoutTemplateNode("titleLayout", {
					text = slot10.name
				}))

				if slot10.moduleID == ModuleSub.eElite or slot10.moduleID == ModuleSub.ePveMoppingUp then
					slot1(slot10.ways[1], true)
				else
					for slot15 = 1, 3, 1 do
						slot1(slot10.ways[slot15], slot15 == 1)
					end
				end
			end
		end

		return 
	end)

	return 
end
slot0.dealDropwayListData = function (slot0, slot1, slot2)
	slot3 = Utility.getDropWayList(slot1.resourceId)

	function slot4()
		slot0 = nil

		for slot4, slot5 in pairs(HeartmethodRelation.items) do
			if Utility.analysisStrResList(slot5.sellStr)[1].resourceId == slot0.resourceId then
				slot0 = {
					goodId = slot5.sellNum,
					sellResId = slot6.resourceId,
					sellResNum = slot6.num,
					needLv = slot5.needLv,
					needResId = Utility.analysisStrResList(slot5.buyNeed)[1].resourceId,
					needResNum = Utility.analysisStrResList(slot5.buyNeed)[1].num
				}

				break
			end
		end

		for slot5, slot6 in pairs(slot1) do
			for slot10, slot11 in pairs(slot6.ways) do
				if slot11.moduleID == ModuleSub.eMarketMateria then
					slot11.priceInfo = slot0
					slot1 = true
				end
			end
		end

		slot2(slot1)

		if slot1 == true then
			slot3:requestBuyInfo()
		end

		return 
	end

	PveObj:getChapterList(function (slot0)
		slot1 = slot0 or {}

		for slot5, slot6 in pairs(slot0) do
			for slot10, slot11 in pairs(slot6.ways) do
				if slot11.moduleID == ModuleSub.eElite then
					slot6.moduleID = ModuleSub.eElite
					slot12 = false

					if slot1.mEliteInfo.EliteNode and slot1.mEliteInfo.EliteNode[tostring(slot11.outPutPoint)].PassStars == EliteNodeModel.items[slot11.outPutPoint].starNum then
						slot12 = true
					end

					slot11.isCanSweep = slot12
				elseif slot11.moduleID == ModuleSub.ePveMoppingUp then
					slot6.moduleID = ModuleSub.ePveMoppingUp
					slot12 = 0

					if slot1[slot11.outPutPoint] then
						if slot1[slot11.outPutPoint].FirstPass then
							slot12 = 1
						end

						if slot1[slot11.outPutPoint].NormalPass and slot1[slot11.outPutPoint].ElitePass then
							slot12 = 2
						end

						slot11.NormalPass = slot1[slot11.outPutPoint].NormalPass
						slot11.ElitePass = slot1[slot11.outPutPoint].ElitePass
					end

					slot11.status = slot12
				end
			end
		end

		for slot5, slot6 in pairs(slot0) do
			if slot6.moduleID == ModuleSub.eElite then
				table.sort(slot6.ways, function (slot0, slot1)
					if ((slot0.isCanSweep and 1) or 0) ~= ((slot1.isCanSweep and 1) or 0) then
						return slot3 < slot2
					end

					if slot2 == 1 and slot3 == 1 then
						return slot1.outPutPoint < slot0.outPutPoint
					else
						return slot0.outPutPoint < slot1.outPutPoint
					end

					return 
				end)
			elseif slot6.moduleID == ModuleSub.ePveMoppingUp then
				table.sort(slot6.ways, function (slot0, slot1)
					if slot0.status ~= 0 and slot1.status ~= 0 then
						return slot1.outPutPoint < slot0.outPutPoint
					end

					if slot0.status == 0 and slot1.status == 0 then
						return slot0.outPutPoint < slot1.outPutPoint
					end

					if slot0.status == 0 or slot1.status == 0 then
						return slot1.status < slot0.status
					end

					return 
				end)
			end
		end

		slot2()

		return 
	end)

	return 
end
slot0.onTrainAction = function (slot0, slot1)
	if slot0.mHeroInfo.Lv < slot0.mHeroTrainRelationInfo.needLv then
		ui.showFlashView(TR("侠客等级不足"))

		return 
	end

	if not Resource.isEnough(Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeCoinC)[1].resourceId, Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeCoinC)[1].num, true) then
		return 
	end

	if Resource.getCount(Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1].resourceId) < Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1].num then
		ui.showFlashView(TR("%s不足", Resource.getName(slot3.resourceId)))

		return 
	end

	slot0.socketRequest(slot0, {
		methodName = "HeroTrainUp",
		moduleName = "Hero",
		methodData = {
			slot0.mHeroInfo.ModelId,
			slot0.mPartId
		},
		guideInfo = Guide.manager:getCurRequestGuideData(),
		successCallback = function (slot0)
			HeroObj:modifyItem(slot0)
			MqAudio.playEffect("xiakexunlian.mp3")

			slot0.mHeroInfo = clone(HeroObj:getItem(slot0.mHeroModelId))

			EventAuto:postEvent(EventDefine.eRefreshHeroTrainNode, {
				HeroTrain = slot0.mPartId,
				heroModelId = slot0.mHeroInfo.ModelId
			})
			LayerManager.removeLayer(slot0)

			return 
		end
	})

	return 
end
slot0.onGoAction = function (slot0, slot1)
	dump(slot1.info, "数据")

	slot3 = Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1]

	if slot1.info.moduleID == ModuleSub.ePveMoppingUp then
		if slot2.status == 1 then
			LayerManager.addLayer({
				cleanUp = false,
				name = "home.DlgBanditsLayer",
				data = {
					chapterId = slot2.outPutPoint,
					normalPass = slot2.NormalPass,
					elitePass = slot2.ElitePass,
					modelID = slot2.modelID,
					needNum = slot3.num,
					callback = function ()
						slot0.ownNum:setString(TR("拥有数量：%s%s", slot0:getTextColor(Resource.getCount(slot1.resourceId), slot1.num), Resource.getCount(slot1.resourceId)))

						return 
					end
				},
				zOrder = Enums.ZOrderType.ePopLayer
			})
		elseif slot2.status == 2 then
			LayerManager.addLayer({
				cleanUp = false,
				name = "hero.MaterialSweepLayer",
				data = {
					sweepType = 2,
					chapterId = slot2.outPutPoint,
					modelID = slot2.modelID,
					needNum = slot3.num
				},
				zOrder = Enums.ZOrderType.ePopLayer
			})
		end
	elseif slot2.moduleID == ModuleSub.eElite then
		if 0 < slot0.mEliteInfo.Elite.CanChallengeCount then
			slot0.socketRequest(slot0, {
				methodName = "MopupEliteNode",
				moduleName = "Elite",
				methodData = {
					slot2.outPutPoint
				},
				successCallback = function (slot0)
					ui.showFlashReward({
						BaseGetGameResourceList = slot0.BaseGetGameResourceList
					})
					ui.showFlopLayer(Enums.FlopType.eElite, function ()
						PlayerAttrObj:checkLvUp()

						if Utility.moduleIsOpen(ModuleSub.eElite, false) then
							slot0:requestGetEliteInfo()
						else
							slot0:refreshUI()
						end

						return 
					end)

					return 
				end
			})
		else
			LayerManager.addLayer({
				cleanUp = false,
				name = "elite.DlgBuyTimesLayer",
				data = {
					boughtNum = slot0.mEliteInfo.Elite.BuyCount,
					callback = function ()
						if Utility.moduleIsOpen(ModuleSub.eElite, false) then
							slot0:requestGetEliteInfo()
						else
							slot0:refreshUI()
						end

						return 
					end
				},
				zOrder = Enums.ZOrderType.ePopLayer
			})
		end
	else
		slot4 = nil

		if slot2.moduleID == ModuleSub.eMarketMateria then
			slot4 = {
				moduleId = ModuleSub.eMarketMateria,
				pageData = {
					pageTag = Resource.getColorLv(Utility.analysisStrResList(slot0.mHeroTrainRelationInfo.consumeStrC)[1].resourceId) - 1
				}
			}
		end

		LayerManager.showModuleLayer(slot2.moduleID, slot4)
	end

	return 
end
slot0.onCloseBtnClickAction = function (slot0, slot1)
	EventAuto:postEvent(EventDefine.eRefreshHeroTrainNode, {
		heroModelId = slot0.mHeroInfo.ModelId
	})
	LayerManager.removeLayer(slot0)

	return 
end
slot0.requestBuyInfo = function (slot0)
	if not Utility.moduleIsOpen(ModuleSub.eMarketMateria, false) then
		dump("心法铺尚未开启")

		return 
	end

	slot0.socketRequest(slot0, {
		methodName = "GetInfo",
		moduleName = "Heartmethod",
		methodData = {},
		successCallback = function (slot0)
			for slot4, slot5 in ipairs(slot0.waysListView:getItems()) do
				if slot5.refreshCell ~= nil then
					slot5.refreshCell(slot5, slot0.HeartmethodInfo)
				end
			end

			return 
		end
	})

	return 
end
slot0.requestBuyGood = function (slot0, slot1)
	slot0.socketRequest(slot0, {
		methodName = "Buy",
		moduleName = "Heartmethod",
		methodData = {
			slot1
		},
		successCallback = function (slot0)
			for slot4, slot5 in ipairs(slot0.waysListView:getItems()) do
				if slot5.refreshCell ~= nil then
					slot5.refreshCell(slot5, slot0.HeartmethodInfo)
				end
			end

			ui.showFlashReward({
				BaseGetGameResourceList = slot0.BaseGetGameResourceList
			})
			slot0.ownNumLabel:refreshString()

			return 
		end
	})

	return 
end
slot0.requestGetEliteInfo = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "GetAllNodeInfo",
		moduleName = "Elite",
		methodData = {},
		successCallback = function (slot0)
			slot0.mEliteInfo = {}
			slot0.mEliteInfo = slot0

			slot0:refreshUI()

			return 
		end
	})

	return 
end

return slot0
