slot0 = class("DlgManorUpdateLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false,
		color = cc.c4b(0, 0, 0, 150)
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "MsgBoxBg",
		params = {
			actionCallback = "onPopEnd",
			posApt = 1,
			image = "tc_1.png",
			pos = {
				x = 568,
				y = 320
			},
			size = {
				width = 600,
				height = 406
			},
			titleText = TR("提示")
		},
		children = {
			{
				name = "mTitle",
				cType = "Label",
				params = {
					emptyInit = true,
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 303.81,
						y = 357.33
					},
					text = TR("将粮仓升级至0级")
				},
				children = {}
			},
			{
				name = "untitled4",
				cType = "Scale9Sprite",
				params = {
					image = "c_24.png",
					pos = {
						x = 300.16,
						y = 186.56
					},
					size = {
						width = 556.44,
						height = 316.99
					}
				},
				children = {}
			},
			{
				name = "mSprite",
				cType = "Sprite",
				params = {
					scale = 0.75,
					image = "zy_1506.png",
					pos = {
						x = 127.79,
						y = 258.52
					}
				},
				children = {}
			},
			{
				name = "mTitleOne",
				cType = "Label",
				params = {
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 228.28,
						y = 299.15
					},
					text = TR("产出：")
				},
				children = {}
			},
			{
				name = "mResOne",
				cType = "ResLabel",
				params = {
					num = 0,
					hide = true,
					modelId = 1111,
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 295.59,
						y = 298.23
					}
				},
				children = {}
			},
			{
				name = "mPerHour",
				cType = "Label",
				params = {
					hide = true,
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 423.29,
						y = 297.45
					},
					text = TR("/小时")
				},
				children = {}
			},
			{
				name = "mAddOn",
				cType = "Label",
				params = {
					text = "+0",
					hide = true,
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 168,
						r = 139,
						b = 87
					},
					pos = {
						x = 366.72,
						y = 298.85
					}
				},
				children = {}
			},
			{
				name = "mInfoOne",
				cType = "Label",
				params = {
					hide = true,
					isRichText = true,
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 295.67,
						y = 297.83
					},
					text = TR("军械数量增加、品质提升")
				},
				children = {}
			},
			{
				name = "mTimeTitle",
				cType = "Label",
				params = {
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 283.53,
						y = 230.16
					},
					text = TR("升级时间：")
				},
				children = {}
			},
			{
				name = "mUpdateTime",
				cType = "Label",
				params = {
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 338.27,
						y = 230.21
					},
					text = TR("00小时00分00秒")
				},
				children = {}
			},
			{
				name = "untitled14",
				cType = "Scale9Sprite",
				params = {
					image = "c_11.png",
					pos = {
						x = 304.74,
						y = 138.57
					},
					size = {
						width = 519.57,
						height = 2
					}
				},
				children = {}
			},
			{
				name = "mUpdateBtn",
				cType = "Button",
				params = {
					image = "c_32.png",
					clickAction = "onClickLvUpBuild",
					pos = {
						x = 304.56,
						y = 65.17
					},
					titleText = TR("升 级")
				},
				children = {}
			},
			{
				name = "mUpdateCost",
				cType = "ResLabel",
				params = {
					modelId = 1111,
					num = 0,
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 272.14,
						y = 108.3
					}
				},
				children = {}
			},
			{
				name = "mDesLabel",
				cType = "Label",
				params = {
					align = 0,
					valign = 1,
					anchor = {
						x = 0.5,
						y = 0
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 304.82,
						y = 148.15
					},
					size = {
						width = 521.66,
						height = 0
					},
					text = TR("描述")
				},
				children = {}
			},
			{
				name = "mTipLabel",
				cType = "Label",
				params = {
					fontSize = 18,
					text = "Label",
					emptyInit = true,
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 372.66,
						y = 64.27
					}
				},
				children = {}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.Data = slot1

	slot0.super.ctor(slot0)
	slot0.initUI(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)
	slot0.refreshUI(slot0)

	if ManorHelper:getLandInfoByLandId(slot1).landStautus.opData.Type == 1 and PlayerAttrObj:getPlayerAttrByName("Lv") < TerritoryMainbuildConfig.items[slot3.Lv + 1].needPlayerLv then
		slot0.mUpdateBtn:setTitleText(TR("主角%s级", TerritoryMainbuildConfig.items[slot3.Lv + 1].needPlayerLv))
		slot0.mUpdateBtn:getTitleLabel():setFontSize(20)
	end

	return 
end
slot0.refreshUI = function (slot0)
	if TerritoryBuildlvConfig.items[slot0.Data.Type][slot0.Data.Lv + 1] then
		slot0.mTitle:setString(TR("将%s升级至%s级", TerritoryBuildModel.items[slot0.Data.Type].name, slot1))
	else
		slot1 = slot0.Data.Lv

		slot0.mTitle:setString(TR("已达到最高等级"))
	end

	slot0.mSprite:setTexture(TerritoryBuildlvConfig.items[slot0.Data.Type][slot1].smallPic .. ".png")

	if slot0.Data.Type == 1 then
		slot2 = ""

		if slot1 == slot0.Data.Lv + 1 then
			for slot7, slot8 in ipairs(slot3) do
				if slot3[slot7] ~= "" and 0 < TerritoryMainbuildConfig.items[slot1][slot3[slot7]] - TerritoryMainbuildConfig.items[slot0.Data.Lv][slot3[slot7]] then
					slot2 = slot2 .. string.format("%s+%s ", TerritoryBuildModel.items[slot7].name, slot9)
				end
			end
		else
			slot0.mInfoOne:setString(TR("已达到最高等级"))
		end

		if slot2 == "" then
			slot0.mTitleOne:setVisible(false)
		end

		slot0.mInfoOne:setString(slot2)
		slot0.mUpdateTime:setPositionX(slot0.mUpdateTime:getPositionX() + 20)
		slot0.mTimeTitle:setPositionX(slot0.mTimeTitle:getPositionX() + 20)
		slot0.mInfoOne:setPositionX(slot0.mInfoOne:getPositionX() + 20)
		slot0.mTitleOne:setPositionX(slot0.mTitleOne:getPositionX() + 20)
		slot0.mTitleOne:setString(TR("解锁："))
		slot0.mInfoOne:setColor(cc.c3b(139, 168, 87))
		slot0.mInfoOne:setVisible(true)
	elseif slot0.Data.Type == 6 or slot0.Data.Type == 8 or slot0.Data.Type == 7 or slot0.Data.Type == 9 then
		slot6, slot6 = slot0.getOutputSpeed(slot0, slot0.Data.Type, slot0.Data.Lv)

		slot0.mResOne:setType(slot2)
		slot0.mResOne:setString(slot3)
		slot0.mPerHour:setPositionX(slot0.mResOne:getPositionX() + slot0.mResOne:getContentSize().width + slot0.mResOne.label:getContentSize().width)
		slot0.mPerHour:setVisible(true)

		if slot1 == slot0.Data.Lv + 1 then
			slot4, slot5 = slot0.getOutputSpeed(slot0, slot0.Data.Type, slot1)

			slot0.mAddOn:setString(string.format("+%s/小时", slot5 - slot3))
			slot0.mAddOn:setPositionX(slot0.mPerHour:getPositionX() + slot0.mPerHour:getContentSize().width)
		else
			slot0.mAddOn:setString("")
		end

		slot0.mResOne:setVisible(true)
		slot0.mAddOn:setVisible(true)
	elseif slot0.Data.Type == 2 then
		slot3 = nil

		slot0.mInfoOne:setString(string.format("%s经验/次%s", math.floor(TerritoryBuildlvConfig.items[slot0.Data.Type][slot0.Data.Lv].playgroundGetTime*TerritoryBuildlvConfig.items[slot0.Data.Type][slot0.Data.Lv].playgroundExpOutStr), (((slot1 ~= slot0.Data.Lv + 1 or math.floor(TerritoryBuildlvConfig.items[slot0.Data.Type][slot1].playgroundGetTime*TerritoryBuildlvConfig.items[slot0.Data.Type][slot1].playgroundExpOutStr)) and 0) == 0 and "") or string.format("%s+%s经验/次", "#8BA857", ((slot1 ~= slot0.Data.Lv + 1 or math.floor(TerritoryBuildlvConfig.items[slot0.Data.Type][slot1].playgroundGetTime*TerritoryBuildlvConfig.items[slot0.Data.Type][slot1].playgroundExpOutStr)) and 0) - math.floor(TerritoryBuildlvConfig.items[slot0.Data.Type][slot0.Data.Lv].playgroundGetTime*TerritoryBuildlvConfig.items[slot0.Data.Type][slot0.Data.Lv].playgroundExpOutStr))))
		slot0.mInfoOne:setVisible(true)
	elseif slot0.Data.Type == 3 then
		slot0.mInfoOne:setString(TR("修炼材料数量增加、品质提升"))
		slot0.mInfoOne:setColor(cc.c3b(139, 168, 87))
		slot0.mInfoOne:setVisible(true)
	elseif slot0.Data.Type == 4 or slot0.Data.Type == 5 then
		slot0.mTitleOne:setString(TR("储量上限："))

		slot3 = nil

		slot0.mInfoOne:setString(string.format("%s%s", Utility.analysisStrResList(TerritoryBuildlvConfig.items[slot0.Data.Type][slot0.Data.Lv].storageResourceStr)[1].num, (((Utility.analysisStrResList((slot1 ~= slot0.Data.Lv + 1 or TerritoryBuildlvConfig.items[slot0.Data.Type][slot1].storageResourceStr) and "")[1] and Utility.analysisStrResList((slot1 ~= slot0.Data.Lv + 1 or TerritoryBuildlvConfig.items[slot0.Data.Type][slot1].storageResourceStr) and "")[1].num) or 0) ~= 0 and string.format("%s+%s", "#8BA857", ((Utility.analysisStrResList((slot1 ~= slot0.Data.Lv + 1 or TerritoryBuildlvConfig.items[slot0.Data.Type][slot1].storageResourceStr) and "")[1] and Utility.analysisStrResList((slot1 ~= slot0.Data.Lv + 1 or TerritoryBuildlvConfig.items[slot0.Data.Type][slot1].storageResourceStr) and "")[1].num) or 0) - Utility.analysisStrResList(TerritoryBuildlvConfig.items[slot0.Data.Type][slot0.Data.Lv].storageResourceStr)[1].num)) or ""))
		slot0.mInfoOne:setPositionX(slot0.mTitleOne:getPositionX() + slot0.mTitleOne:getContentSize().width)
		slot0.mInfoOne:setVisible(true)
	elseif slot0.Data.Type == 10 then
		slot6, slot6 = slot0.getOutputSpeed(slot0, slot0.Data.Type, slot0.Data.Lv)

		slot0.mResOne:setVisible(true)
		slot0.mResOne:setType(slot2)
		slot0.mResOne:setString(slot3)
		slot0.mPerHour:setPositionX(slot0.mResOne:getPositionX() + slot0.mResOne:getContentSize().width + slot0.mResOne.label:getContentSize().width)
		slot0.mPerHour:setVisible(true)

		if slot1 == slot0.Data.Lv + 1 then
			slot4, slot5 = slot0.getOutputSpeed(slot0, slot0.Data.Type, slot1)

			slot0.mAddOn:setString(string.format("+%s/小时", slot5 - slot3))
			slot0.mAddOn:setPositionX(slot0.mPerHour:getPositionX() + slot0.mPerHour:getContentSize().width)
		else
			slot0.mAddOn:setString("")
		end

		slot0.mResOne:setVisible(true)
		slot0.mAddOn:setVisible(true)
	end

	if slot1 == slot0.Data.Lv + 1 then
		slot0.mUpdateTime:setString(slot2)

		slot4 = Utility.analysisStrResList(slot3)

		slot0.mUpdateCost:setType(slot4[1].resourceId)
		slot0.mUpdateCost:setString(slot4[1].num, (Resource.isEnough(slot4[1].resourceId, slot4[1].num, false) and cc.c3b(139, 168, 87)) or cc.c3b(192, 65, 65))

		slot5 = true

		if slot0.Data.Type == 1 then
			if PlayerAttrObj:getPlayerAttrByName("Lv") < TerritoryMainbuildConfig.items[slot1].needPlayerLv then
				slot5 = false
			end
		elseif ManorHelper.MainLandId ~= slot0.Data.LandId then
			slot0.mUpdateBtn:setBright(Resource.isEnough(slot4[1].resourceId, slot4[1].num, false) and slot1 <= ManorHelper.lv)
		end
	else
		slot0.mUpdateCost:setVisible(false)
		slot0.mUpdateBtn:setBright(false)
	end

	slot0.mDesLabel:setString(TerritoryBuildModel.items[slot0.Data.Type].intro)

	return 
end
slot0.getOutputSpeed = function (slot0, slot1, slot2)
	slot3 = 0
	slot4 = 12
	slot5 = "fiveMinutesOutputStr"

	if slot1 == 10 then
		slot5 = "fiveMinutesOutputStoneStr"
	end

	slot8 = Utility.analysisStrResList(slot6)[1].resourceId
	slot9 = 0

	for slot14, slot15 in pairs(slot10) do
		if slot15.fightattr == slot8 then
			slot9 = slot15.value/100

			break
		end
	end

	return slot8, math.ceil(slot7[1].num*slot4*(slot9 + 1))
end
slot0.findEmptyPos = function (slot0)
	slot0.mWorkingList = {}

	for slot4 = 1, ManorHelper.queueNum, 1 do
		slot0.mWorkingList[slot4] = {}
	end

	for slot4, slot5 in pairs(ManorHelper.openInfo) do
		if slot5.IsLvUp then
			slot0.mWorkingList[slot5.QueueId] = clone(slot5)
		end
	end

	slot1, slot3 = slot0.getUnlockList(slot0)

	for slot6 = slot2, #slot1, 1 do
		table.insert(slot0.mWorkingList, TerritoryBuildteamConfig.items[slot1[slot6]])
	end

	slot3 = 0

	for slot7, slot8 in ipairs(slot0.mWorkingList) do
		if not next(slot8) then
			slot3 = slot7

			break
		end
	end

	return slot3
end
slot0.getUnlockList = function (slot0)
	table.sort(slot4, function (slot0, slot1)
		return slot0 < slot1
	end)

	return table.keys(TerritoryBuildteamConfig.items), TerritoryBuildteamConfig.items_count - (TerritoryConfig.items[1].initBuildTeam + TerritoryBuildteamConfig.items_count) - ManorHelper.queueNum + 1
end
slot0.onClickLvUpBuild = function (slot0)
	slot3 = ManorHelper:getLandInfoByLandId(slot1).landStautus.status

	if not TerritoryBuildlvConfig.items[ManorHelper.getLandInfoByLandId(slot1).landStautus.opData.Type][ManorHelper.getLandInfoByLandId(slot1).landStautus.opData.Lv + 1] then
		ui.showFlashView(TR("已满级"))

		return 
	end

	if slot4.Type == 1 and PlayerAttrObj:getPlayerAttrByName("Lv") < TerritoryMainbuildConfig.items[slot4.Lv + 1].needPlayerLv then
		ui.showFlashView(TR("需要玩家等级%s级", TerritoryMainbuildConfig.items[slot4.Lv + 1].needPlayerLv))

		return 
	end

	if ManorHelper.lv < slot4.Lv + 1 and ManorHelper.MainLandId ~= slot1 then
		ui.showFlashView(TR("不能超过庄园等级"))

		return 
	end

	for slot11, slot12 in ipairs(slot7) do
		if not Resource.isEnough(slot12.resourceId, slot12.num, true) then
			return 
		end
	end

	if slot0.findEmptyPos(slot0) == 0 then
		ui.showFlashView(TR("升级队列已满"))

		return 
	end

	slot0.socketRequest(slot0, {
		methodName = "LvUp",
		moduleName = "TerritoryMainCity",
		methodData = {
			slot1,
			slot0.findEmptyPos(slot0)
		},
		guideInfo = Guide.manager:getCurRequestGuideData(),
		successCallback = function (slot0)
			ManorHelper:updateManorInfo(slot0, true)
			EventAuto:postEvent(ManorHelper.Events.eUpdateSubManorLayer)
			EventAuto:postEvent(ManorHelper.Events.eUpdatePartLands, {
				slot0
			})
			EventAuto:postEvent(ManorHelper.Events.ePlayEffectToLand, {
				slot0,
				ManorHelper.effectType.buildStart
			})

			if EventAuto.postEvent.Data and slot1.Data.callBack then
				slot1.Data.callBack()
			end

			LayerManager.removeLayer(LayerManager.removeLayer)

			return 
		end
	})

	return 
end
slot0.onPopEnd = function (slot0)
	slot0.executeGuide(slot0)

	return 
end
slot0.executeGuide = function (slot0)
	return 
end

return slot0
