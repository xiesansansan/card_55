slot0 = class("EquipTotalAttrShowLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false,
		color = cc.c4b(0, 0, 0, 128)
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "MsgBoxBg",
		params = {
			actionCallback = "onActionShow",
			posApt = 1,
			image = "tc_2.png",
			pos = {
				x = 568,
				y = 320
			},
			size = {
				width = 520,
				height = 520
			},
			titleText = TR("装备属性")
		},
		children = {
			{
				name = "untitled8",
				cType = "Label",
				params = {
					fontSize = 24,
					color = {
						g = 49,
						r = 49,
						b = 49
					},
					pos = {
						x = 260,
						y = 452
					},
					text = TR("属性加成")
				},
				children = {
					{
						name = "untitled9",
						cType = "Scale9Sprite",
						params = {
							reverse = 1,
							image = "c_36.png",
							pos = {
								x = 186.18,
								y = 11
							}
						},
						children = {}
					},
					{
						name = "untitled10",
						cType = "Scale9Sprite",
						params = {
							image = "c_36.png",
							pos = {
								x = -87.69,
								y = 11
							}
						},
						children = {}
					}
				}
			},
			{
				name = "untitled2",
				cType = "Label",
				params = {
					fontSize = 24,
					color = {
						g = 49,
						r = 49,
						b = 49
					},
					pos = {
						x = 260,
						y = 211
					},
					text = TR("特殊天赋")
				},
				children = {
					{
						name = "untitled7",
						cType = "Scale9Sprite",
						params = {
							reverse = 1,
							image = "c_36.png",
							pos = {
								x = 186.18,
								y = 11
							}
						},
						children = {}
					},
					{
						name = "untitled6",
						cType = "Scale9Sprite",
						params = {
							image = "c_36.png",
							pos = {
								x = -87.69,
								y = 11
							}
						},
						children = {}
					}
				}
			},
			{
				name = "untitled3",
				cType = "Scale9Sprite",
				params = {
					image = "c_24.png",
					pos = {
						x = 260.21,
						y = 338.64
					},
					size = {
						width = 440,
						height = 180
					}
				},
				children = {
					{
						name = "nAttrList",
						cType = "ListView",
						params = {
							direction = true,
							pos = {
								x = 0,
								y = -1.39
							},
							size = {
								width = 440,
								height = 180
							}
						},
						children = {
							{
								name = "nItem",
								cType = "Layout",
								params = {
									size = {
										width = 470,
										height = 60
									}
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "untitled5",
				cType = "Scale9Sprite",
				params = {
					image = "c_24.png",
					pos = {
						x = 260.57,
						y = 107.78
					},
					size = {
						width = 440,
						height = 140
					}
				},
				children = {
					{
						name = "sAttrList",
						cType = "ListView",
						params = {
							direction = true,
							pos = {
								x = 0,
								y = 0
							},
							size = {
								width = 440,
								height = 140
							}
						},
						children = {
							{
								name = "sItem",
								cType = "Layout",
								params = {
									pos = {
										z = 0,
										x = 0,
										y = 75
									},
									size = {
										width = 470,
										height = 50
									}
								},
								children = {}
							}
						}
					}
				}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.super.ctor(slot0)
	slot0.initUI(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)

	return 
end
slot0.onActionShow = function (slot0)
	slot0.getPlayerSlotInfo(slot0)

	return 
end
slot0.refreshUI = function (slot0)
	slot0.nAttrList:removeAllChildren()

	for slot5 = 1, math.ceil(#slot0.nAttrData/3), 1 do
		slot6 = slot0.createLayoutTemplateNode(slot0, "nItem")

		for slot10 = 1, 3, 1 do
			if slot0.nAttrData[(slot5 - 1)*3 + slot10] then
				slot13 = UIWrap.newControl("Label", {
					fontSize = 18,
					align = 1,
					isRichText = true,
					text = TR("%s%s+%d", FightAttrTypeName[slot11.fightattr], "#37ff40", slot11.value),
					outlineColor = cc.p(51, 42, 24)
				})

				slot13.setPosition(slot13, (slot10 - 1)*160 + 60, 30)
				slot6.addChild(slot6, slot13)
			end
		end

		slot0.nAttrList:pushBackCustomItem(slot6)
	end

	slot0.sAttrList:removeAllChildren()

	for slot6 = 1, math.ceil(#slot0.sAttrData/3), 1 do
		slot7 = slot0.createLayoutTemplateNode(slot0, "sItem")

		for slot11 = 1, 3, 1 do
			if slot0.sAttrData[(slot6 - 1)*3 + slot11] then
				slot14 = UIWrap.newControl("Label", {
					fontSize = 18,
					align = 1,
					isRichText = true,
					text = TR("%s%s+%0.1f%%", FightAttrTypeName[slot12.fightattr], "#37ff40", slot12.value/100),
					outlineColor = cc.p(51, 42, 24)
				})

				slot14.setPosition(slot14, (slot11 - 1)*160 + 60, 30)
				slot7.addChild(slot7, slot14)
			end
		end

		slot0.sAttrList:pushBackCustomItem(slot7)
	end

	return 
end
slot0.getPlayerSlotInfo = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "GetPlayerAllInfo",
		moduleName = "Player",
		methodData = {
			PlayerAttrObj:getPlayerAttrByName("PlayerId"),
			0,
			0
		},
		successCallback = function (slot0)
			slot3 = require("battle.common.AttrHelper").parseServerBaseAttr(cjson.decode(slot0.PlayerSlot.2)) or {}
			slot4 = {}

			for slot8, slot9 in pairs(slot3) do
				table.insert(slot4, {
					fightattr = slot8,
					value = slot9
				})
			end

			slot6 = slot1.parseServerBaseAttr(cjson.decode(slot0.PlayerSlot.4)) or {}
			slot7 = {}

			for slot11, slot12 in pairs(slot6) do
				table.insert(slot7, {
					fightattr = slot11,
					value = slot12
				})
			end

			for slot11, slot12 in pairs(slot4) do
				for slot16, slot17 in pairs(slot7) do
					if slot12.fightattr == slot17.fightattr then
						slot12.value = slot12.value + slot17.value

						break
					end
				end
			end

			for slot11, slot12 in pairs(slot7) do
				slot13 = false

				for slot17, slot18 in pairs(slot4) do
					if slot12.fightattr == slot18.fightattr then
						slot13 = true

						break
					end
				end

				if not slot13 then
					table.insert(slot4, slot12)
				end
			end

			slot0.nAttrData = {}
			slot0.sAttrData = {}

			for slot11, slot12 in pairs(slot4) do
				if Utility.isAttrNeedPercent(slot12.fightattr) then
					table.insert(slot0.sAttrData, slot12)
				else
					table.insert(slot0.nAttrData, slot12)
				end
			end

			table.sort(slot0.sAttrData, function (slot0, slot1)
				return slot0.fightattr < slot1.fightattr
			end)
			table.sort(slot0.nAttrData, function (slot0, slot1)
				return slot0.fightattr < slot1.fightattr
			end)
			slot0:refreshUI()

			return 
		end
	})

	return 
end

return slot0
