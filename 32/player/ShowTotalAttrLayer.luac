slot0 = class("ShowTotalAttrLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false,
		color = cc.c4b(0, 0, 0, 150)
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "MsgBoxBg",
		params = {
			actionCallback = "onPopActionOver",
			posApt = 1,
			image = "tc_2.png",
			pos = {
				x = 568,
				y = 320
			},
			size = {
				width = 700,
				height = 506
			},
			titleText = TR("属性详情")
		},
		children = {
			{
				name = "mListView",
				cType = "ListView",
				params = {
					direction = true,
					anchor = {
						x = 0.5,
						y = 1
					},
					pos = {
						x = 350.24,
						y = 464.6
					},
					size = {
						width = 650,
						height = 430
					}
				},
				children = {
					{
						name = "mAttrTitle",
						cType = "Layout",
						custom = {
							{
								value = "untitled5-text",
								name = "attrTitleName",
								type = "string"
							}
						},
						params = {
							pos = {
								z = 0,
								x = -0.74,
								y = 776.78
							},
							size = {
								width = 650,
								height = 48
							}
						},
						children = {
							{
								name = "untitled7",
								cType = "Sprite",
								params = {
									image = "c_36.png",
									anchor = {
										x = 1,
										y = 0.5
									},
									pos = {
										x = 249,
										y = 24
									}
								},
								children = {}
							},
							{
								name = "untitled5",
								cType = "Label",
								params = {
									fontSize = 24,
									anchor = {
										x = 0.5,
										y = 0.5
									},
									color = {
										g = 37,
										r = 37,
										b = 37
									},
									pos = {
										x = 325,
										y = 24
									},
									text = TR("修炼属性")
								},
								children = {}
							},
							{
								name = "untitled6",
								cType = "Sprite",
								params = {
									image = "c_36.png",
									reverse = 1,
									anchor = {
										x = 0,
										y = 0.5
									},
									pos = {
										x = 558,
										y = 24
									}
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "noTig",
				cType = "Label",
				params = {
					hide = true,
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 350,
						y = 253
					},
					text = TR("暂无属性加成")
				},
				children = {}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	package.loaded["data.AttrViewConfig"] = nil
	slot0.ShowAttrList = require("data.AttrViewConfig")

	slot0.super.ctor(slot0, {
		swallow = true
	})
	slot0.initUI(slot0)
	slot0.getPlayerAllInfo(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)

	return 
end
slot0.refreshUI = function (slot0)
	slot0.mListView:removeAllChildren()

	slot1 = 0

	for slot5, slot6 in ipairs(slot0.ShowAttrList) do
		slot7 = {}

		for slot11, slot12 in pairs(slot0.mAttrData[slot6.tag]) do
			table.insert(slot7, {
				fightattr = slot11,
				value = slot12
			})
		end

		slot8 = {}

		for slot12, slot13 in pairs(slot0.mAttrData.4) do
			table.insert(slot8, {
				fightattr = slot12,
				value = slot13
			})
		end

		if slot6.tag == "2" then
			for slot12, slot13 in pairs(slot7) do
				for slot17, slot18 in pairs(slot8) do
					if slot13.fightattr == slot18.fightattr then
						slot13.value = slot13.value + slot18.value

						break
					end
				end
			end

			for slot12, slot13 in pairs(slot8) do
				slot14 = false

				for slot18, slot19 in pairs(slot7) do
					if slot13.fightattr == slot19.fightattr then
						slot14 = true

						break
					end
				end

				if not slot14 then
					table.insert(slot7, slot13)
				end
			end
		end

		table.sort(slot7, function (slot0, slot1)
			return slot0.fightattr < slot1.fightattr
		end)

		if #slot7 == 0 then
			slot1 = slot1 + 1
		end

		if Utility.moduleIsOpen(slot6.moduleId) and 0 < #slot7 then
			slot0.mListView:pushBackCustomItem(slot9)

			slot11 = math.max(math.ceil(#slot7/3)*42, 42)

			UIWrap.newControl("Layout", {
				size = cc.size(650, slot11)
			}).addChild(slot12, slot13)

			for slot17 = 1, math.ceil(#slot7/3), 1 do
				for slot21 = 1, 3, 1 do
					slot23 = ""

					if slot7[(slot17 - 1)*3 + slot21] then
						slot24 = UIWrap.newControl("Label", {
							fontSize = 20,
							align = 1,
							text = (not Utility.isAttrNeedPercent(slot22.fightattr) or TR("%s+%0.1f%%", FightAttrTypeName[slot22.fightattr], slot22.value/100)) and TR("%s+%d", FightAttrTypeName[slot22.fightattr], slot22.value),
							color = cc.c3b(0, 0, 0)
						})

						slot24.setPosition(slot24, slot25, slot11 - 23 - (slot17 - 1)*40)
						slot13.addChild(slot13, slot24)
					end
				end
			end

			slot0.mListView:pushBackCustomItem(slot12)
		end
	end

	slot0.noTig:setVisible(#slot0.ShowAttrList == slot1)

	return 
end
slot0.onPopActionOver = function (slot0)
	slot0.actionRefresh()

	return 
end
slot0.getPlayerAllInfo = function (slot0)
	slot0.actionRefresh = Utility.getCounterFunc(handler(slot0, slot0.refreshUI), 2)

	slot0.socketRequest(slot0, {
		methodName = "GetPlayerAllInfo",
		moduleName = "Player",
		methodData = {
			PlayerAttrObj:getPlayerAttrByName("PlayerId"),
			0,
			0
		},
		successCallback = function (slot0)
			slot1 = require("battle.common.AttrHelper")
			slot2 = slot0.PlayerSlot or {}
			slot0.mAttrData = {}

			for slot6, slot7 in pairs(slot2) do
				slot0.mAttrData[slot6] = slot1.parseServerBaseAttr(slot8)
			end

			slot4 = slot1.parseServerBaseAttr(cjson.decode(slot0.PlayerSlot.2)) or {}
			slot5 = {}

			for slot9, slot10 in pairs(slot4) do
				table.insert(slot5, {
					fightattr = slot9,
					value = slot10
				})
			end

			slot7 = slot1.parseServerBaseAttr(cjson.decode(slot0.PlayerSlot.4)) or {}
			slot8 = {}

			for slot12, slot13 in pairs(slot7) do
				table.insert(slot8, {
					fightattr = slot12,
					value = slot13
				})
			end

			for slot12, slot13 in pairs(slot5) do
				for slot17, slot18 in pairs(slot8) do
					if slot13.fightattr == slot18.fightattr then
						slot13.value = slot13.value + slot18.value

						break
					end
				end
			end

			if not slot0.notFirst then
				slot0.actionRefresh()
			else
				slot0:refreshUI()
			end

			slot0.notFirst = true

			return 
		end
	})

	return 
end

return slot0
