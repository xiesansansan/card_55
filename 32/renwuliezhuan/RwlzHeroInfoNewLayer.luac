slot0 = class("RwlzHeroInfoNewLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = true
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "Sprite",
		params = {
			isFullScale = true,
			scaleApt = 2,
			posApt = 1,
			image = "xklz_8.png",
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {}
	},
	{
		name = "centerNode",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {
			{
				name = "HeroTemplate",
				cType = "TemplateNode",
				custom = {
					{
						value = "untitled41-image",
						name = "heroImage",
						type = "string"
					}
				},
				params = {
					pos = {
						x = -421.46,
						y = -308.57
					},
					size = {
						width = 475,
						height = 585
					}
				},
				children = {
					{
						name = "untitled40",
						cType = "Sprite",
						params = {
							image = "c_132.png",
							pos = {
								x = 222.9,
								y = 72.8
							}
						},
						children = {}
					},
					{
						name = "untitled41",
						cType = "Sprite",
						params = {
							childName = "hero",
							scale = 0.75,
							hide = true,
							image = "lh_12104.png",
							pos = {
								x = 238.04,
								y = 316.36
							}
						},
						children = {}
					}
				}
			}
		}
	},
	{
		name = "leftNode",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 0,
				y = 640
			}
		},
		children = {
			{
				name = "untitled3",
				cType = "Button",
				params = {
					image = "c_1.png",
					clickAction = "onCloseBtnClick",
					pos = {
						x = 124.24,
						y = -29.7
					}
				},
				children = {
					{
						name = "untitled4",
						cType = "Sprite",
						params = {
							image = "xklz_1.png",
							pos = {
								x = 58.33,
								y = 4.33
							}
						},
						children = {}
					}
				}
			},
			{
				name = "untitled6",
				cType = "Sprite",
				params = {
					image = "xklz_23.png",
					pos = {
						x = 144.04,
						y = -444.73
					}
				},
				children = {}
			},
			{
				name = "chapter1Bg",
				cType = "Sprite",
				custom = {
					{
						value = 1,
						name = "tag",
						type = "integer"
					}
				},
				params = {
					image = "xklz_24.png",
					pos = {
						x = 75.38,
						y = -360.49
					}
				},
				children = {
					{
						name = "untitled35",
						cType = "Scale9Sprite",
						params = {
							image = "xklz_3.png",
							pos = {
								x = 54.29,
								y = 13.61
							},
							size = {
								width = 145,
								height = 22
							}
						},
						children = {}
					}
				}
			},
			{
				name = "chapter2Bg",
				cType = "Sprite",
				custom = {
					{
						value = 2,
						name = "tag",
						type = "integer"
					}
				},
				params = {
					image = "xklz_25.png",
					pos = {
						x = 112.91,
						y = -461.98
					}
				},
				children = {
					{
						name = "untitled36",
						cType = "Scale9Sprite",
						params = {
							image = "xklz_3.png",
							pos = {
								x = 54.29,
								y = 13.61
							},
							size = {
								width = 145,
								height = 22
							}
						},
						children = {}
					}
				}
			},
			{
				name = "chapter3Bg",
				cType = "Sprite",
				custom = {
					{
						value = 3,
						name = "tag",
						type = "integer"
					}
				},
				params = {
					image = "xklz_25.png",
					pos = {
						x = 177.13,
						y = -561.19
					}
				},
				children = {
					{
						name = "untitled37",
						cType = "Scale9Sprite",
						params = {
							image = "xklz_3.png",
							pos = {
								x = 54.29,
								y = 13.61
							},
							size = {
								width = 145,
								height = 22
							}
						},
						children = {}
					}
				}
			},
			{
				name = "preChapter1",
				cType = "Label",
				params = {
					fontSize = 18,
					text = "",
					color = {
						g = 255,
						r = 255,
						b = 255
					},
					outlineColor = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 70.08,
						y = -390.83
					}
				},
				children = {}
			},
			{
				name = "preChapter2",
				cType = "Label",
				params = {
					fontSize = 18,
					text = "",
					color = {
						g = 65,
						r = 192,
						b = 65
					},
					outlineColor = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 111.08,
						y = -493.35
					}
				},
				children = {}
			},
			{
				name = "preChapter3",
				cType = "Label",
				params = {
					fontSize = 18,
					text = "",
					color = {
						g = 65,
						r = 192,
						b = 65
					},
					outlineColor = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 176.84,
						y = -592.97
					}
				},
				children = {}
			}
		}
	},
	{
		name = "rightNode",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 1136,
				y = 320
			}
		},
		children = {
			{
				name = "untitled38",
				cType = "Sprite",
				params = {
					image = "c_9.png",
					pos = {
						x = -263.92,
						y = 5.49
					}
				},
				children = {}
			},
			{
				name = "untitled20",
				cType = "Sprite",
				params = {
					image = "xklz_20.png",
					pos = {
						x = -262.86,
						y = 128.43
					}
				},
				children = {}
			},
			{
				name = "untitled21",
				cType = "Sprite",
				params = {
					image = "zj_18.png",
					pos = {
						x = -373.74,
						y = 206.9
					}
				},
				children = {
					{
						name = "chapterStr",
						cType = "Label",
						params = {
							fontSize = 24,
							color = {
								g = 37,
								r = 37,
								b = 37
							},
							pos = {
								x = 119.4,
								y = 7.82
							},
							text = TR("第一章")
						},
						children = {}
					},
					{
						name = "untitled39",
						cType = "Sprite",
						params = {
							reverse = 1,
							image = "zj_18.png",
							pos = {
								x = 226.31,
								y = 9.22
							}
						},
						children = {}
					}
				}
			},
			{
				name = "chapterDes",
				cType = "Label",
				params = {
					fontSize = 20,
					text = "",
					align = 0,
					valign = 0,
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = -267.82,
						y = 109.77
					},
					size = {
						width = 390,
						height = 145
					}
				},
				children = {}
			},
			{
				name = "untitled29",
				cType = "Scale9Sprite",
				params = {
					image = "c_118.png",
					pos = {
						x = -265.07,
						y = -146.2
					},
					size = {
						width = 418,
						height = 31
					}
				},
				children = {
					{
						name = "zhenyin",
						cType = "Label",
						params = {
							fontSize = 18,
							text = "",
							color = {
								g = 255,
								r = 255,
								b = 255
							},
							outlineColor = {
								g = 37,
								r = 37,
								b = 37
							},
							pos = {
								x = 208.76,
								y = 13.33
							}
						},
						children = {}
					}
				}
			},
			{
				name = "fightBtn",
				cType = "Button",
				params = {
					image = "c_19.png",
					clickAction = "onFightClick",
					pos = {
						x = -256.85,
						y = -216.13
					},
					titleText = TR("挑 战")
				},
				children = {}
			},
			{
				name = "listview",
				cType = "ListView",
				params = {
					direction = false,
					pos = {
						x = -440.24,
						y = -108.68
					},
					size = {
						width = 350,
						height = 120
					}
				},
				children = {
					{
						name = "layout",
						cType = "Layout",
						custom = {
							{
								value = "untitled34-initParams",
								name = "cardInfo",
								type = "string"
							}
						},
						params = {
							size = {
								width = 100,
								height = 100
							}
						},
						children = {
							{
								name = "untitled34",
								cType = "CardNode",
								params = {
									allowClick = true,
									initParams = {},
									pos = {
										x = 50,
										y = 50
									}
								},
								children = {}
							}
						}
					}
				}
			}
		}
	},
	{
		name = "untitled42",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 1136,
				y = 640
			}
		},
		children = {
			{
				name = "untitled43",
				cType = "TopResourceNode",
				params = {
					moduleIdList = {
						1111,
						1112,
						1114
					},
					pos = {
						x = -519.41,
						y = -51
					}
				},
				children = {}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.super.ctor(slot0, {
		swallow = true
	})

	slot0.isOpen = slot1.isOpen or false
	slot0.mHeroInfoList = slot1.mInfoList
	slot0.QunxiaNodeDataList = slot1.mQunxiaNodeDataList
	slot0.QunxiaChapterList = slot1.mQunxiaChapterList

	slot0.initUI(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)

	slot3 = {
		[6.0] = "xkxx_16.png",
		[15.0] = "xkxx_19.png",
		[10.0] = "xkxx_17.png",
		[18.0] = "xkxx_20.png",
		[13.0] = "xkxx_18.png"
	}
	slot4, slot5 = Utility.getColorValue(HeroModel.items[slot0.mHeroInfoList.matchHeroModelId].quality, true)
	slot6 = HeroModel.items[slot0.mHeroInfoList.matchHeroModelId].name
	slot7 = slot0.createLayoutTemplateNode(slot0, "HeroTemplate", {
		modelId = slot0.mHeroInfoList.matchHeroModelId,
		heroImage = Utility.getHeroStandImage(slot0.mHeroInfoList.matchHeroModelId)
	})

	if HeroModel.items[slot0.mHeroInfoList.matchHeroModelId].drawingPicB ~= "" then
		if cc.FileUtils:getInstance():isFileExist(slot2.drawingPicB .. ".skel") then
			slot8 = UIWrap.newControl("Effect", {
				loop = true,
				animation = "animation",
				scale = 0.46,
				dataFile = slot2.drawingPicB
			})

			slot8.setPosition(slot8, cc.p(237.5, 80))
			slot7.addChild(slot7, slot8, 0)
		else
			slot7.hero:setVisible(true)
		end
	else
		slot7.hero:setVisible(true)
	end

	slot0.centerNode:addChild(slot7)
	slot0.refUiInfo(slot0)

	return 
end
slot0.getRestoreData = function (slot0)
	return {
		isOpen = slot0.isOpen,
		mInfoList = slot0.mHeroInfoList,
		mQunxiaNodeDataList = slot0.QunxiaNodeDataList
	}
end
slot0.refUiInfo = function (slot0)
	slot0.fightBtn:setEnabled(not slot0.isOpen)

	slot1 = slot0.mHeroInfoList.nodeId%slot0.mHeroInfoList.matchChapterModelId

	slot0.chapterDes:setString(TR("%s", slot0.mHeroInfoList.heroDes))
	slot0.chapterStr:setString(TR("%s", QunxiaNodeModel.items[slot0.mHeroInfoList.nodeId].heroOrderName))

	slot2 = slot0.foundHeroOtherInfo(slot0, slot0.mHeroInfoList.matchHeroModelId)

	slot0.preChapter1:setString(TR("%s第%s回", QunxiaChapterModel.items[slot2[1].matchChapterModelId].name, slot3))
	slot0.preChapter2:setString(TR("%s第%s回", QunxiaChapterModel.items[slot2[2].matchChapterModelId].name, slot2[2].nodeId%slot2[2].matchChapterModelId))

	if slot2[3] then
		slot0.preChapter3:setVisible(true)
		slot0.preChapter3:setString(TR("%s第%s回", QunxiaChapterModel.items[slot2[3].matchChapterModelId].name, slot2[3].nodeId%slot2[3].matchChapterModelId))
	else
		slot0.preChapter3:setVisible(false)
	end

	slot0.listview:removeAllChildren()

	for slot9, slot10 in ipairs(Utility.analysisStrResList(slot5)) do
		slot0.listview:pushBackCustomItem(slot0.createLayoutTemplateNode(slot0, "layout", {
			cardInfo = {
				cardInfo = {
					modelId = slot10.resourceId,
					num = slot10.num
				},
				showAttrs = {
					Enums.CardShowAttr.eNum
				}
			}
		}))
	end

	if slot2[1].nodeId == slot0.mHeroInfoList.nodeId and slot2[1].matchChapterModelId == slot0.mHeroInfoList.matchChapterModelId then
		slot0.chapter1Bg:setTexture("xklz_24.png")
		slot0.preChapter1:setColor(cc.c3b(255, 255, 255))
	else
		slot0.chapter1Bg:setTexture((slot0.isOpenFirst(slot0, slot2[1].nodeId) and "xklz_24.png") or "xklz_25.png")
		slot0.preChapter1:setColor((slot0.isOpenFirst(slot0, slot2[1].nodeId) and cc.c3b(255, 255, 255)) or cc.c3b(192, 65, 65))
	end

	if slot2[2].nodeId == slot0.mHeroInfoList.nodeId and slot2[2].matchChapterModelId == slot0.mHeroInfoList.matchChapterModelId then
		slot0.chapter2Bg:setTexture("xklz_24.png")
		slot0.preChapter2:setColor(cc.c3b(255, 255, 255))
	else
		slot0.chapter2Bg:setTexture((slot0.isOpenFirst(slot0, slot2[2].nodeId) and "xklz_24.png") or "xklz_25.png")
		slot0.preChapter2:setColor((slot0.isOpenFirst(slot0, slot2[2].nodeId) and cc.c3b(255, 255, 255)) or cc.c3b(192, 65, 65))
	end

	if slot2[3] then
		slot0.chapter3Bg:setVisible(true)
		slot0.preChapter3:setVisible(true)

		if slot2[3].nodeId == slot0.mHeroInfoList.nodeId and slot2[3].matchChapterModelId == slot0.mHeroInfoList.matchChapterModelId then
			slot0.chapter3Bg:setTexture("xklz_24.png")
			slot0.preChapter3:setColor(cc.c3b(255, 255, 255))
		else
			slot0.chapter3Bg:setTexture((slot0.isOpenFirst(slot0, slot2[3].nodeId) and "xklz_24.png") or "xklz_25.png")
			slot0.preChapter3:setColor((slot0.isOpenFirst(slot0, slot2[3].nodeId) and cc.c3b(255, 255, 255)) or cc.c3b(192, 65, 65))
		end
	else
		slot0.chapter3Bg:setVisible(false)
		slot0.preChapter3:setVisible(false)
	end

	slot0.refreeZhiYe(slot0)

	return 
end
slot0.refreeZhiYe = function (slot0)
	slot0.needIgnoreCampIds = {
		1,
		2,
		3
	}
	slot0.needIgnoreJobIds = {
		1,
		2,
		3,
		4,
		5
	}
	slot1 = {
		[CampType.eSheDiao] = TR("射雕"),
		[CampType.eShenDiao] = TR("神雕"),
		[CampType.eYiTian] = TR("倚天")
	}
	slot2 = {
		[ProfessionType.eDao] = TR("掌"),
		[ProfessionType.eJian] = TR("剑"),
		[ProfessionType.eLi] = TR("力"),
		[ProfessionType.eQi] = TR("气"),
		[ProfessionType.eJi] = TR("技")
	}
	slot3 = ""

	if slot0.mHeroInfoList.campLimit == "" then
		slot3 = "无限制"
		slot0.needIgnoreCampIds = {}
	else
		for slot8, slot9 in pairs(slot4) do
			slot3 = slot3 .. slot1[tonumber(slot9)] .. " "

			table.removebyvalue(slot0.needIgnoreCampIds, tonumber(slot9))
		end
	end

	slot4 = ""

	if slot0.mHeroInfoList.jobLimit == "" then
		slot4 = "无限制"
		slot0.needIgnoreJobIds = {}
	else
		for slot9, slot10 in pairs(slot5) do
			slot4 = slot4 .. slot2[tonumber(slot10)] .. " "

			table.removebyvalue(slot0.needIgnoreJobIds, tonumber(slot10))
		end
	end

	slot0.zhenyin:setString(TR("阵营限制:%s 可用职业:%s", slot3, slot4))

	return 
end
slot0.onFightClick = function (slot0)
	if slot0.mHeroInfoList.nodeTypeId == 1 then
		if slot0.mHeroInfoList.isScript ~= "" then
			LayerManager.addLayer({
				cleanUp = false,
				name = "commonlayer.DlgCampReadyLayer",
				data = {
					noNeedVit = true,
					isPve = true,
					callback = function (slot0)
						slot0:socketRequest({
							methodName = "GetNodeFightInfo",
							moduleName = "QunxiaChapter",
							callModelSub = ModuleSub.eQunxia,
							methodData = {
								slot0.mHeroInfoList.matchChapterModelId,
								slot0.mHeroInfoList.nodeId,
								table.concat(slot0, ",")
							},
							successCallback = function (slot0)
								require("common.BattleEntry"):StartBattle({
									fightInfo = slot0.FightInfo,
									extraData = {
										chapterId = slot0.mHeroInfoList.matchChapterModelId,
										nodeId = slot0.mHeroInfoList.nodeId
									},
									beforeScript = slot0.mHeroInfoList.isScript
								})

								return 
							end
						})

						return 
					end,
					ignoreCampList = slot0.needIgnoreCampIds,
					ignoreProfessionList = slot0.needIgnoreJobIds,
					titleText = TR("出战准备")
				},
				zOrder = Enums.ZOrderType.ePopLayer
			})
		else
			LayerManager.addLayer({
				cleanUp = false,
				name = "commonlayer.DlgCampReadyLayer",
				data = {
					noNeedVit = true,
					isPve = true,
					callback = function (slot0)
						slot0:socketRequest({
							methodName = "GetNodeFightInfo",
							moduleName = "QunxiaChapter",
							callModelSub = ModuleSub.eQunxia,
							methodData = {
								slot0.mHeroInfoList.matchChapterModelId,
								slot0.mHeroInfoList.nodeId,
								table.concat(slot0, ",")
							},
							successCallback = function (slot0)
								require("common.BattleEntry"):StartBattle({
									fightInfo = slot0.FightInfo,
									extraData = {
										chapterId = slot0.mHeroInfoList.matchChapterModelId,
										nodeId = slot0.mHeroInfoList.nodeId
									}
								})

								return 
							end
						})

						return 
					end,
					ignoreCampList = slot0.needIgnoreCampIds,
					ignoreProfessionList = slot0.needIgnoreJobIds,
					titleText = TR("出战准备")
				},
				zOrder = Enums.ZOrderType.ePopLayer
			})
		end
	elseif slot0.mHeroInfoList.nodeTypeId == 2 then
		if not slot0.cover then
			slot0.cover = ui.turnAction(slot0)
		end

		slot0.cover:startTurn(0.5, function ()
			slot0:socketRequest({
				methodName = "NoFightNodePass",
				moduleName = "QunxiaChapter",
				methodData = {
					slot0.mHeroInfoList.matchChapterModelId,
					slot0.mHeroInfoList.nodeId
				},
				successCallback = function (slot0)
					slot0.cover:endTurn(0.2)
					EventAuto:postEvent("eREFERRUILAYEREVENT")

					slot1 = nil

					slot0:addChild(require("guide.view.TalkLayer"):create({
						canSkip = true,
						map = slot0.mHeroInfoList.isScript,
						closedCB = function ()
							slot0:removeFromParent()
							LayerManager.addLayer({
								cleanUp = false,
								name = "renwuliezhuan.RwlzJiaoBenLayer",
								data = {
									mHeroInfoList = slot1.mHeroInfoList
								},
								zOrder = Enums.ZOrderType.ePopLayer
							})
							LayerManager.removeLayer({
								cleanUp = false,
								name = "renwuliezhuan.RwlzJiaoBenLayer",
								data = {
									mHeroInfoList = slot1.mHeroInfoList
								},
								zOrder = Enums.ZOrderType.ePopLayer
							})

							return 
						end
					}))

					return 
				end
			})

			return 
		end)
	end

	return 
end
slot0.onCloseBtnClick = function (slot0)
	LayerManager.removeLayer(slot0)

	return 
end
slot0.foundHeroOtherInfo = function (slot0, slot1)
	slot3 = {}

	for slot7, slot8 in pairs(slot2) do
		slot9 = {}

		if slot8.matchHeroModelId == slot1 then
			slot9.nodeId = slot8.nodeId
			slot9.matchChapterModelId = slot8.matchChapterModelId

			table.insert(slot3, slot9)
		end
	end

	table.sort(slot3, function (slot0, slot1)
		return slot0.nodeId < slot1.nodeId
	end)
	dump(slot3, "1122")

	return slot3
end
slot0.isOpenFirst = function (slot0, slot1)
	return slot0.QunxiaNodeDataList[slot1].NormalPass
end

return slot0
