slot0 = class("SectTaskSelectHeroLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false,
		color = cc.c4b(0, 0, 0, 120)
	})
end)
slot0.uiTree = {
	{
		name = "msgBox",
		cType = "MsgBoxBg",
		params = {
			image = "tc_1.png",
			posApt = 1,
			pos = {
				x = 568,
				y = 320
			},
			size = {
				width = 850,
				height = 540
			},
			titleText = TR("任务派遣")
		},
		children = {
			{
				name = "untitled3",
				cType = "Scale9Sprite",
				params = {
					image = "c_24.png",
					pos = {
						x = 425,
						y = 360
					},
					size = {
						width = 793,
						height = 289
					}
				},
				children = {
					{
						name = "mHeroGridView",
						cType = "GridView",
						params = {
							createColCb = "onCreateGridItem",
							itemNum = 1,
							selectIndex = 1,
							colCount = 7,
							celHeight = 100,
							pos = {
								x = 396.5,
								y = 179.5
							},
							size = {
								width = 770,
								height = 200
							}
						},
						children = {
							{
								name = "mHeroTemplate",
								cType = "TemplateNode",
								params = {
									pos = {
										x = 0,
										y = 0
									},
									size = {
										width = 110,
										height = 100
									}
								},
								children = {
									{
										name = "untitled9",
										cType = "CardNode",
										params = {
											scale = 1,
											childName = "card",
											allowClick = true,
											pos = {
												x = 55,
												y = 60
											}
										},
										children = {}
									},
									{
										name = "untitled11",
										cType = "Sprite",
										params = {
											image = "c_44.png",
											childName = "selectSprite",
											pos = {
												x = 55,
												y = 60
											}
										},
										children = {}
									}
								}
							}
						}
					},
					{
						name = "untitled6",
						cType = "Node",
						params = {
							pos = {
								x = 396.5,
								y = 41
							}
						},
						children = {
							{
								name = "untitled42",
								cType = "Scale9Sprite",
								params = {
									image = "zm_32.png",
									pos = {
										x = 0,
										y = 0
									},
									size = {
										width = 700,
										height = 74
									}
								},
								children = {}
							},
							{
								name = "untitled5",
								cType = "ProfessionTabView",
								params = {
									onSelectChange = "onProfessionClickAction",
									space = "5",
									lightedImage = "c_pure.png",
									direction = false,
									normalImage = "c_pure.png",
									btnSize = {
										width = 85,
										height = 75
									},
									imgOffset = {
										x = 0.5,
										y = 0.5
									},
									pos = {
										x = -275,
										y = -38.5
									},
									size = {
										width = 550,
										height = 85
									}
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "untitled13",
				cType = "Label",
				params = {
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 50,
						y = 190
					},
					text = TR("派遣侠客:")
				},
				children = {}
			},
			{
				name = "taskCostTimeLabel",
				cType = "Label",
				params = {
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 51.64,
						y = 50
					},
					text = TR("任务耗时:")
				},
				children = {}
			},
			{
				name = "untitled17",
				cType = "Button",
				params = {
					image = "c_19.png",
					clickAction = "onOneKeySelectClickAction",
					pos = {
						x = 725.78,
						y = 153.42
					},
					titleText = TR("一键选择")
				},
				children = {}
			},
			{
				name = "untitled18",
				cType = "Button",
				params = {
					image = "c_39.png",
					clickAction = "onSendClickAction",
					pos = {
						x = 725.78,
						y = 82.42
					},
					titleText = TR("派出")
				},
				children = {}
			},
			{
				name = "untitled15",
				cType = "Label",
				params = {
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 350,
						y = 190
					},
					text = TR("派遣条件:")
				},
				children = {}
			},
			{
				name = "con1",
				cType = "Node",
				params = {
					pos = {
						x = 350,
						y = 155
					}
				},
				children = {
					{
						name = "untitled21",
						cType = "Sprite",
						params = {
							image = "c_5.png",
							anchor = {
								x = 0,
								y = 0.5
							},
							pos = {
								x = 0,
								y = 0
							}
						},
						children = {}
					},
					{
						name = "untitled40",
						cType = "Label",
						params = {
							text = "X5",
							childName = "starNumLabel",
							anchor = {
								x = 0,
								y = 0.5
							},
							color = {
								g = 37,
								r = 37,
								b = 37
							},
							pos = {
								x = 28,
								y = 0
							}
						},
						children = {}
					},
					{
						name = "untitled38",
						cType = "Label",
						params = {
							text = "(0/0)",
							childName = "label",
							anchor = {
								x = 0,
								y = 0.5
							},
							color = {
								g = 65,
								r = 192,
								b = 65
							},
							pos = {
								x = 150,
								y = 0
							}
						},
						children = {}
					}
				}
			},
			{
				name = "con2",
				cType = "Node",
				params = {
					hide = true,
					pos = {
						x = 350,
						y = 105
					}
				},
				children = {
					{
						name = "untitled26",
						cType = "Sprite",
						params = {
							childName = "sp",
							scale = 0.5,
							image = "xkxx_74.png",
							anchor = {
								x = 0,
								y = 0.5
							},
							pos = {
								x = 0,
								y = 0
							}
						},
						children = {}
					},
					{
						name = "untitled39",
						cType = "Label",
						params = {
							text = "(0/0)",
							childName = "label",
							anchor = {
								x = 0,
								y = 0.5
							},
							color = {
								g = 65,
								r = 192,
								b = 65
							},
							pos = {
								x = 150,
								y = 0
							}
						},
						children = {}
					}
				}
			},
			{
				name = "con3",
				cType = "Node",
				params = {
					hide = true,
					pos = {
						x = 350,
						y = 55
					}
				},
				children = {
					{
						name = "untitled30",
						cType = "Sprite",
						params = {
							childName = "sp",
							scale = 0.5,
							image = "xkxx_74.png",
							anchor = {
								x = 0,
								y = 0.5
							},
							pos = {
								x = 0,
								y = 0
							}
						},
						children = {}
					},
					{
						name = "untitled32",
						cType = "Label",
						params = {
							text = "(0/0)",
							childName = "label",
							anchor = {
								x = 0,
								y = 0.5
							},
							color = {
								g = 65,
								r = 192,
								b = 65
							},
							pos = {
								x = 150,
								y = 0
							}
						},
						children = {}
					}
				}
			},
			{
				name = "mSelectedHeroNode",
				cType = "Node",
				params = {
					pos = {
						x = 50,
						y = 110
					}
				},
				children = {}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.taskInfo = slot1.taskInfo
	slot0.usedHeros = slot1.usedHeros
	slot0.completeCallBack = slot1.completeCallBack
	slot0.banHeroIdList = {}
	slot2 = string.split(slot0.usedHeros, ",")

	if slot0.usedHeros ~= "" then
		for slot6, slot7 in ipairs(slot2) do
			slot0.banHeroIdList[tonumber(slot7)] = true
		end
	end

	slot0.taskCfg = SectTaskRelation.items[slot0.taskInfo.TaskId]
	slot0.taskTypeCfg = SectTasktypeModel.items[slot0.taskCfg.taskType]
	slot3 = string.split(slot0.taskInfo.Professions, ",")
	slot0.professionList = {}

	if slot0.taskInfo.Professions ~= "" then
		for slot7, slot8 in ipairs(slot3) do
			table.insert(slot0.professionList, tonumber(slot8))
		end
	end

	slot0.showProfessionId = 0
	slot0.heroList = {}
	slot0.viewHeroIdxList = {}

	for slot7 = 0, 5, 1 do
		slot0.viewHeroIdxList[slot7] = {}
	end

	slot0.allSelcetHeroIdxList = {}

	slot0.super.ctor(slot0)
	slot0.initUI(slot0)
	slot0.refreshLayer(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0, function (slot0, slot1)
		if slot0.name == "msgBox" then
			slot1.titleText = slot0.taskCfg.name
		end

		return 
	end)

	slot5, slot2 = Utility.getColorValue(slot0.taskTypeCfg.typeColorLv, true)

	slot0.msgBox.titleLabel:setColor(slot1)

	return 
end
slot0.refreshLayer = function (slot0)
	slot0.initHeroData(slot0)
	slot0.initSelectedHero(slot0)
	slot0.initTaskConditions(slot0)

	return 
end
slot0.initHeroData = function (slot0)
	slot1 = {}
	slot2 = HeroObj:getList()

	for slot6, slot7 in pairs(HeroModel.items) do
		if not Utility.isHeroHide(slot6) and slot2[slot6] and not slot0._heroIsBan(slot0, slot6) then
			table.insert(slot1, {
				ModelId = slot6,
				camp = slot7.camp,
				quality = slot7.quality,
				profession = slot7.profession,
				star = slot8.Star,
				stepLv = slot8.StepLv,
				info = slot8
			})
		end
	end

	slot3(slot1)

	slot0.heroList = slot1

	for slot7, slot8 in ipairs(slot1) do
		table.insert(slot0.viewHeroIdxList[slot8.profession], slot7)
		table.insert(slot0.viewHeroIdxList[0], slot7)
	end

	return 
end
slot0.initSelectedHero = function (slot0)
	slot0.mSelectedHeroNode:removeAllChildren()

	slot1 = {}

	for slot5 = 1, slot0.taskTypeCfg.heroTypeNum, 1 do
		slot6 = slot0.createLayoutTemplateNode(slot0, "mHeroTemplate")

		slot6.selectSprite:setVisible(false)
		slot6.card:setCardData(nil, {
			Enums.CardShowAttr.eNum,
			Enums.CardShowAttr.eBorder,
			Enums.CardShowAttr.eStar,
			Enums.CardShowAttr.eLevel
		}, nil)
		slot6.card:setClickAction(function ()
			slot0:_heroCancelSelect(slot0)
			slot0._heroCancelSelect:refreshTaskConditions()

			return 
		end)
		slot6.setPosition(slot6, (slot5 - 1)*100 + -15, -50)
		slot0.mSelectedHeroNode:addChild(slot6)

		slot1[slot5] = slot6
	end

	slot0.selectedHeroList = slot1

	return 
end
slot1 = {
	"xkxx_75.png",
	"xkxx_74.png",
	"xkxx_76.png",
	"xkxx_77.png",
	"xkxx_78.png"
}
slot0.initTaskConditions = function (slot0)
	slot0.taskCostTimeLabel:setString(TR("任务耗时:%s", MqTime.formatAsHour(slot0.taskTypeCfg.costTime)))
	slot0.con1.starNumLabel:setString("X" .. slot0.taskTypeCfg.heroMinStar)

	if 1 <= #slot0.professionList then
		slot0.con2:setVisible(true)
		slot0.con2.sp:setTexture(slot0[slot0.professionList[1]])
	end

	if 2 <= #slot0.professionList then
		slot0.con3:setVisible(true)
		slot0.con3.sp:setTexture(slot0[slot0.professionList[2]])
	end

	slot0.refreshTaskConditions(slot0)

	return 
end
slot0.refreshTaskConditions = function (slot0)
	slot1 = {}

	for slot5, slot6 in pairs(slot0.allSelcetHeroIdxList) do
		table.insert(slot1, slot0.heroList[slot6])
	end

	slot0.con1.label:setString(TR("(%d/%d)", slot0._getHeroNumWithHighStars(slot0, slot1, slot0.taskTypeCfg.heroMinStar), slot0.taskTypeCfg.heroStarNum))
	slot0.con1.label:setColor((slot0.taskTypeCfg.heroStarNum <= slot0._getHeroNumWithHighStars(slot0, slot1, slot0.taskTypeCfg.heroMinStar) and cc.c3b(139, 168, 87)) or cc.c3b(192, 65, 65))

	if 1 <= #slot0.professionList then
		slot0.con2.label:setString(TR("(%d/%d)", slot0._getHeroNumWithProfession(slot0, slot1, slot0.professionList[1]), 1))
		slot0.con2.label:setColor((1 <= slot0._getHeroNumWithProfession(slot0, slot1, slot0.professionList[1]) and slot2) or slot3)
	end

	if 2 <= #slot0.professionList then
		slot0.con3.label:setString(TR("(%d/%d)", slot0._getHeroNumWithProfession(slot0, slot1, slot0.professionList[2]), 1))
		slot0.con3.label:setColor((1 <= slot0._getHeroNumWithProfession(slot0, slot1, slot0.professionList[2]) and slot2) or slot3)
	end

	return 
end
slot0._getHeroNumWithHighStars = function (slot0, slot1, slot2)
	slot3 = 0

	for slot7, slot8 in pairs(slot1) do
		if slot2 <= slot8.info.Star then
			slot3 = slot3 + 1
		end
	end

	return slot3
end
slot0._getHeroNumWithProfession = function (slot0, slot1, slot2)
	slot3 = 0

	for slot7, slot8 in pairs(slot1) do
		if slot8.profession == slot2 then
			slot3 = slot3 + 1
		end
	end

	return slot3
end
slot0._conditionApproach = function (slot0)
	slot1 = {}

	for slot5, slot6 in pairs(slot0.allSelcetHeroIdxList) do
		table.insert(slot1, slot0.heroList[slot6])
	end

	slot3 = slot0.taskTypeCfg.heroStarNum <= slot0._getHeroNumWithHighStars(slot0, slot1, slot0.taskTypeCfg.heroMinStar)
	slot4 = true

	if 1 <= #slot0.professionList then
		slot4 = 1 <= slot0._getHeroNumWithProfession(slot0, slot1, slot0.professionList[1])
		slot5 = true
	end

	if 2 <= #slot0.professionList then
		return (slot3 and slot4 and 1 <= slot0._getHeroNumWithProfession(slot0, slot1, slot0.professionList[2])) or false
	end
end
slot0._getGridIdxByHeroIdx = function (slot0, slot1)
	for slot5, slot6 in ipairs(slot0.viewHeroIdxList[slot0.showProfessionId]) do
		if slot1 == slot6 then
			return slot5
		end
	end

	return 
end
slot0._heroSelect = function (slot0, slot1, slot2)
	slot0.selectedHeroList[slot1].card:setCardData({
		modelId = slot0.heroList[slot2].ModelId
	}, {
		Enums.CardShowAttr.eNum,
		Enums.CardShowAttr.eBorder,
		Enums.CardShowAttr.eStar,
		Enums.CardShowAttr.eLevel
	}, slot0.heroList[slot2])

	slot0.allSelcetHeroIdxList[slot1] = slot2

	if slot0._getGridIdxByHeroIdx(slot0, slot2) then
		slot0.mHeroGridView:refreshCell(slot4)
	end

	return 
end
slot0._heroCancelSelect = function (slot0, slot1)
	slot0.selectedHeroList[slot1].card:setCardData(nil, {
		Enums.CardShowAttr.eNum,
		Enums.CardShowAttr.eBorder,
		Enums.CardShowAttr.eStar,
		Enums.CardShowAttr.eLevel
	}, nil)

	slot0.allSelcetHeroIdxList[slot1] = nil

	if slot0._getGridIdxByHeroIdx(slot0, slot0.allSelcetHeroIdxList[slot1]) then
		slot0.mHeroGridView:refreshCell(slot3)
	end

	return 
end
slot0._allHeroCancelSelect = function (slot0)
	for slot4 = 1, slot0.taskTypeCfg.heroTypeNum, 1 do
		slot0._heroCancelSelect(slot0, slot4)
	end

	return 
end
slot0._heroIsBan = function (slot0, slot1)
	return slot0.banHeroIdList[slot1]
end
slot0.onProfessionClickAction = function (slot0, slot1)
	dump(slot1, "选择阵营")

	slot0.showProfessionId = slot1

	slot0.mHeroGridView:setItemNum(#slot0.viewHeroIdxList[slot0.showProfessionId])
	slot0.mHeroGridView:jumpToTop()
	dump(#slot0.viewHeroIdxList[slot0.showProfessionId], "数量")

	return 
end
slot0.onSendClickAction = function (slot0)
	if not slot0._conditionApproach(slot0) then
		ui.showFlashView(TR("侠客不满足派出条件。"))

		return 
	end

	slot1 = {}

	for slot5 = 1, slot0.taskTypeCfg.heroTypeNum, 1 do
		if slot0.allSelcetHeroIdxList[slot5] then
			table.insert(slot1, slot0.heroList[slot0.allSelcetHeroIdxList[slot5]].ModelId)
		end
	end

	slot0.completeCallBack(slot0, slot1)

	return 
end
slot0.onOneKeySelectClickAction = function (slot0)
	slot0._allHeroCancelSelect(slot0)

	slot1 = {}

	function slot2(slot0, slot1)
		for slot6, slot7 in ipairs(slot2) do
			if slot0.heroList[slot7].star < slot1 then
				return 
			end

			if not slot1[slot7] then
				slot1[slot7] = true

				return slot7
			end
		end

		return 
	end

	slot3 = 1

	for slot7, slot8 in ipairs(slot0.professionList) do
		if slot2(slot8, 0) then
			slot0._heroSelect(slot0, slot3, slot9)

			slot3 = slot3 + 1
		else
			slot0.refreshTaskConditions(slot0)
			ui.showFlashView(TR("无法满足任务条件"))

			return 
		end
	end

	if slot0._conditionApproach(slot0) then
		slot0.refreshTaskConditions(slot0)

		return 
	end

	while slot3 <= slot0.taskTypeCfg.heroTypeNum do
		if not slot2(0, slot0.taskTypeCfg.heroMinStar) then
			break
		end

		slot0._heroSelect(slot0, slot3, slot4)

		if slot0._conditionApproach(slot0) then
			break
		end

		slot3 = slot3 + 1
	end

	slot0.refreshTaskConditions(slot0)

	if not slot0._conditionApproach(slot0) then
		ui.showFlashView(TR("无法满足任务条件"))
	end

	return 
end
slot0.onCreateGridItem = function (slot0, slot1, slot2)
	if next(slot0.heroList[slot0.viewHeroIdxList[slot0.showProfessionId][slot2]]) == nil then
		slot1.removeAllChildren(slot1)

		return 
	end

	slot6 = slot0.createLayoutTemplateNode(slot0, "mHeroTemplate")

	slot6.card:setCardData({
		modelId = slot5.ModelId
	}, {
		Enums.CardShowAttr.eNum,
		Enums.CardShowAttr.eBorder,
		Enums.CardShowAttr.eStar,
		Enums.CardShowAttr.eLevel
	}, slot5.info)
	slot6.card:setClickAction(function ()
		for slot4 = slot0.taskTypeCfg.heroTypeNum, 1, -1 do
			if slot0.allSelcetHeroIdxList[slot4] == nil then
				slot0 = slot4
			end

			if slot0.allSelcetHeroIdxList[slot4] == slot1 then
				slot0:_heroCancelSelect(slot4)
				slot0:refreshTaskConditions()

				return 
			end
		end

		if slot0 then
			slot0:_heroSelect(slot0, slot0._heroSelect)
			slot0:refreshTaskConditions()
		else
			ui.showFlashView(TR("最多只能派遣%d位侠客。", slot0.taskTypeCfg.heroTypeNum))
		end

		return 
	end)
	slot6.selectSprite:setVisible(false)

	for slot10 = slot0.taskTypeCfg.heroTypeNum, 1, -1 do
		if slot0.allSelcetHeroIdxList[slot10] == slot4 then
			slot6.selectSprite:setVisible(true)
		end
	end

	slot1.addChild(slot1, slot6)

	return 
end

return slot0
