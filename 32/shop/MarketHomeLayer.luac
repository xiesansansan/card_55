slot0 = class("MarketHomeLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "FileLayer",
		params = {
			onlyEditer = true,
			file = "shop/ShopLayer.lua"
		},
		children = {}
	},
	{
		name = "untitled24",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {
			{
				name = "mGridView",
				cType = "GridView",
				params = {
					createColCb = "onGridAction",
					itemNum = 1,
					selectIndex = 1,
					colCount = 4,
					celHeight = 246,
					pos = {
						x = 104.69,
						y = 17.53
					},
					size = {
						width = 768.07,
						height = 467.82
					}
				},
				children = {
					{
						name = "mTemplateGrid",
						cType = "TemplateNode",
						custom = {
							{
								value = "untitled23-goodId",
								name = "goodId",
								type = "string"
							},
							{
								value = "untitled20-initParams",
								name = "cardParams",
								type = "string"
							},
							{
								value = "untitled21-text",
								name = "nameText",
								type = "string"
							},
							{
								value = "untitled22-modelId",
								name = "costResId",
								type = "string"
							}
						},
						params = {
							sizeApt = 3,
							pos = {
								x = 138.83,
								y = 297.09
							}
						},
						children = {
							{
								name = "untitled29",
								cType = "Sprite",
								params = {
									image = "sc_26.png",
									pos = {
										x = 0.4,
										y = 106.43
									}
								},
								children = {}
							},
							{
								name = "untitled16",
								cType = "Sprite",
								params = {
									image = "sc_27.png",
									pos = {
										x = 0.2,
										y = -6.87
									}
								},
								children = {}
							},
							{
								name = "untitled20",
								cType = "CardNode",
								params = {
									allowClick = true,
									initParams = {},
									pos = {
										x = 1,
										y = 19.48
									}
								},
								children = {}
							},
							{
								name = "untitled21",
								cType = "Label",
								params = {
									fontSize = 20,
									childName = "nameLabel",
									text = "Label",
									color = {
										g = 255,
										r = 255,
										b = 255
									},
									pos = {
										x = 1,
										y = 91.33
									}
								},
								children = {}
							},
							{
								name = "untitled22",
								cType = "ResLabel",
								params = {
									fontSize = 20,
									num = 0,
									modelId = 1111,
									childName = "priceLabel",
									color = {
										g = 37,
										r = 37,
										b = 37
									},
									pos = {
										x = -42.71,
										y = -49.57
									}
								},
								children = {}
							},
							{
								name = "untitled23",
								cType = "Button",
								custom = {
									{
										value = 1,
										name = "goodId",
										type = "integer"
									}
								},
								params = {
									childName = "btn",
									image = "c_32.png",
									scale = 0.8,
									clickAction = "onBuyAction",
									pos = {
										x = 1,
										y = -84.05
									},
									titleText = TR("购 买")
								},
								children = {}
							}
						}
					}
				}
			}
		}
	},
	{
		name = "untitled28",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 568,
				y = 0
			}
		},
		children = {
			{
				name = "untitled17",
				cType = "Button",
				params = {
					image = "sc_19.png",
					clickAction = "onRefreshAction",
					pos = {
						x = 501.48,
						y = 82.14
					}
				},
				children = {}
			},
			{
				name = "refreshPriceLabel",
				cType = "Label",
				params = {
					fontSize = 20,
					emptyInit = false,
					hide = true,
					text = "Label",
					isRichText = true,
					color = {
						g = 255,
						r = 255,
						b = 255
					},
					pos = {
						x = 502.13,
						y = 23.88
					}
				},
				children = {}
			},
			{
				name = "refreshCountLabel",
				cType = "Label",
				params = {
					fontSize = 20,
					emptyInit = true,
					text = "Label",
					isRichText = true,
					anchor = {
						x = 1,
						y = 0.5
					},
					color = {
						g = 255,
						r = 255,
						b = 255
					},
					pos = {
						x = 374.67,
						y = 42.29
					}
				},
				children = {}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.super.ctor(slot0)
	slot0.initUI(slot0)
	slot0.requestGetInfo(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)

	slot0.mBuyInfo = {}
	slot0.mDataList = {}

	if RedDotObj:isValid(ModuleSub.eMarketNormal) then
		RedDotObj:seeRedDot("Market", "1101")
	end

	return 
end
slot0.refreshUI = function (slot0)
	slot0.mDataList = {}

	for slot4, slot5 in ipairs(string.split(slot0.mBuyInfo.SellGoodsIdStr, ",")) do
		clone(MarketRelation.items[tonumber(string.split(slot5, "|")[2])]).slotId = tonumber(string.split(slot5, "|")[1])

		table.insert(slot0.mDataList, clone(MarketRelation.items[tonumber(string.split(slot5, "|")[2])]))
	end

	table.sort(slot0.mDataList, function (slot0, slot1)
		return slot0.slotId < slot1.slotId
	end)
	slot0.mGridView:setItemNum(#slot0.mDataList)
	slot0.refreshPriceLabel:setVisible(slot0.mBuyInfo.FreeRefreshCount <= 0)

	if 0 < slot0.mBuyInfo.FreeRefreshCount then
		slot0.refreshCountLabel:setString(TR("免费次数: %s%s", "#258711", slot0.mBuyInfo.FreeRefreshCount))
	else
		slot0.refreshModel = MarketRefreshneedConfig.items[slot0.mBuyInfo.RefreshCount + 1]

		if slot0.refreshModel == nil then
			slot0.refreshModel = MarketRefreshneedConfig.items[MarketRefreshneedConfig.items_count]
		end

		slot0.refreshPriceLabel:setString(string.format("{%s}%s%s", Resource.getDaibiImg(Utility.analysisStrResList(slot0.refreshModel.refreshNeed)[1].resourceId), (Utility.analysisStrResList(slot0.refreshModel.refreshNeed)[1].num <= Resource.getCount(Utility.analysisStrResList(slot0.refreshModel.refreshNeed)[1].resourceId) and "#258711") or "#EA2C00", slot1.num))
		slot0.createTimeUpdate(slot0)
	end

	return 
end
slot0.onGridAction = function (slot0, slot1, slot2)
	if slot0.mDataList[slot2] == nil then
		return 
	end

	slot6 = Resource.getCount(Utility.analysisStrResList(slot3.buyNeed)[1].resourceId)
	slot7, slot8 = Utility.getColorValue(Resource.getColorLv(Utility.analysisStrResList(slot3.sellStr)[1].resourceId))
	slot9 = {
		Enums.CardShowAttr.eNum
	}

	if Utility.isMaterialCanRecommend(Utility.analysisStrResList(slot3.sellStr)[1].resourceId, true) == true then
		table.insert(slot9, Enums.CardShowAttr.eRecommend)
	end

	slot0.createLayoutTemplateNode(slot0, "mTemplateGrid", {
		goodId = slot3.sellNum,
		cardParams = {
			cardInfo = {
				modelId = slot4.resourceId,
				num = slot4.num
			},
			showAttrs = slot9
		},
		nameText = Resource.getName(slot4.resourceId),
		costResId = slot5.resourceId
	}).nameLabel:setColor(slot7)
	slot0.createLayoutTemplateNode(slot0, "mTemplateGrid", {
		goodId = slot3.sellNum,
		cardParams = {
			cardInfo = {
				modelId = slot4.resourceId,
				num = slot4.num
			},
			showAttrs = slot9
		},
		nameText = Resource.getName(slot4.resourceId),
		costResId = slot5.resourceId
	}).priceLabel:setString(slot5.num, (slot5.num <= slot6 and cc.c3b(37, 135, 17)) or cc.c3b(234, 44, 0))
	slot10.setPosition(slot10, slot1.getContentSize(slot1).width/2, slot1.getContentSize(slot1).height/2)
	slot1.addChild(slot1, slot10)

	slot11 = false

	for slot15, slot16 in ipairs(string.split(slot0.mBuyInfo.BuyGoodsIdStr, ",")) do
		if tonumber(string.split(slot16, "|")[1]) == slot3.slotId then
			slot11 = true

			break
		end
	end

	slot10.btn:setEnabled(not slot11)

	slot10.btn.slotId = slot3.slotId
	slot3.needResourceId = slot5.resourceId
	slot3.needNum = slot5.num

	return 
end
slot0.onRefreshAction = function (slot0, slot1)
	if 0 < slot0.mBuyInfo.FreeRefreshCount then
		slot0.requestRefresh(slot0, 0)
	else
		if slot0.refreshModel == nil then
			return 
		end

		if Resource.isEnough(Utility.analysisStrResList(slot0.refreshModel.refreshNeed)[1].resourceId, Utility.analysisStrResList(slot0.refreshModel.refreshNeed)[1].num) == false then
			return 
		end

		slot0.requestRefresh(slot0, slot0.mBuyInfo.RefreshCount + 1)
	end

	return 
end
slot0.onBuyAction = function (slot0, slot1)
	slot2 = nil

	for slot6, slot7 in ipairs(slot0.mDataList) do
		if slot7.sellNum == slot1.goodId then
			slot2 = clone(slot7)

			break
		end
	end

	if slot2 == nil then
		return 
	end

	if Resource.isEnough(slot2.needResourceId, slot2.needNum) == false then
		return 
	end

	slot0.requestBuy(slot0, slot1.slotId, slot1.goodId)

	return 
end
slot0.createTimeUpdate = function (slot0)
	if slot0.refreshCountLabel.timeUpdate then
		slot0.refreshCountLabel:stopAction(slot0.refreshCountLabel.timeUpdate)

		slot0.refreshCountLabel.timeUpdate = nil
	end

	slot0.refreshCountLabel.timeUpdate = Utility.schedule(slot0.refreshCountLabel, function ()
		if 0 < slot0.mBuyInfo.LastRefreshTime - Player:getCurrentTime() + 1 then
			slot0.refreshCountLabel:setString(TR("还有#258711%s#FFFFFF重置免费刷新次数", MqTime.completeFormat(slot0)))
		else
			slot0.refreshCountLabel:stopAction(slot0.refreshCountLabel.timeUpdate)

			slot0.refreshCountLabel.timeUpdate = nil

			slot0:requestGetInfo()
		end

		return 
	end, 1)

	return 
end
slot0.requestGetInfo = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "GetInfo",
		moduleName = "Market",
		methodData = {},
		successCallback = function (slot0)
			dump(slot0)

			slot0.mBuyInfo = slot0

			slot0:refreshUI()

			return 
		end
	})

	return 
end
slot0.requestRefresh = function (slot0, slot1)
	slot0.socketRequest(slot0, {
		methodName = "Refresh",
		moduleName = "Market",
		methodData = {
			slot1
		},
		successCallback = function (slot0)
			slot0.mBuyInfo = slot0

			slot0:refreshUI()

			return 
		end
	})

	return 
end
slot0.requestBuy = function (slot0, slot1, slot2)
	slot0.socketRequest(slot0, {
		methodName = "Buy",
		moduleName = "Market",
		methodData = {
			slot1,
			slot2
		},
		successCallback = function (slot0)
			slot0.mBuyInfo = slot0.MarketInfo

			for slot4, slot5 in ipairs(slot0.mDataList) do
				slot0.mGridView:refreshCell(slot4)
			end

			ui.showFlashView(TR("购买成功"))

			return 
		end
	})

	return 
end

return slot0
