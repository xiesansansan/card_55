slot0 = class("DlgWuXueIntensifyLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = true,
		color = cc.c4b(0, 0, 0, 64)
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "MsgBoxBg",
		params = {
			closeAction = "onBtnBackClickAction",
			posApt = 1,
			image = "tc_2.png",
			pos = {
				x = 568,
				y = 320
			},
			size = {
				width = 600,
				height = 505
			},
			titleText = TR("武学强化")
		},
		children = {
			{
				name = "untitled3",
				cType = "Scale9Sprite",
				params = {
					image = "c_94.png",
					pos = {
						x = 299.47,
						y = 377.34
					},
					size = {
						width = 534.74,
						height = 180
					}
				},
				children = {}
			},
			{
				name = "mMaskBtn",
				cType = "Button",
				params = {
					zOrder = 20,
					hide = true,
					pressedAction = false,
					image = "c_pure.png",
					pos = {
						x = 300,
						y = 156.47
					},
					size = {
						width = 570,
						height = 130
					}
				},
				children = {}
			},
			{
				name = "mCardNode",
				cType = "CardNode",
				params = {
					allowClick = false,
					pos = {
						x = 99.06,
						y = 384.62
					}
				},
				children = {}
			},
			{
				name = "mWuxueName",
				cType = "Label",
				params = {
					fontSize = 28,
					isRichText = true,
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 125,
						r = 203,
						b = 69
					},
					pos = {
						x = 163.56,
						y = 431.38
					},
					text = TR("武学名称")
				},
				children = {}
			},
			{
				name = "mCurLvLabel",
				cType = "Label",
				params = {
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 162.68,
						y = 382.96
					},
					text = TR("强化等级：0级")
				},
				children = {}
			},
			{
				name = "mArrowSprite",
				cType = "Sprite",
				params = {
					image = "c_23.png",
					pos = {
						x = 357.42,
						y = 382.96
					}
				},
				children = {}
			},
			{
				name = "mTarLvLabel",
				cType = "Label",
				params = {
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 398.87,
						y = 382.96
					},
					text = TR("1级")
				},
				children = {}
			},
			{
				name = "mLvUpBtn",
				cType = "Button",
				params = {
					clickAction = "onWuxueLvup",
					image = "c_39.png",
					pos = {
						x = 298.43,
						y = 62.68
					},
					size = {
						width = 115,
						height = 46
					},
					titleText = TR("确 定")
				},
				children = {}
			},
			{
				name = "mAttrList",
				cType = "ListView",
				params = {
					direction = true,
					pos = {
						x = 164.62,
						y = 304.96
					},
					size = {
						width = 400,
						height = 60
					}
				},
				children = {
					{
						name = "attLayout",
						cType = "Layout",
						custom = {
							{
								value = "untitled102-text",
								name = "curAttrStr",
								type = "string"
							},
							{
								value = "untitled104-text",
								name = "tarAttrStr",
								type = "string"
							}
						},
						params = {
							size = {
								width = 400,
								height = 30
							}
						},
						children = {
							{
								name = "untitled102",
								cType = "Label",
								params = {
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 37,
										r = 37,
										b = 37
									},
									pos = {
										x = 0,
										y = 15
									},
									text = TR("暴击率：3%")
								},
								children = {}
							},
							{
								name = "untitled103",
								cType = "Sprite",
								params = {
									image = "c_23.png",
									pos = {
										x = 191.76,
										y = 15
									}
								},
								children = {}
							},
							{
								name = "untitled104",
								cType = "Label",
								params = {
									text = "4%",
									childName = "nextLabel",
									anchor = {
										x = 0,
										y = 0.5
									},
									color = {
										g = 37,
										r = 37,
										b = 37
									},
									pos = {
										x = 234.67,
										y = 15
									}
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "mExpListView",
				cType = "ListView",
				params = {
					direction = false,
					pos = {
						x = 48.57,
						y = 97.23
					},
					size = {
						width = 500,
						height = 110
					}
				},
				children = {
					{
						name = "mWuxueItem",
						cType = "Layout",
						params = {
							size = {
								width = 100,
								height = 110
							}
						},
						children = {
							{
								name = "untitled106",
								cType = "CardNode",
								params = {
									clickAction = "onWuxueItemChangedStatus",
									childName = "cardNode",
									allowClick = true,
									pos = {
										x = 50,
										y = 60
									}
								},
								children = {}
							},
							{
								name = "untitled89",
								cType = "Checkbox",
								params = {
									isSelect = false,
									childName = "checkbox",
									selectImage = "c_44.png",
									normalImage = "c_pure.png",
									pos = {
										x = 50,
										y = 60
									}
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "proBarBg",
				cType = "Scale9Sprite",
				params = {
					image = "jyt_5.png",
					pos = {
						x = 300.77,
						y = 253.8
					}
				},
				children = {
					{
						name = "untitled91",
						cType = "ProgressBar",
						params = {
							normalImage = "jyt_8.png",
							childName = "seleceExpProBar",
							pos = {
								x = 178.1,
								y = 7
							}
						},
						children = {}
					},
					{
						name = "untitled92",
						cType = "ProgressBar",
						params = {
							normalImage = "jyt_7.png",
							childName = "proBar",
							pos = {
								x = 178.1,
								y = 7
							}
						},
						children = {}
					},
					{
						name = "untitled93",
						cType = "Label",
						params = {
							childName = "proLabel",
							color = {
								g = 49,
								r = 49,
								b = 49
							},
							pos = {
								x = 177.15,
								y = -13.85
							},
							text = TR("强化经验：15/30")
						},
						children = {}
					}
				}
			},
			{
				name = "mNoTips",
				cType = "Label",
				params = {
					fontSize = 26,
					hide = true,
					color = {
						g = 37,
						r = 37,
						b = 37
					},
					pos = {
						x = 300.1,
						y = 160.18
					},
					text = TR("没有可用的升级材料")
				},
				children = {}
			},
			{
				name = "mArrowLeft",
				cType = "Sprite",
				params = {
					image = "c_4.png",
					hide = true,
					scale = 0.8,
					pos = {
						x = 43.75,
						y = 166.09
					}
				},
				children = {}
			},
			{
				name = "mArrowRight",
				cType = "Sprite",
				params = {
					hide = true,
					scale = 0.8,
					rotationAngle = 180,
					image = "c_4.png",
					pos = {
						x = 560,
						y = 166.09
					}
				},
				children = {}
			},
			{
				name = "mExpListViewTest",
				cType = "TableView",
				params = {
					numOfCellsFunc = "cbNumOfCellsFunc",
					isVertical = false,
					cellUpdateFunc = "cbCellUpdateFunc",
					cellSizeFunc = "cbCellSizeFunc",
					cellFillFunc = "cbCellFillFunc",
					pos = {
						x = 51.35,
						y = 105
					},
					size = {
						width = 500,
						height = 110
					}
				},
				children = {
					{
						name = "mWuxueItemTest",
						cType = "TemplateNode",
						params = {
							pos = {
								x = 7.65,
								y = -118.31
							},
							size = {
								width = 100,
								height = 110
							}
						},
						children = {
							{
								name = "untitled88",
								cType = "CardNode",
								params = {
									clickAction = "onWuxueItemChangedStatus",
									childName = "cardNode",
									allowClick = true,
									pos = {
										x = 50,
										y = 60
									}
								},
								children = {}
							},
							{
								name = "untitled107",
								cType = "Checkbox",
								params = {
									isSelect = false,
									childName = "checkbox",
									selectImage = "c_44.png",
									normalImage = "c_pure.png",
									pos = {
										x = 50,
										y = 60
									}
								},
								children = {}
							},
							{
								name = "untitled108",
								cType = "Label",
								params = {
									fontSize = 20,
									hide = true,
									text = "Label",
									childName = "LvLabel",
									color = {
										g = 255,
										r = 55,
										b = 64
									},
									outlineColor = {
										g = 37,
										r = 37,
										b = 37
									},
									pos = {
										x = 50,
										y = 35
									}
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "mTipsCheckbox",
				cType = "Checkbox",
				params = {
					normalImage = "c_43.png",
					selectImage = "c_44.png",
					callback = "onCheckCallBack",
					pos = {
						x = 437.56,
						y = 63.17
					}
				},
				children = {
					{
						name = "untitled110",
						cType = "Label",
						params = {
							color = {
								g = 37,
								r = 37,
								b = 37
							},
							pos = {
								x = 82.07,
								y = 14.03
							},
							text = TR("一键选择")
						},
						children = {}
					}
				}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.mSelectWuXueList = {}
	slot0.mSelectGoodList = {}
	slot0.mInfo = slot1.info
	slot0.callback = slot1.callback
	slot0.mIsFrist = true

	slot0.super.ctor(slot0)
	slot0.initUI(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)
	slot0.refreshFixedUI(slot0)
	slot0.refreshUI(slot0)

	return 
end
slot0.parseCurWuxueData = function (slot0)
	slot1 = slot0.canLvUpManyByExp(slot0, slot0.mInfo.Exp)
	slot0.mCurLv = slot1.canLvUp
	slot0.mCurBarValue = slot1.barCurValue
	slot0.mMaxBarValue = slot1.barMaxValue
	slot0.mOverflow = slot1.isOverFlow

	return 
end
slot0.refreshFixedUI = function (slot0)
	slot2, slot8 = Utility.getColorValue(WuxueModel.items[slot0.mInfo.ModelId].colorLv)

	slot0.mWuxueName:setString(string.format("%s%s", slot3, WuxueModel.items[slot0.mInfo.ModelId].name))
	slot0.mCardNode:setCardData({
		resourceId = slot0.mInfo.ModelId
	}, {
		Enums.CardShowAttr.eBorder
	})

	if slot0.mCardNode.mHeaderSprite then
		slot0.mCardNode.mHeaderSprite:setScale(0.9)
	end

	return 
end
slot0.refreshUI = function (slot0)
	slot0.parseCurWuxueData(slot0)
	slot0.mAttrList:removeAllChildren()

	slot1 = slot0.mCurLv
	slot4 = slot0.getBaseAttrStrList(slot0, slot0.mInfo.ModelId, (slot0.mOverflow and slot0.mCurLv) or slot0.mCurLv + 1)

	for slot8, slot9 in ipairs(slot3) do
		slot0.mAttrList:pushBackCustomItem(slot0.createLayoutTemplateNode(slot0, "attLayout", {
			curAttrStr = slot9.keyName .. ":" .. slot9.valueStr,
			tarAttrStr = (slot4[slot8] and slot4[slot8].valueStr) or TR("未获取到对应值")
		}))
	end

	slot0.refreshRefineData(slot0)
	slot0.mNoTips:setVisible(#slot0.mRefineList <= 0)
	slot0.proBarBg.proBar:setMaxValue(slot0.mMaxBarValue)
	slot0.proBarBg.proBar:setCurrValue(slot0.mCurBarValue)
	slot0.proBarBg.seleceExpProBar:stopAllActions()
	slot0.proBarBg.seleceExpProBar:setVisible(false)
	slot0.mTarLvLabel:stopAllActions()
	slot0.mTarLvLabel:setOpacity(255)
	slot0.mCurLvLabel:setString(TR("强化等级:%d级", slot0.mCurLv))

	if not slot0.mOverflow then
		slot0.proBarBg.proLabel:setString(TR("强化经验:%d%s/%d", slot0.mCurBarValue, "", slot0.mMaxBarValue))
		slot0.mTarLvLabel:setString(TR("%d级", slot0.mCurLv + 1))
		slot0.mLvUpBtn:setEnabled(true)
	else
		slot0.proBarBg.proLabel:setString(TR("已满级"))
		slot0.mTarLvLabel:setString(TR("%d(满级)", slot0.mCurLv))
		slot0.mLvUpBtn:setEnabled(false)
	end

	if slot0.mIsFrist then
		slot0.refreshArrow(slot0, 0)

		slot0.mIsFrist = false
	end

	slot0.mExpListViewTest:reloadData()

	return 
end
slot0.refreshArrow = function (slot0, slot1)
	if #slot0.mRefineList <= 5 then
		slot0.mArrowLeft:setVisible(false)
		slot0.mArrowRight:setVisible(false)
	else
		if slot0.mExpListViewTest:getCurrPercentage() <= 0 then
			slot0.mArrowLeft:setVisible(false)
		else
			slot0.mArrowLeft:setVisible(true)
		end

		if 100 <= slot0.mExpListViewTest:getCurrPercentage() then
			slot0.mArrowRight:setVisible(false)
		else
			slot0.mArrowRight:setVisible(true)
		end
	end

	return 
end
slot0.cbCellSizeFunc = function (slot0, slot1, slot2)
	return 100, 110
end
slot0.cbNumOfCellsFunc = function (slot0, slot1)
	return #slot0.mRefineList
end
slot0.cbCellFillFunc = function (slot0, slot1, slot2)
	slot3 = slot0.createLayoutTemplateNode(slot0, "mWuxueItemTest")

	slot3.setPosition(slot3, cc.p(0, 0))

	slot4 = clone(slot0.mRefineList[slot2 + 1])
	slot3.index = slot2 + 1

	slot3.checkbox:setScale(1.3)
	slot3.checkbox:setSwallowTouches(false)

	slot1.wuxueLayout = slot3

	slot1.addChild(slot1, slot3)

	slot1.refreshCell = function (slot0)
		clone(slot0.mRefineList[slot0 + 1]).tableIndex = slot0 + 1

		if clone(slot0.mRefineList[slot0 + 1]).ExpType == 1 then
			slot1.cardNode.wuxueInfo = slot1

			slot1.cardNode:setCardData({
				modelId = slot1.ModelId
			}, {
				Enums.CardShowAttr.eName
			})
			slot1.checkbox:setSelected((slot0.mSelectWuXueList[slot1.EntityId] and true) or false)

			if 0 < slot1.Lv then
				slot1.LvLabel:setVisible(true)
				slot1.LvLabel:setString(string.format("+%s", slot1.Lv))
			else
				slot1.LvLabel:setVisible(false)
			end
		else
			slot1.cardNode.wuxueInfo = slot1

			slot1.cardNode:setCardData({
				modelId = slot1.modelId
			}, {
				Enums.CardShowAttr.eName
			})
			slot1.checkbox:setSelected((slot0.mSelectGoodList[tostring(slot1.tableIndex)] and true) or false)
			slot1.LvLabel:setVisible(false)
		end

		return 
	end

	slot1.refreshCell(slot2)

	return 
end
slot0.cbCellUpdateFunc = function (slot0, slot1, slot2)
	slot1.refreshCell(slot2)
	slot0.refreshArrow(slot0, slot2)

	return 
end
slot0.getBaseAttrStrList = function (slot0, slot1, slot2)
	slot6 = nil
	slot6 = (slot2 ~= 0 or 0) and WuxueLvupConfig.items[slot2][WuxueModel.items[slot1].partId][WuxueModel.items[slot1].quality].addBaseAttrStrR

	function slot8(slot0)
		slot1 = {}
		slot4 = string.format("%s", slot3)

		if Utility.isAttrNeedPercent(slot0.fightattr) then
			slot4 = string.format("%s%%", slot3/100)
		end

		slot1.keyName = FightAttrTypeName[slot2]
		slot1.valueStr = slot4

		return slot1
	end

	slot9 = {}

	for slot13, slot14 in ipairs(slot7) do
		table.insert(slot9, clone(slot8(slot14)))
	end

	return slot9
end
slot0.calculateCanLvUpMuch = function (slot0)
	slot1 = 0

	for slot5, slot6 in pairs(slot0.mSelectWuXueList) do
		slot1 = slot1 + slot0.calculateWuXueExp(slot0, slot6)
	end

	for slot5, slot6 in pairs(slot0.mSelectGoodList) do
		slot1 = slot1 + slot6.addExp
	end

	return slot1
end
slot0.getlvUpOneLvGoods = function (slot0)
	slot3 = WuxueModel.items[slot0.mInfo.ModelId].partId
	slot4 = WuxueModel.items[slot0.mInfo.ModelId].quality

	if not WuxueLvupConfig.items[slot0.mInfo.Lv + 1] then
		ui.showFlashView("已满级无法一键选择")
		slot0.mTipsCheckbox:setSelected(false)

		return 
	end

	slot6 = {}

	for slot10, slot11 in ipairs(slot0.mRefineList) do
		if slot11.ExpType == 2 then
			clone(slot11).rIndex = slot10

			table.insert(slot6, clone(slot11))
		end
	end

	table.sort(slot6, function (slot0, slot1)
		if slot0.addExp ~= slot1.addExp then
			return slot0.addExp < slot1.addExp
		end

		return slot1.rIndex < slot0.rIndex
	end)

	slot7 = 0

	for slot11, slot12 in ipairs(WuxueLvupConfig.items) do
		if slot12[slot3][slot4] then
			slot7 = slot7 + 1
		end
	end

	slot10 = WuxueLvupConfig.items[slot7][slot3][slot4].lvUpNeedTotal - slot0.mInfo.Exp
	slot11 = 0
	slot12 = #slot0.mRefineList

	for slot16, slot17 in ipairs(slot6) do
		slot11 = slot11 + slot17.addExp
		slot0.mSelectGoodList[tostring(slot18)] = clone(slot17)

		if slot0.mExpListViewTest:cellAtIndex(slot17.rIndex - 1) then
			slot19.wuxueLayout.checkbox:setSelected(true)
		end

		if slot18 < slot12 then
			slot12 = slot18
		end

		if slot10 <= slot11 then
			break
		end
	end

	if next(slot0.mSelectGoodList) == nil then
		ui.showFlashView("没有符合一键选择的升级材料")
		slot0.mTipsCheckbox:setSelected(false)

		return 
	end

	slot0.mExpListViewTest:jumpToCell(slot12)

	slot14 = slot0.canLvUpManyByExp(slot0, slot0.mInfo.Exp + slot0.calculateCanLvUpMuch(slot0))

	slot0.proBarBg.seleceExpProBar:stopAllActions()
	slot0.proBarBg.seleceExpProBar:setVisible(true)
	slot0.proBarBg.seleceExpProBar:setMaxValue(slot14.barMaxValue)
	slot0.proBarBg.seleceExpProBar:setCurrValue(slot14.barCurValue)
	slot0.proBarBg.seleceExpProBar:runAction(cc.RepeatForever:create(slot15))
	slot0.proBarBg.proLabel:setString(TR("强化经验:%d+%d/%d", slot0.mCurBarValue, slot0.calculateCanLvUpMuch(slot0), slot0.mMaxBarValue))

	if not slot14.isOverFlow then
		slot0.mTarLvLabel:setString(TR("%d级", slot14.canLvUp))
	else
		slot0.mTarLvLabel:setString(TR("%d级(满级）", slot14.canLvUp))
	end

	slot0.mTarLvLabel:stopAllActions()
	slot0.mTarLvLabel:setOpacity(255)

	if slot0.mCurLv < slot14.canLvUp then
		slot0.mTarLvLabel:runAction(cc.RepeatForever:create(cc.Sequence:create(cc.FadeOut:create(1.2), cc.FadeIn:create(0.6))))
		slot0.proBarBg.seleceExpProBar:setMaxValue(1)
		slot0.proBarBg.seleceExpProBar:setCurrValue(1)
	end

	slot0.mAttrList:removeAllChildren()

	slot19 = slot0.getBaseAttrStrList(slot0, slot0.mInfo.ModelId, slot17)

	for slot23, slot24 in ipairs(slot18) do
		slot27 = slot0.createLayoutTemplateNode(slot0, "attLayout", {
			curAttrStr = slot24.keyName .. ":" .. slot24.valueStr,
			tarAttrStr = (slot19[slot23] and slot19[slot23].valueStr) or TR("未获取到对应值")
		})

		if slot0.mCurLv < slot14.canLvUp then
			slot27.nextLabel:runAction(cc.RepeatForever:create(cc.Sequence:create(cc.FadeOut:create(1.2), cc.FadeIn:create(0.6))))
		end

		slot0.mAttrList:pushBackCustomItem(slot27)
	end

	return 
end
slot0.onCheckCallBack = function (slot0, slot1)
	if slot0.mTipsCheckbox:isSelected() then
		slot0.resetSelectStatus(slot0)
		slot0.getlvUpOneLvGoods(slot0)
	else
		slot0.resetSelectStatus(slot0)
	end

	return 
end
slot0.resetSelectStatus = function (slot0)
	for slot4, slot5 in pairs(slot0.mSelectWuXueList) do
		if slot0.mExpListViewTest:cellAtIndex(tonumber(slot4) - 1) then
			slot7.wuxueLayout.checkbox:setSelected(false)
		end
	end

	slot0.mSelectWuXueList = {}

	for slot4, slot5 in pairs(slot0.mSelectGoodList) do
		if slot0.mExpListViewTest:cellAtIndex(tonumber(slot4) - 1) then
			slot7.wuxueLayout.checkbox:setSelected(false)
		end
	end

	slot0.mSelectGoodList = {}

	slot0.refreshUI(slot0)

	return 
end
slot0.canLvUpManyByExp = function (slot0, slot1)
	slot4 = WuxueModel.items[slot0.mInfo.ModelId].partId
	slot5 = WuxueModel.items[slot0.mInfo.ModelId].quality
	slot6 = {
		canLvUp = 0,
		overflowExp = slot1,
		overflowMaxExp = 0,
		isOverFlow = false
	}
	slot7 = 0

	for slot11, slot12 in ipairs(WuxueLvupConfig.items) do
		if slot12[slot4][slot5] and slot13.lvUpNeedTotal <= slot1 then
			slot6.canLvUp = slot13.Lv
			slot6.overflowExp = slot1 - slot13.lvUpNeedTotal
		end

		if slot13 then
			slot7 = slot7 + 1
		end
	end

	if slot7 <= slot6.canLvUp then
		slot6.canLvUp = slot7
		slot6.isOverFlow = true
	end

	if slot6.isOverFlow then
		slot6.barCurValue = 1
		slot6.barMaxValue = 1
	else
		slot6.barCurValue = slot6.overflowExp
		slot8 = nil
		slot6.barMaxValue = WuxueLvupConfig.items[slot6.canLvUp + 1][slot4][slot5].lvUpNeedTotal - ((slot6.canLvUp ~= 0 or 0) and WuxueLvupConfig.items[slot6.canLvUp][slot4][slot5].lvUpNeedTotal)
	end

	return slot6
end
slot0.calculateWuXueExp = function (slot0, slot1)
	return WuxueModel.items[slot1.ModelId].baseExp + slot1.Exp*WuxueConfig.items[1].expRadio
end
slot0.refreshRefineData = function (slot0)
	slot0.mRefineList = {}
	slot1 = {}

	for slot5, slot6 in pairs(WuxueGoodsExpConfig.items) do
		if 0 < ({
			modelId = slot5,
			num = GoodsObj:getItemCount(slot5),
			addExp = slot6.expAdd
		})["num"] then
			table.insert(slot1, clone(slot7))
		end
	end

	table.sort(slot1, function (slot0, slot1)
		if slot0.addExp ~= slot1.addExp then
			return slot1.addExp < slot0.addExp
		end

		return slot1.modelId < slot0.modelId
	end)

	for slot5, slot6 in ipairs(slot1) do
		for slot10 = 1, slot6.num, 1 do
			slot6.ExpType = 2

			table.insert(slot0.mRefineList, clone(slot6))
		end
	end

	slot0.mCanUseWuxueList = {}

	for slot6, slot7 in pairs(slot2) do
		if slot7.EntityId ~= slot0.mInfo.EntityId then
			table.insert(slot0.mCanUseWuxueList, slot7)
		end
	end

	table.sort(slot0.mCanUseWuxueList, function (slot0, slot1)
		if WuxueModel.items[slot0.ModelId].colorLv ~= WuxueModel.items[slot1.ModelId].colorLv then
			return slot2.colorLv < slot3.colorLv
		end

		if slot0.Lv ~= slot1.Lv then
			return slot0.Lv < slot1.Lv
		end

		if slot0.Step ~= slot1.Step then
			return slot0.Step < slot1.Step
		end

		return slot0.ModelId < slot1.ModelId
	end)

	for slot6, slot7 in ipairs(slot0.mCanUseWuxueList) do
		slot7.ExpType = 1

		table.insert(slot0.mRefineList, clone(slot7))
	end

	return 
end
slot0.onWuxueItemChangedStatus = function (slot0, slot1)
	if slot0.mOverflow then
		ui.showFlashView(TR("已满级"))
		slot1.getParent(slot1).checkbox:setSelected(false)

		return 
	end

	slot0.mTipsCheckbox:setSelected(false)

	if slot1.wuxueInfo.ExpType == 1 then
		slot1.getParent(slot1).checkbox:setSelected(not (slot0.mSelectWuXueList[slot2.EntityId] and true))

		if not (slot0.mSelectWuXueList[slot2.EntityId] and true) then
			slot0.mSelectWuXueList[slot2.EntityId] = slot2
		else
			slot0.mSelectWuXueList[slot2.EntityId] = nil
		end
	else
		slot1.getParent(slot1).checkbox:setSelected(not (slot0.mSelectGoodList[tostring(slot2.tableIndex)] and true))

		if not (slot0.mSelectGoodList[tostring(slot2.tableIndex)] and true) then
			slot0.mSelectGoodList[tostring(slot2.tableIndex)] = slot2
		else
			slot0.mSelectGoodList[tostring(slot2.tableIndex)] = nil
		end
	end

	if 0 < slot0.calculateCanLvUpMuch(slot0) then
		slot4 = slot0.canLvUpManyByExp(slot0, slot0.mInfo.Exp + slot3)

		slot0.proBarBg.seleceExpProBar:stopAllActions()
		slot0.proBarBg.seleceExpProBar:setVisible(true)
		slot0.proBarBg.seleceExpProBar:setMaxValue(slot4.barMaxValue)
		slot0.proBarBg.seleceExpProBar:setCurrValue(slot4.barCurValue)
		slot0.proBarBg.seleceExpProBar:runAction(cc.RepeatForever:create(slot5))
		slot0.proBarBg.proLabel:setString(TR("强化经验:%d+%d/%d", slot0.mCurBarValue, slot3, slot0.mMaxBarValue))

		if not slot4.isOverFlow then
			slot0.mTarLvLabel:setString(TR("%d级", slot4.canLvUp))
		else
			slot0.mTarLvLabel:setString(TR("%d级(满级）", slot4.canLvUp))
		end

		slot0.mTarLvLabel:stopAllActions()
		slot0.mTarLvLabel:setOpacity(255)

		if slot0.mCurLv < slot4.canLvUp then
			slot0.mTarLvLabel:runAction(cc.RepeatForever:create(cc.Sequence:create(cc.FadeOut:create(1.2), cc.FadeIn:create(0.6))))
			slot0.proBarBg.seleceExpProBar:setMaxValue(1)
			slot0.proBarBg.seleceExpProBar:setCurrValue(1)
		end

		slot0.mAttrList:removeAllChildren()

		slot9 = slot0.getBaseAttrStrList(slot0, slot0.mInfo.ModelId, slot7)

		for slot13, slot14 in ipairs(slot8) do
			slot17 = slot0.createLayoutTemplateNode(slot0, "attLayout", {
				curAttrStr = slot14.keyName .. ":" .. slot14.valueStr,
				tarAttrStr = (slot9[slot13] and slot9[slot13].valueStr) or TR("未获取到对应值")
			})

			if slot0.mCurLv < slot4.canLvUp then
				slot17.nextLabel:runAction(cc.RepeatForever:create(cc.Sequence:create(cc.FadeOut:create(1.2), cc.FadeIn:create(0.6))))
			end

			slot0.mAttrList:pushBackCustomItem(slot17)
		end
	else
		slot0.refreshUI(slot0)
	end

	return 
end
slot0.onBtnBackClickAction = function (slot0, slot1)
	if slot0.callback then
		slot0.callback(slot0.mInfo)
	end

	LayerManager.removeLayer(slot0)

	return 
end
slot0.onWuxueLvup = function (slot0, slot1)
	slot3 = slot0.canLvUpManyByExp(slot0, slot0.mInfo.Exp + slot0.calculateCanLvUpMuch(slot0))

	if 0 < slot0.calculateCanLvUpMuch(slot0) and slot3.isOverFlow then
		ui.showMessageBox({
			titleText = TR("提示"),
			text = TR("使用后会超出当前经验上限，超出上限经验会保留，确认是否强化?"),
			okCallback = function (...)
				slot0:requestWuxueLvUp()

				return 
			end,
			cancelCallback = function (...)
				return 
			end
		})
	else
		slot0.requestWuxueLvUp(slot0)
	end

	return 
end
slot0.getSeverNeedParamStr = function (slot0)
	slot1 = ""
	slot2 = {}

	for slot6, slot7 in pairs(WuxueGoodsExpConfig.items) do
		slot2[tostring(slot6)] = 0
	end

	for slot6, slot7 in pairs(slot0.mSelectGoodList) do
		slot2[tostring(slot7.modelId)] = slot2[tostring(slot7.modelId)] + 1
	end

	slot3 = {}

	for slot7, slot8 in pairs(slot2) do
		if 0 < slot8 then
			table.insert(slot3, {
				modelId = tonumber(slot7),
				num = slot8
			})
		end
	end

	for slot7, slot8 in ipairs(slot3) do
		slot1 = slot1 .. string.format("%d|%d%s", slot8.modelId, slot8.num, (slot7 ~= #slot3 and ",") or "")
	end

	return slot1
end
slot0.requestWuxueLvUp = function (slot0)
	slot2 = slot0.getSeverNeedParamStr(slot0)

	if #table.keys(slot0.mSelectWuXueList) <= 0 and slot2 == "" then
		ui.showFlashView(TR("请选择武学材料"))

		return 
	end

	slot0.socketRequest(slot0, {
		methodName = "LvUp",
		moduleName = "Wuxue",
		methodData = {
			slot0.mInfo.EntityId,
			slot1,
			slot2
		},
		successCallback = function (slot0)
			slot0.mInfo = slot0.WuxueInfo

			WuxueObj:modifyWuxue(slot0.WuxueInfo)

			for slot4, slot5 in pairs(pairs) do
				WuxueObj:deleteItemById(slot5)
			end

			slot0.mSelectWuXueList = {}
			slot0.mSelectGoodList = {}

			slot0.mTipsCheckbox:setSelected(false)
			slot0:refreshUI()

			if slot0.callback then
				slot0.callback(slot0.mInfo, true)
			end

			return 
		end
	})

	return 
end

return slot0
