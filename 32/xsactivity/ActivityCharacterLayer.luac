slot0 = class("ActivityCharacterLayer", require("common.BaseLayer"), function ()
	return UIWrap.newRootLayer({
		fullScreen = false
	})
end)
slot0.uiTree = {
	{
		name = "untitled1",
		cType = "FileLayer",
		params = {
			onlyEditer = true,
			file = "xsactivity/XSActivityMainLayer.lua"
		},
		children = {}
	},
	{
		name = "untitled4",
		cType = "Node",
		params = {
			posApt = 1,
			scaleApt = 2,
			pos = {
				x = 568,
				y = 320
			}
		},
		children = {
			{
				name = "untitled27",
				cType = "Scale9Sprite",
				params = {
					image = "tc_2.png",
					pos = {
						x = 108.56,
						y = -68.23
					},
					size = {
						width = 826,
						height = 443
					}
				},
				children = {}
			},
			{
				name = "untitled25",
				cType = "Sprite",
				params = {
					image = "xshd_16.png",
					pos = {
						x = 108.17,
						y = 190.46
					}
				},
				children = {}
			},
			{
				name = "untitled36",
				cType = "Sprite",
				params = {
					rotationAngle = 90,
					image = "c_11.png",
					pos = {
						x = -163.74,
						y = -65.44
					}
				},
				children = {}
			},
			{
				name = "mDaySprite",
				cType = "Sprite",
				params = {
					image = "xshd_10.png",
					pos = {
						x = -233.34,
						y = 107.56
					}
				},
				children = {}
			},
			{
				name = "untitled38",
				cType = "Scale9Sprite",
				params = {
					image = "xshd_15.png",
					anchor = {
						x = 0.5,
						y = 1
					},
					pos = {
						x = -217.54,
						y = 164.32
					},
					size = {
						width = 3,
						height = 32
					}
				},
				children = {}
			},
			{
				name = "untitled44",
				cType = "Scale9Sprite",
				params = {
					image = "grxx_1.png",
					capInsets = {
						x = 100,
						height = 20,
						width = 100,
						y = 100
					},
					pos = {
						x = 169.77,
						y = -89.86
					},
					size = {
						width = 649,
						height = 336
					}
				},
				children = {}
			},
			{
				name = "untitled46",
				cType = "Sprite",
				params = {
					image = "c_77.png",
					pos = {
						x = 184.65,
						y = -251.97
					}
				},
				children = {}
			},
			{
				name = "mProgressBar",
				cType = "ProgressBar",
				params = {
					normalImage = "jyt_53.png",
					bgImage = "jyt_52.png",
					pos = {
						x = 152.83,
						y = 168.44
					}
				},
				children = {}
			},
			{
				name = "mProgRewardParent",
				cType = "Node",
				params = {
					pos = {
						x = -180,
						y = 170
					}
				},
				children = {
					{
						name = "RewardTemNode",
						cType = "TemplateNode",
						params = {
							pos = {
								x = 100,
								y = 0
							}
						},
						children = {
							{
								name = "untitled80",
								cType = "Button",
								params = {
									childName = "rewardBox",
									image = "jlmz_1.png",
									scale = 0.8,
									clickAction = "onGetProgReward",
									pos = {
										x = 0,
										y = 32.45
									}
								},
								children = {}
							},
							{
								name = "untitled32",
								cType = "Sprite",
								params = {
									image = "xshd_11.png",
									childName = "dotSprite",
									pos = {
										x = 0,
										y = 0
									}
								},
								children = {}
							},
							{
								name = "untitled33",
								cType = "CardNode",
								params = {
									scale = 0.7,
									clickAction = "onGetProgReward",
									childName = "card",
									allowClick = true,
									pos = {
										x = 0,
										y = 43
									}
								},
								children = {}
							},
							{
								name = "untitled34",
								cType = "Sprite",
								params = {
									image = "c_55.png",
									childName = "receivedSprite",
									scale = 0.6,
									pos = {
										x = 0,
										y = 43
									}
								},
								children = {}
							},
							{
								name = "untitled35",
								cType = "Label",
								params = {
									fontSize = 20,
									childName = "progLabel",
									text = "Label",
									pos = {
										x = 0,
										y = -20
									}
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "mTabListView",
				cType = "ListView",
				params = {
					direction = true,
					pos = {
						x = -283.84,
						y = -262.83
					},
					size = {
						width = 118,
						height = 393
					}
				},
				children = {
					{
						name = "TabBtnLayout",
						cType = "Layout",
						custom = {
							{
								value = "untitled90-titleText",
								name = "titleStr",
								type = "string"
							},
							{
								value = "untitled91-subKey",
								name = "redDotKey",
								type = "string"
							}
						},
						params = {
							size = {
								width = 118,
								height = 95
							}
						},
						children = {
							{
								name = "untitled90",
								cType = "Button",
								params = {
									childName = "tabBtn",
									swallowTouch = false,
									image = "xshd_13.png",
									anchor = {
										x = 0.5,
										y = 1
									},
									pos = {
										x = 63.71,
										y = 97.6
									},
									titleOffset = {
										x = 0.5,
										y = 0.45
									},
									titleText = TR("第一日")
								},
								children = {
									{
										name = "untitled91",
										cType = "RedDot",
										params = {
											subKey = "",
											moduleId = 6001
										},
										children = {}
									}
								}
							},
							{
								name = "untitled89",
								cType = "Sprite",
								params = {
									childName = "curSprite",
									image = "qrdlxzt.png",
									hide = true,
									pos = {
										x = 63,
										y = 48
									}
								},
								children = {}
							}
						}
					}
				}
			},
			{
				name = "mTaskTabView",
				cType = "TabView",
				params = {
					onSelectChange = "onTaskChange",
					lightedImage = "c_30.png",
					direction = false,
					delayInit = true,
					normalImage = "c_31.png",
					btnInfos = {
						{
							title = "Test"
						}
					},
					pos = {
						x = -147.68,
						y = 80.22
					},
					size = {
						width = 600,
						height = 50
					},
					titleOffset = {
						x = 0.5,
						y = 0.55
					}
				},
				children = {}
			},
			{
				name = "untitled45",
				cType = "ScrollView",
				params = {
					pos = {
						x = -147.67,
						y = -243.14
					},
					size = {
						width = 629,
						height = 315
					}
				},
				children = {
					{
						name = "mTableView",
						cType = "TableView",
						params = {
							numOfCellsFunc = "onCellNum",
							isVertical = true,
							cellUpdateFunc = "onCellRefresh",
							cellSizeFunc = "onCellSize",
							cellFillFunc = "onCellCreate",
							pos = {
								x = 0,
								y = 0
							},
							size = {
								width = 629,
								height = 315
							}
						},
						children = {
							{
								name = "LoginTemNode",
								cType = "TemplateNode",
								custom = {
									{
										value = "untitled51-image",
										name = "dayPic",
										type = "string"
									}
								},
								params = {
									pos = {
										x = 0.76,
										y = -99.92
									},
									size = {
										width = 629,
										height = 111
									}
								},
								children = {
									{
										name = "untitled50",
										cType = "Scale9Sprite",
										params = {
											image = "c_98.png",
											pos = {
												x = 314.5,
												y = 55.5
											},
											size = {
												width = 629,
												height = 111
											}
										},
										children = {}
									},
									{
										name = "untitled51",
										cType = "Sprite",
										params = {
											image = "xshd_17.png",
											pos = {
												x = 59.58,
												y = 55.5
											}
										},
										children = {}
									},
									{
										name = "untitled52",
										cType = "ListView",
										params = {
											childName = "rewardListView",
											direction = false,
											swallowTouch = false,
											pos = {
												x = 118.49,
												y = 9.61
											},
											size = {
												width = 366.78,
												height = 90
											}
										},
										children = {
											{
												name = "RewardLayout",
												cType = "Layout",
												custom = {
													{
														value = "untitled54-initParams",
														name = "cardData",
														type = "string"
													}
												},
												params = {
													size = {
														width = 100,
														height = 90
													}
												},
												children = {
													{
														name = "untitled54",
														cType = "CardNode",
														params = {
															allowClick = true,
															initParams = {},
															pos = {
																x = 50,
																y = 45
															}
														},
														children = {}
													}
												}
											}
										}
									},
									{
										name = "untitled55",
										cType = "Button",
										params = {
											image = "c_32.png",
											childName = "getBtn",
											pos = {
												x = 558.73,
												y = 55.5
											},
											titleText = TR("领 取")
										},
										children = {}
									}
								}
							},
							{
								name = "ExchangeTemNode",
								cType = "TemplateNode",
								custom = {
									{
										value = "untitled70-text",
										name = "strDiscount",
										type = "string"
									},
									{
										value = "untitled68-text",
										name = "strVipNeed",
										type = "string"
									}
								},
								params = {
									pos = {
										x = 1.02,
										y = -207.26
									},
									size = {
										width = 629,
										height = 111
									}
								},
								children = {
									{
										name = "untitled58",
										cType = "Scale9Sprite",
										params = {
											image = "c_98.png",
											pos = {
												x = 314.5,
												y = 55.5
											},
											size = {
												width = 629,
												height = 111
											}
										},
										children = {}
									},
									{
										name = "untitled60",
										cType = "ListView",
										params = {
											childName = "rewardListView1",
											direction = false,
											swallowTouch = false,
											pos = {
												x = 13,
												y = 9.61
											},
											size = {
												width = 200,
												height = 90
											}
										},
										children = {}
									},
									{
										name = "untitled63",
										cType = "Button",
										params = {
											image = "c_32.png",
											childName = "exchangeBtn",
											pos = {
												x = 558.73,
												y = 35.5
											},
											titleText = TR("兑 换")
										},
										children = {}
									},
									{
										name = "untitled64",
										cType = "ListView",
										params = {
											childName = "rewardListView2",
											direction = false,
											swallowTouch = false,
											pos = {
												x = 273,
												y = 9.61
											},
											size = {
												width = 200,
												height = 90
											}
										},
										children = {}
									},
									{
										name = "untitled67",
										cType = "Sprite",
										params = {
											image = "c_23.png",
											pos = {
												x = 247.61,
												y = 54.58
											}
										},
										children = {}
									},
									{
										name = "untitled68",
										cType = "Label",
										params = {
											fontSize = 20,
											childName = "needVipLabel",
											color = {
												g = 65,
												r = 192,
												b = 65
											},
											pos = {
												x = 530.36,
												y = 92.4
											},
											text = TR("兑换需达到：会员0")
										},
										children = {}
									},
									{
										name = "untitled69",
										cType = "Label",
										params = {
											fontSize = 20,
											childName = "remainLabel",
											color = {
												g = 37,
												r = 37,
												b = 37
											},
											pos = {
												x = 554.8,
												y = 68.37
											},
											text = TR("剩余次数：0")
										},
										children = {}
									},
									{
										name = "untitled70",
										cType = "BadgeText",
										params = {
											fontRotation = -45,
											image = "c_88.png",
											childName = "discountBTLabel",
											text = "",
											anchor = {
												x = 1,
												y = 1
											},
											fontColor = {
												g = 199,
												r = 223,
												b = 42
											},
											fontPos = {
												x = 18,
												y = 35
											},
											pos = {
												x = 61.06,
												y = 105.96
											}
										},
										children = {}
									}
								}
							},
							{
								name = "TaskTemNode",
								cType = "TemplateNode",
								custom = {
									{
										value = "untitled78-text",
										name = "strTaskIntro",
										type = "string"
									}
								},
								params = {
									pos = {
										x = 1.61,
										y = -316.59
									},
									size = {
										width = 629,
										height = 111
									}
								},
								children = {
									{
										name = "untitled72",
										cType = "Scale9Sprite",
										params = {
											image = "c_95.png",
											pos = {
												x = 314.5,
												y = 55.5
											},
											size = {
												width = 629,
												height = 111
											}
										},
										children = {}
									},
									{
										name = "untitled74",
										cType = "ListView",
										params = {
											childName = "rewardListView",
											direction = false,
											swallowTouch = false,
											pos = {
												x = 14.27,
												y = 5.02
											},
											size = {
												width = 400,
												height = 70
											}
										},
										children = {
											{
												name = "CardLayout",
												cType = "Layout",
												custom = {
													{
														value = "untitled76-initParams",
														name = "cardData",
														type = "string"
													}
												},
												params = {
													pos = {
														z = 0,
														x = 9.51,
														y = 1.5
													},
													size = {
														width = 80,
														height = 70
													}
												},
												children = {
													{
														name = "untitled76",
														cType = "CardNode",
														params = {
															scale = 0.8,
															allowClick = true,
															initParams = {},
															pos = {
																x = 40,
																y = 35
															}
														},
														children = {}
													}
												}
											}
										}
									},
									{
										name = "untitled77",
										cType = "Button",
										params = {
											image = "c_32.png",
											childName = "getBtn",
											pos = {
												x = 558.73,
												y = 40.5
											},
											titleText = TR("领 取")
										},
										children = {}
									},
									{
										name = "untitled78",
										cType = "Label",
										params = {
											childName = "taskLabel",
											text = "Label",
											anchor = {
												x = 0,
												y = 0.5
											},
											pos = {
												x = 17.68,
												y = 94.14
											}
										},
										children = {}
									},
									{
										name = "untitled84",
										cType = "Label",
										params = {
											text = "Label",
											hide = true,
											childName = "progLabel",
											pos = {
												x = 552,
												y = 94.14
											}
										},
										children = {}
									}
								}
							}
						}
					}
				}
			},
			{
				name = "untitled79",
				cType = "Label",
				params = {
					pos = {
						x = 300,
						y = -285
					},
					text = TR("活动倒计时：")
				},
				children = {}
			},
			{
				name = "mTimeLabel",
				cType = "Label",
				params = {
					text = "Label",
					anchor = {
						x = 0,
						y = 0.5
					},
					color = {
						g = 199,
						r = 223,
						b = 42
					},
					pos = {
						x = 362,
						y = -285
					}
				},
				children = {}
			}
		}
	}
}
slot0.ctor = function (slot0, slot1)
	slot0.mActivityId = ActivityObj:getEntityId(ModuleSub.eCharacter)
	slot0.mSelectDay = slot1.selectDay
	slot0.mTaskTag = slot1.taskTag

	slot0.super.ctor(slot0)
	slot0.initUI(slot0)
	slot0.requestGetInfo(slot0)

	return 
end
slot0.initUI = function (slot0)
	slot0.createUITree(slot0)

	return 
end
slot0.refreshUI = function (slot0)
	slot0.createTimeUpdate(slot0)
	slot0.refreshProgress(slot0)

	return 
end
slot0.refreshProgress = function (slot0)
	slot0.mProgRewardParent:removeAllChildren()

	slot1 = string.split(slot0.mTotalInfo.GetBoxIdStr, ",")
	slot4 = (slot0.mProgressBar:getContentSize().width - 20)/#slot0.mTotalInfo.BoxConfig
	slot5 = 0

	for slot9, slot10 in ipairs(slot0.mTotalInfo.BoxConfig) do
		slot11 = slot0.createLayoutTemplateNode(slot0, "RewardTemNode")

		slot11.setPosition(slot11, slot9*slot4, 0)
		slot0.mProgRewardParent:addChild(slot11)

		if slot5 < slot10.Condition then
			slot5 = slot10.Condition
		end

		slot11.card.index = slot9
		slot11.rewardBox.index = slot9

		slot11.rewardBox:setVisible(1 < #(Utility.analysisStrResList(slot10.Reward) or {}))
		slot11.card:setCardData(Utility.analysisStrResList(slot10.Reward) or {}[1], {
			Enums.CardShowAttr.eNum
		})
		slot11.card:setVisible(slot13 == 1)

		if table.indexof(slot1, tostring(slot10.Id)) then
			slot11.receivedSprite:setVisible(true)
			slot11.card:setGray()
			slot11.rewardBox:loadTextures("jlmz_2.png", "jlmz_2.png")
		else
			slot11.receivedSprite:setVisible(false)

			if slot10.Condition <= slot0.mTotalInfo.BoxInfo then
				ui.setWaveAnimation(slot11.card)
				ui.setWaveAnimation(slot11.rewardBox)
			end
		end

		slot11.progLabel:setString(string.format("%s/%s", slot0.mTotalInfo.BoxInfo, slot10.Condition))
	end

	slot6 = 0
	slot7 = 0

	if slot5 <= slot0.mTotalInfo.BoxInfo then
		slot6 = slot2
	else
		for slot11, slot12 in ipairs(slot0.mTotalInfo.BoxConfig) do
			if slot0.mTotalInfo.BoxInfo <= slot12.Condition then
				slot6 = slot12.Id - 1 + (slot0.mTotalInfo.BoxInfo - slot7)/(slot12.Condition - slot7)

				break
			end

			slot7 = slot12.Condition
		end
	end

	slot0.mProgressBar:setMaxValue(slot2)
	slot0.mProgressBar:setCurrValue(slot6)

	return 
end
slot0.createDayTab = function (slot0)
	slot0.mTabListView:removeAllChildren()

	slot0.mDayItemList = {}

	if slot0.mTotalInfo.TotalDay*100 < slot0.mTabListView:getContentSize().height then
		slot2 = slot3
	end

	for slot7 = 1, slot0.mTotalInfo.TotalDay, 1 do
		slot0.mTabListView:pushBackCustomItem(slot8)
		slot0.createLayoutTemplateNode(slot0, "TabBtnLayout", {
			titleStr = TR("第%s天", Utility.getChineseNum(slot7)),
			redDotKey = tostring(slot7)
		}).curSprite:setVisible(slot7 == slot0.mTotalInfo.Day)
		slot8.tabBtn:setTouchEnabled(slot7 <= slot0.mTotalInfo.Day)
		slot8.tabBtn:loadTextures((slot7 <= slot0.mTotalInfo.Day and "xshd_13.png") or "xshd_14.png", )
		slot8.tabBtn:setClickAction(function ()
			slot0:selectOneDay(slot0)

			return 
		end)

		slot8.currDay = slot7

		table.insert(slot0.mDayItemList, slot8)
	end

	slot0.mTabListView:addChild(UIWrap.newControl("Scale9Sprite", {
		image = "xshd_15.png",
		pos = cc.p(65.5, slot2 + 20),
		anchor = cc.p(0.5, 1),
		size = cc.size(3, slot0.mTotalInfo.TotalDay*slot1)
	}), -1)
	slot0.mDaySprite:setTexture(({
		nil,
		nil,
		"xshd_25.png",
		"xshd_26.png",
		"xshd_27.png",
		"xshd_28.png",
		"xshd_10.png"
	})[slot0.mTotalInfo.TotalDay] or "xshd_24.png")
	slot0.selectOneDay(slot0)

	return 
end
slot0.refreshDayTab = function (slot0)
	for slot4, slot5 in pairs(slot0.mDayItemList) do
		slot5.curSprite:setVisible(slot5.currDay == slot0.mSelectDay)
		slot5.tabBtn:setTouchEnabled(slot5.currDay <= slot0.mTotalInfo.Day)
		slot5.tabBtn:loadTextures((slot5.currDay <= slot0.mTotalInfo.Day and "xshd_13.png") or "xshd_14.png", )
	end

	return 
end
slot0.selectOneDay = function (slot0, slot1)
	if slot1 ~= nil and slot1 == slot0.mSelectDay then
		return 
	end

	slot0.mSelectDay = slot1 or slot0.mSelectDay or slot0.mTotalInfo.Day

	ui.setListviewItemShow(slot0.mTabListView, slot0.mSelectDay)
	slot0.createTaskTabview(slot0, slot0.mSelectDay)
	slot0.refreshDayTab(slot0)

	return 
end
slot0.createTaskTabview = function (slot0, slot1)
	if not tolua.isnull(slot0.mTaskTabView) then
		slot0.mTaskTabView:removeFromParent()

		slot0.mTaskTabView = nil
	end

	slot2 = {}

	for slot6, slot7 in ipairs(slot0.mTotalInfo.Task[slot1]) do
		table.insert(slot2, {
			tag = slot6,
			title = slot7.Title
		})
	end

	if slot0.mTaskTag ~= nil and #slot2 < slot0.mTaskTag then
		slot0.mTaskTag = #slot2
	end

	slot0.createUISubTree(slot0, "mTaskTabView", function (slot0, slot1)
		slot1.btnInfos = slot0
		slot1.selectTag = slot1.mTaskTag

		return 
	end)

	for slot6, slot7 in pairs(slot0.mTaskTabView:getTabBtns()) do
		slot8 = slot1 .. "_" .. slot0.mTotalInfo.Task[slot1][slot6].EnumId

		if slot0.mTotalInfo.Task[slot1][slot6].EnumId == 20 then
			slot8 = "Day_" .. slot0.mTotalInfo.Task[slot1][slot6].EnumId
		end

		if slot0.mTotalInfo.Task[slot1][slot6].EnumId == 21 then
			slot8 = string.format("Day_%d_", slot1) .. slot0.mTotalInfo.Task[slot1][slot6].EnumId
		end

		slot7.addChild(slot7, UIWrap.newControl("RedDot", {
			moduleId = ModuleSub.eCharacterPoint,
			subKey = slot8
		}))
	end

	return 
end
slot0.createTimeUpdate = function (slot0)
	if slot0.mTimeLabel.timeUpdate then
		slot0.mTimeLabel:stopAction(slot0.mTimeLabel.timeUpdate)

		slot0.mTimeLabel.timeUpdate = nil
	end

	slot0.mTimeLabel.timeUpdate = Utility.schedule(slot0.mTimeLabel, function ()
		if 0 < slot0.mTotalInfo.EndTime - Player:getCurrentTime() then
			slot0.mTimeLabel:setString(MqTime.completeFormat(slot0))
		else
			slot0.mTimeLabel:setString(TR("活动已结束"))
			slot0.mTimeLabel:stopAction(slot0.mTimeLabel.timeUpdate)

			slot0.mTimeLabel.timeUpdate = nil
		end

		return 
	end, 1)

	return 
end
slot0.sortTaskData = function (slot0, slot1)
	slot2 = {}

	if slot1.LoginType ~= nil and slot1.LoginType == 1 then
		slot3 = string.split(slot1.LoginDaysStr, ",")
		slot4 = string.split(slot1.RewardDaysStr, ",")

		for slot8, slot9 in ipairs(slot2) do
			slot9.alreadyReward = table.indexof(slot4, tostring(slot9.Day)) ~= false
			slot9.canGetReward = table.indexof(slot3, tostring(slot9.Day)) ~= false
		end

		table.sort(slot2, function (slot0, slot1)
			if slot0.alreadyReward ~= slot1.alreadyReward then
				return slot0.alreadyReward == false
			end

			if slot0.canGetReward ~= slot1.canGetReward then
				return slot0.canGetReward == true
			end

			return slot0.Day < slot1.Day
		end)
	elseif slot1.ExchangeType ~= nil and slot1.ExchangeType == 1 then
		slot3 = PlayerAttrObj:getPlayerAttrByName("Vip")

		table.sort(clone(slot1.List), function (slot0, slot1)
			if slot0.ExchangeCount == 0 and 0 < slot1.ExchangeCount then
				return false
			end

			if 0 < slot0.ExchangeCount and slot1.ExchangeCount == 0 then
				return true
			end

			return slot0.Id < slot1.Id
		end)
	elseif slot1.ChallengeType ~= nil and slot1.ChallengeType == 1 then
		for slot6, slot7 in ipairs(slot2) do
			slot7.showStr = TR("通关第%s关", slot7.LevelId)
			slot7.canGetReward = slot1.CurrentChallengeNodeId == slot7.LevelId and slot1.IsPass == 1
			slot7.receivedReward = slot7.LevelId < slot1.CurrentChallengeNodeId or slot1.CurrentChallengeNodeId == 0
		end

		table.sort(slot2, function (slot0, slot1)
			if slot0.receivedReward ~= slot1.receivedReward then
				return slot0.receivedReward == false
			end

			if slot0.canGetReward ~= slot1.canGetReward then
				return slot0.canGetReward == true
			end

			return slot0.LevelId < slot1.LevelId
		end)
	else
		for slot6, slot7 in ipairs(slot2) do
			slot7.showStr = string.format(slot7.Description, slot7.Condition)
			slot7.canGetReward = slot7.MaxValue <= slot7.CurrentValue

			if slot1.IsRankType ~= nil and slot1.IsRankType == 1 then
				slot7.canGetReward = slot7.CurrentValue <= slot7.MaxValue
			end

			slot7.receivedReward = slot7.IsGetReward
		end

		table.sort(slot2, function (slot0, slot1)
			if slot0.receivedReward ~= slot1.receivedReward then
				return slot0.receivedReward == false
			end

			if slot0.canGetReward ~= slot1.canGetReward then
				return slot0.canGetReward == true
			end

			return slot0.TaskId < slot1.TaskId
		end)
	end

	return slot2
end
slot0.createTaskItem = function (slot0, slot1, slot2)
	slot1.removeAllChildren(slot1)

	slot3 = slot0.mTaskData[slot2 + 1]
	slot5 = nil

	if slot0.mTotalInfo.Task[slot0.mSelectDay][slot0.mTaskTag].LoginType ~= nil and slot4.LoginType == 1 then
		slot5 = slot0.createLayoutTemplateNode(slot0, "LoginTemNode", {
			dayPic = ({
				"xshd_17.png",
				"xshd_18.png",
				"xshd_19.png",
				"xshd_20.png",
				"xshd_21.png",
				"xshd_22.png",
				"xshd_23.png"
			})[slot3.Day]
		})

		for slot10, slot11 in ipairs(Utility.analysisStrResList(slot3.Reward)) do
			slot5.rewardListView:pushBackCustomItem(slot0.createLayoutTemplateNode(slot0, "RewardLayout", {
				cardData = {
					cardInfo = slot11,
					showAttrs = {
						Enums.CardShowAttr.eNum,
						Enums.CardShowAttr.eStar
					}
				}
			}))
		end

		if slot3.alreadyReward == true then
			slot5.getBtn:setEnabled(false)
			slot5.getBtn:loadTextures("c_55.png", "c_55.png")
			slot5.getBtn:setTitleText("")
		else
			slot5.getBtn:setTitleText(TR("领 取"))
			slot5.getBtn:loadTextures("c_32.png", "c_32.png")
			slot5.getBtn:setEnabled(slot3.canGetReward)
			slot5.getBtn:setClickAction(function ()
				slot0:requestGetLoginReward(slot1.Day)

				return 
			end)
		end
	elseif slot4.ExchangeType ~= nil and slot4.ExchangeType == 1 then
		slot0.createLayoutTemplateNode(slot0, "ExchangeTemNode", {
			strDiscount = TR("%s折", slot3.Discount/10),
			strVipNeed = TR("兑换需达到会员%s", slot3.VipLv)
		}).needVipLabel:setColor((slot3.VipLv <= PlayerAttrObj:getPlayerAttrByName("Vip") and cc.c3b(139, 168, 87)) or cc.c3b(192, 65, 65))
		slot5.discountBTLabel:setVisible(0 < slot3.Discount/10 and slot3.Discount/10 < 10)

		for slot11, slot12 in ipairs(Utility.analysisStrResList(slot3.ConsumeResource)) do
			slot5.rewardListView1:pushBackCustomItem(slot0.createLayoutTemplateNode(slot0, "RewardLayout", {
				cardData = {
					cardInfo = slot12,
					showAttrs = {
						Enums.CardShowAttr.eNum,
						Enums.CardShowAttr.eStar
					}
				}
			}))
		end

		for slot11, slot12 in ipairs(Utility.analysisStrResList(slot3.SellResource)) do
			slot5.rewardListView2:pushBackCustomItem(slot0.createLayoutTemplateNode(slot0, "RewardLayout", {
				cardData = {
					cardInfo = slot12,
					showAttrs = {
						Enums.CardShowAttr.eNum,
						Enums.CardShowAttr.eStar
					}
				}
			}))
		end

		slot5.remainLabel:setString(TR("剩余次数:%s", slot3.ExchangeCount))
		slot5.exchangeBtn:setEnabled(0 < slot3.ExchangeCount)
		slot5.exchangeBtn:setClickAction(function ()
			if slot0.VipLv ~= nil and PlayerAttrObj:getPlayerAttrByName("Vip") < slot0.VipLv then
				ui.showFlashView(TR("需要会员%s才能兑换该商品", slot0.VipLv))

				return 
			end

			for slot3, slot4 in ipairs(Utility.analysisStrResList(slot0.ConsumeResource)) do
				if Resource.isEnough(slot4.resourceId, slot4.num) == false then
					return 
				end
			end

			slot1:requestExchange(slot0.Id)

			return 
		end)
	elseif slot4.ChallengeType ~= nil and slot4.ChallengeType == 1 then
		slot5 = slot0.createLayoutTemplateNode(slot0, "TaskTemNode", {
			strTaskIntro = slot3.showStr
		})

		for slot9, slot10 in ipairs(Utility.analysisStrResList(slot3.Reward)) do
			slot5.rewardListView:pushBackCustomItem(slot0.createLayoutTemplateNode(slot0, "CardLayout", {
				cardData = {
					cardInfo = slot10,
					showAttrs = {
						Enums.CardShowAttr.eNum,
						Enums.CardShowAttr.eStar
					}
				}
			}))
		end

		if slot3.receivedReward == true then
			slot5.getBtn:setEnabled(false)
			slot5.getBtn:loadTextures("c_55.png", "c_55.png")
			slot5.getBtn:setTitleText("")
		elseif data.CurrentChallengeNodeId < slot3.LevelId then
			slot5.getBtn:loadTextures("c_32.png", "c_32.png")
			slot5.getBtn:setEnabled(false)
			slot5.getBtn:setTitleText(TR("挑 战"))
		else
			slot5.getBtn:loadTextures("c_32.png", "c_32.png")
			slot5.getBtn:setEnabled(true)
			slot5.getBtn:setTitleText((data.IsPass == 1 and TR("领 取")) or TR("挑 战"))
			slot5.getBtn:setClickAction(function ()
				if data.IsPass == 1 then
					slot0:requestGetFightReward(slot1.LevelId)
				else
					ui.showCampReady({
						callModelSub = ModuleSub.eCharacter,
						callback = function (slot0)
							if Resource.isEnough(ResourceTypeSub.eVit, Utility.calcNeedVitOfFormation(slot0)) == false then
								return 
							end

							slot0:requestGetFightInfo(slot1.LevelId, table.concat(slot0, ","))

							return 
						end
					})
				end

				return 
			end)
		end
	else
		slot5 = slot0.createLayoutTemplateNode(slot0, "TaskTemNode", {
			strTaskIntro = slot3.showStr
		})

		for slot9, slot10 in ipairs(Utility.analysisStrResList(slot3.Reward)) do
			slot5.rewardListView:pushBackCustomItem(slot0.createLayoutTemplateNode(slot0, "CardLayout", {
				cardData = {
					cardInfo = slot10,
					showAttrs = {
						Enums.CardShowAttr.eNum,
						Enums.CardShowAttr.eStar
					}
				}
			}))
		end

		if slot3.receivedReward == true then
			slot5.getBtn:setEnabled(false)
			slot5.getBtn:loadTextures("c_55.png", "c_55.png")
			slot5.getBtn:setTitleText("")
		else
			slot5.getBtn:setTitleText(TR("领 取"))
			slot5.getBtn:loadTextures("c_32.png", "c_32.png")
			slot5.getBtn:setEnabled(slot3.canGetReward)
			slot5.getBtn:setClickAction(function ()
				slot0:requestGetTaskReward(slot1.TaskId)

				return 
			end)
		end

		slot5.progLabel:setVisible(true)

		if slot4.IsRankType ~= nil and slot4.IsRankType == 1 then
			slot5.progLabel:setString(TR("当前排名:%s", slot3.CurrentValue))
		else
			slot5.progLabel:setString(string.format("%s/%s", Utility.numberWithUnit(slot3.CurrentValue), Utility.numberWithUnit(slot3.MaxValue)))
		end
	end

	slot5.setPosition(slot5, 0, 0)
	slot1.addChild(slot1, slot5)

	return 
end
slot0.isCanGetreward = function (slot0, slot1)
	if slot1.LoginType ~= nil and slot1.LoginType == 1 then
		slot2 = string.split(slot1.RewardDaysStr, ",")
		slot3 = string.split(slot1.LoginDaysStr, ",")

		for slot7, slot8 in ipairs(slot1.List) do
			if table.indexof(slot3, tostring(slot8.Day)) ~= false and table.indexof(slot2, tostring(slot8.Day)) == false then
				return true
			end
		end
	elseif slot1.ExchangeType ~= nil and slot1.ExchangeType == 1 then
		return false
	elseif slot1.ChallengeType ~= nil and slot1.ChallengeType == 1 then
		for slot5, slot6 in ipairs(slot1.List) do
			if slot1.CurrentChallengeNodeId == slot6.LevelId and slot1.IsPass == 1 then
				return true
			end
		end
	else
		for slot5, slot6 in ipairs(slot1.List) do
			slot7 = false

			if slot1.IsRankType ~= nil and slot1.IsRankType == 1 then
				slot7 = slot6.CurrentValue <= slot6.MaxValue
			end

			if slot6.MaxValue <= slot6.CurrentValue and slot6.IsGetReward == false then
				return true
			end
		end
	end

	return false
end
slot0.refreshTaskList = function (slot0)
	slot0.mTaskData = slot0.sortTaskData(slot0, slot0.mTotalInfo.Task[slot0.mSelectDay][slot0.mTaskTag])

	slot0.mTableView:reloadData()
	slot0.mTableView:jumpToTop()

	return 
end
slot0.dealRewardResponseData = function (slot0, slot1)
	slot0.mTotalInfo = slot1.CharacterInfo

	slot0.refreshProgress(slot0)
	slot0.refreshDayTab(slot0)
	slot0.refreshTaskList(slot0)

	if slot1.BaseGetGameResourceList ~= nil then
		ui.showFlashReward({
			BaseGetGameResourceList = slot1.BaseGetGameResourceList
		})
	end

	PlayerAttrObj:checkLvUp()

	return 
end
slot0.onGetProgReward = function (slot0, slot1)
	slot3 = Utility.analysisStrResList(slot0.mTotalInfo.BoxConfig[slot1.index].Reward) or {}
	slot4 = string.split(slot0.mTotalInfo.GetBoxIdStr, ",")

	if slot2.Condition <= slot0.mTotalInfo.BoxInfo and not table.indexof(slot4, tostring(slot2.Id)) then
		slot0.requestGetBoxReward(slot0, slot2.Id)
	elseif 1 < #slot3 then
		LayerManager.addLayer({
			cleanUp = false,
			name = "commonlayer.DlgRewardShowLayer",
			data = {
				title = TR("奖励预览"),
				rewardStr = slot2.Reward
			},
			zOrder = Enums.ZOrderType.ePopLayer
		})
	else
		slot1.defaultCardClick()
	end

	return 
end
slot0.onTaskChange = function (slot0, slot1)
	slot0.mTaskTag = slot1

	slot0.refreshTaskList(slot0)

	if slot0.mTotalInfo.Task[slot0.mSelectDay][slot1].EnumId == 21 and RedDotObj:isValid(ModuleSub.eCharacterPoint, string.format("Day_%d_21", slot0.mSelectDay)) then
		RedDotObj:seeRedDot("CharacterPoint", string.format("21_%d", slot0.mSelectDay))
	end

	return 
end
slot0.onCellSize = function (slot0)
	return 629, 111
end
slot0.onCellNum = function (slot0)
	return #slot0.mTaskData
end
slot0.onCellCreate = function (slot0, slot1, slot2)
	slot0.createTaskItem(slot0, slot1, slot2)

	return 
end
slot0.onCellRefresh = function (slot0, slot1, slot2)
	slot0.createTaskItem(slot0, slot1, slot2)

	return 
end
slot0.requestGetInfo = function (slot0)
	slot0.socketRequest(slot0, {
		methodName = "GetInfo",
		moduleName = "CharacterInfo",
		methodData = {
			slot0.mActivityId
		},
		successCallback = function (slot0)
			dump(slot0, "response")

			slot0.mTotalInfo = slot0

			slot0:createDayTab()
			slot0:refreshUI()

			return 
		end
	})

	return 
end
slot0.requestGetBoxReward = function (slot0, slot1)
	slot0.socketRequest(slot0, {
		methodName = "GetBoxReward",
		moduleName = "CharacterInfo",
		methodData = {
			slot0.mActivityId,
			slot1
		},
		successCallback = function (slot0)
			slot0:dealRewardResponseData(slot0)

			return 
		end
	})

	return 
end
slot0.requestGetLoginReward = function (slot0, slot1)
	slot0.socketRequest(slot0, {
		methodName = "GetLoginReward",
		moduleName = "CharacterInfo",
		methodData = {
			slot0.mActivityId,
			slot1
		},
		successCallback = function (slot0)
			slot0:dealRewardResponseData(slot0)

			return 
		end
	})

	return 
end
slot0.requestGetTaskReward = function (slot0, slot1)
	slot0.socketRequest(slot0, {
		methodName = "GetTaskReward",
		moduleName = "CharacterInfo",
		methodData = {
			slot0.mActivityId,
			slot1
		},
		successCallback = function (slot0)
			slot0:dealRewardResponseData(slot0)

			return 
		end
	})

	return 
end
slot0.requestExchange = function (slot0, slot1)
	slot0.socketRequest(slot0, {
		methodName = "Exchange",
		moduleName = "CharacterInfo",
		methodData = {
			slot0.mActivityId,
			slot1
		},
		successCallback = function (slot0)
			slot0:dealRewardResponseData(slot0)

			return 
		end
	})

	return 
end
slot0.requestGetFightInfo = function (slot0, slot1, slot2)
	slot0.socketRequest(slot0, {
		methodName = "GetChallengeInfo",
		moduleName = "CharacterInfo",
		methodData = {
			slot0.mActivityId,
			slot1,
			slot2
		},
		successCallback = function (slot0)
			require("common.BattleEntry"):StartBattle({
				fightInfo = slot0.FightInfo,
				extraData = {
					chapterId = slot0.mActivityId,
					nodeId = require("common.BattleEntry").StartBattle
				}
			})

			return 
		end
	})

	return 
end
slot0.requestGetFightReward = function (slot0, slot1)
	slot0.socketRequest(slot0, {
		methodName = "GetChallengeReward",
		moduleName = "CharacterInfo",
		methodData = {
			slot0.mActivityId,
			slot1
		},
		successCallback = function (slot0)
			slot0:dealRewardResponseData(slot0)

			return 
		end
	})

	return 
end

return slot0
